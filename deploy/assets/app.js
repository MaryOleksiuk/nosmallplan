(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};"function"===typeof define&&define.amd?define(function(){return Z}):"undefined"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());

},{}],2:[function(require,module,exports){
'use strict';

require('./general');

var colors = ['pink', 'red', 'blue']; // Module Life

var moColors = ['blue', 'orange'];

// We have Es6 Goodies thanks to Babel
var allTheColors = [].concat(colors, [moColors]);
allTheColors.map(function (c) {
  return console.log(c);
});

},{"./general":5}],3:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
$('#create_customer').submit(function(e){
    e.preventDefault();

    var first_name = $('#first_name').val().trim();
    $('#first_name').val(first_name);
    var last_name = $('#last_name').val().trim();
    $('#last_name').val(last_name);
    var email = $('#email').val().trim();
    $('#email').val(email);
    var password = $('#password').val();
    if(first_name == "") {
        $('#first_name').focus();
        return false;
    }
    if(last_name == "") {
        $('#last_name').focus();
        return false;
    }
    if(email == "") {
        $('#email').focus();
        return false;
    }
    if(password == "") {
        $('#password').focus();
        return false;
    }

    var param = {
        "customer": {
            "first_name": first_name,
            "last_name": last_name,
            "email": email,
            "verified_email": true,
            "password": password,
            "password_confirmation": password,
            "send_email_welcome": false
        }
    };

    var url = $(this).attr('action');


    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function(response) {
        if (this.readyState == 4 && this.status == 200) {
            console.log(response);
            // window.location.href = '/account';
        }
    };
    xhttp.open("POST", url, true);
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send(JSON.stringify(param));
});
*/

(0, _jquery2.default)('#update-profile').submit(function (e) {
    e.preventDefault();

    var first_name = (0, _jquery2.default)('#first_name').val().trim();
    (0, _jquery2.default)('#first_name').val(first_name);
    var last_name = (0, _jquery2.default)('#last_name').val().trim();
    (0, _jquery2.default)('#last_name').val(last_name);
    var email = (0, _jquery2.default)('#email').val().trim();
    (0, _jquery2.default)('#email').val(email);
    if (first_name == "") {
        (0, _jquery2.default)('#first_name').focus();
        return false;
    }
    if (last_name == "") {
        (0, _jquery2.default)('#last_name').focus();
        return false;
    }
    if (email == "") {
        (0, _jquery2.default)('#email').focus();
        return false;
    }

    var param = {
        "customer": {
            "id": (0, _jquery2.default)('#customer_id').val(),
            "first_name": first_name,
            "last_name": last_name,
            "email": email
        }
    };

    var url = (0, _jquery2.default)(this).attr('action');

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            window.location.href = '/account';
        }
    };
    xhttp.open("PUT", url, true);
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send(JSON.stringify(param));
});

(0, _jquery2.default)('#change-password').submit(function (e) {
    e.preventDefault();
    var pwd = (0, _jquery2.default)('#customer_password').val();
    var re_pwd = (0, _jquery2.default)('#customer_confirm_password').val();
    if (pwd == "") {
        (0, _jquery2.default)('#customer_password').focus();
        return false;
    }

    if (pwd != re_pwd) {
        (0, _jquery2.default)('#customer_confirm_password').focus();
        return false;
    }

    var param = {
        "customer": {
            "id": (0, _jquery2.default)('#customer_id').val(),
            "password": pwd,
            "password_confirmation": re_pwd
        }
    };

    var url = (0, _jquery2.default)(this).attr('action');

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            window.location.href = '/account';
        }
    };
    xhttp.open("PUT", url, true);
    xhttp.setRequestHeader("Content-type", "application/json");
    xhttp.send(JSON.stringify(param));
});

// account maps 
if ((0, _jquery2.default)('#customer_maps').length) {
    var load_maps = function load_maps() {
        (0, _jquery2.default)('#customer_maps .block_map').each(function () {
            if (!(0, _jquery2.default)(this).hasClass('block_map_new')) {
                (0, _jquery2.default)(this).remove();
            }
        });

        var item_ct = '';
        var setting = '';
        myMaps.forEach(function (item) {
            setting = JSON.parse(item.map_setting).toString();

            item_ct = '' + '<div class="block_map" data-id="' + item.id + '" data-setting="' + setting + '" data-name="' + item.map_name + '">' + '<div class="box">' + '<img src="' + window.map_icon_url + '" />' + '<p>' + item.map_name + '</p>' + '<div class="v_border"></div>' + '<div class="h_border"></div>' + '<div class="overlap--buttons">' + '<div>' + '<button class="button button--green button--edit">Edit</button>' + '<button class="button button--disable button--delete">delete</button>' + '</div>' + '</div>' + '</div>' + '</div>';

            (0, _jquery2.default)('#customer_maps .map-blocks').append(item_ct);
        });
    };

    // load maps
    var api_url = 'https://no-small-plan.herokuapp.com/api';
    var customerId = meta.page.customerId;
    var myMaps;
    var selectedMap = {
        id: -1,
        map_name: "",
        map_setting: ""
    };

    _jquery2.default.getJSON(api_url + "/map/load/" + customerId, function (response) {
        if (!response.error) {
            myMaps = response.data;

            var item_ct = '';
            var setting = '';
            myMaps.forEach(function (item) {
                setting = JSON.parse(item.map_setting).toString();

                item_ct = '' + '<div class="block_map" data-id="' + item.id + '" data-setting="' + setting + '" data-name="' + item.map_name + '">' + '<div class="box">' + '<img src="' + window.map_icon_url + '" />' + '<p>' + item.map_name + '</p>' + '<div class="v_border"></div>' + '<div class="h_border"></div>' + '<div class="overlap--buttons">' + '<div>' + '<button class="button button--green button--edit">Edit</button>' + '<button class="button button--disable button--delete">delete</button>' + '</div>' + '</div>' + '</div>' + '</div>';

                (0, _jquery2.default)('#customer_maps .map-blocks').append(item_ct);
            });
        } else {}

        console.log(response);
    });

    // click map
    (0, _jquery2.default)('#customer_maps').on('click', '.block_map_new', function (e) {
        var map_id = -1;
        var map_name = "";
        var map_setting = [];

        selectedMap = {
            id: map_id,
            map_name: map_name,
            map_setting: map_setting
        };

        (0, _jquery2.default)('#map_name').val(selectedMap.map_name);

        (0, _jquery2.default)("#customer_maps-modal").modal({
            fadeDuration: 100,
            fadeDelay: 0.2,
            closeClass: 'icon-remove',
            closeText: 'X',
            escapeClose: false,
            clickClose: false
        });

        (0, _jquery2.default)('#customer_maps-modal .button').removeClass('button--green').addClass('button--disabled');
    });

    // click map
    (0, _jquery2.default)('#customer_maps').on('click', '.button--edit', function (e) {
        var parent = (0, _jquery2.default)(this).parents('.block_map');
        var map_id = (0, _jquery2.default)(parent).data('id');
        var map_name = (0, _jquery2.default)(parent).data('name');
        var map_setting = (0, _jquery2.default)(parent).data('setting') ? (0, _jquery2.default)(parent).data('setting').split(",") : [];

        selectedMap = {
            id: map_id,
            map_name: map_name,
            map_setting: map_setting
        };
        console.log(selectedMap);
        (0, _jquery2.default)('#map_name').val(selectedMap.map_name);

        (0, _jquery2.default)("#customer_maps-modal").modal({
            fadeDuration: 100,
            fadeDelay: 0.2,
            closeClass: 'icon-remove',
            closeText: 'X',
            escapeClose: false,
            clickClose: false
        });

        (0, _jquery2.default)('#customer_maps-modal .button').removeClass('button--disabled').addClass('button--green');
    });

    (0, _jquery2.default)('#customer_maps-modal').on(_jquery2.default.modal.OPEN, function (event, modal) {
        setTimeout(function () {
            // let's build a list of currently selected countries
            console.log(map);
            for (var i in map.dataProvider.areas) {
                var area = map.dataProvider.areas[i];
                if (area.showAsSelected) {
                    area.showAsSelected = false;

                    // make the chart take in new color
                    area.validate();
                }
            }

            countries = [];

            for (var _i = 0; _i < selectedMap.map_setting.length; _i++) {
                var area = map.getObjectById(selectedMap.map_setting[_i]);
                console.log("area===");
                console.log(area);
                area.showAsSelected = true;

                // make the chart take in new color
                area.validate();

                countries.push(area.id);
            }

            console.log(countries);
        }, 500);
    });

    (0, _jquery2.default)('#save-your-map input.button').click(function (e) {
        if ((0, _jquery2.default)(this).hasClass('button--disabled')) {
            return false;
        }

        e.preventDefault();

        var map_name = _jquery2.default.trim((0, _jquery2.default)('#map_name').val());
        if (map_name == "") {
            (0, _jquery2.default)('#map_name').focus();
            return false;
        }

        (0, _jquery2.default)('#save-your-map .button').removeClass('button--green').addClass('button--disabled');

        var data = JSON.stringify(countries);
        var params = {
            map: {
                id: selectedMap.id,
                name: map_name,
                setting: data
            },
            customer_id: meta.page.customerId
        };

        console.log(params);

        _jquery2.default.ajax({
            type: 'post',
            url: api_url + '/map/save',
            data: params,
            success: function success(response) {
                myMaps = response.data;

                (0, _jquery2.default)('#save-your-map .button').removeClass('button--disabled').addClass('button--green');
                (0, _jquery2.default)('#map_name').val('');

                (0, _jquery2.default)("#customer_maps-modal a.close-modal").trigger("click");

                load_maps();
            },
            dataType: 'json'
        });
    });

    // delete map

    // click map
    (0, _jquery2.default)('#customer_maps').on('click', '.button--delete', function (e) {
        var parent = (0, _jquery2.default)(this).parents('.block_map');
        var map_id = (0, _jquery2.default)(parent).data('id');
        var map_name = (0, _jquery2.default)(parent).data('name');
        var map_setting = (0, _jquery2.default)(parent).data('setting') ? (0, _jquery2.default)(parent).data('setting').split(",") : [];

        selectedMap = {
            id: map_id,
            map_name: map_name,
            map_setting: map_setting
        };

        (0, _jquery2.default)('#delete_your_map span.delete_map--name').html(map_name);

        (0, _jquery2.default)("#customer_maps-modal_delete").modal({
            fadeDuration: 100,
            fadeDelay: 0.2,
            closeClass: 'icon-remove',
            closeText: 'X',
            escapeClose: false,
            clickClose: false
        });
    });

    (0, _jquery2.default)('a.cancel-modal').click(function () {
        (0, _jquery2.default)(".modal a.close-modal").trigger("click");
    });

    (0, _jquery2.default)('#delete-your-map input.button').click(function (e) {
        if ((0, _jquery2.default)(this).hasClass('button--disabled')) {
            return false;
        }

        e.preventDefault();

        (0, _jquery2.default)('#delete-your-map .button').removeClass('button--green').addClass('button--disabled');

        var data = JSON.stringify(countries);
        var params = {
            map: {
                id: selectedMap.id
            },
            customer_id: meta.page.customerId
        };

        console.log("params");
        console.log(params);

        _jquery2.default.ajax({
            type: 'post',
            url: api_url + '/map/delete',
            data: params,
            success: function success(response) {
                myMaps = response.data;

                (0, _jquery2.default)('#save-your-map .button').removeClass('button--disabled').addClass('button--green');

                (0, _jquery2.default)("#customer_maps-modal_delete a.close-modal").trigger("click");

                load_maps();
            },
            dataType: 'json'
        });
    });
}

},{"jquery":"jquery"}],4:[function(require,module,exports){
'use strict';

var _webfontloader = require('webfontloader');

var _webfontloader2 = _interopRequireDefault(_webfontloader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Lazy load of fonts from Google, Typekit and more
// https://github.com/typekit/webfontloader
_webfontloader2.default.load({
  google: {
    families: ['Open Sans']
  }
});

},{"webfontloader":1}],5:[function(require,module,exports){
'use strict';

require('./jquery');

require('./fonts');

require('./modal');

require('./slick');

require('./map');

require('./account');

require('./product_map');

$(document).ready(function () {

    /* Nagigation */
    $('#nav-toggle').click(function () {
        if ($(this).is(":checked")) {
            $('.content-wrap').css('transform', 'translateX(88%)');
            $('.infobar').css('transform', 'translateX(88%)');
        } else {
            $('.content-wrap').css('transform', 'translateX(0)');
            $('.infobar').css('transform', 'translateX(0)');
        }
        $('body, html').toggleClass('overflow-hidden');
        $('#c-mask').toggleClass('is-active');
    });

    $('#c-mask').click(function () {
        $('#overlay').fadeOut('slow');
        $(this).removeClass('is-active');
        $('#nav-toggle').prop('checked', false);
        $('.content-wrap').css('transform', 'translateX(0)');
        $('.infobar').css('transform', 'translateX(0)');
    });

    $('a.header__nav-item-link--account').click(function (e) {
        console.log($(window).width());
        if ($(window).width() < 768 && typeof meta.page.customerId != 'undefined') {
            e.preventDefault();
            $('li.header__nav-item').hide();
            $('li.header__nav-item-accounts').show();
        }
    });

    $('li.header__nav-item-accounts-back a.header__nav-item-link').click(function (e) {
        e.preventDefault();
        $('li.header__nav-item').show();
        $('li.header__nav-item-accounts').hide();
    });

    /* Hide mobile nav when window resize */
    $(window).resize(function () {
        if ($(window).width() > 768) {
            $('#overlay').fadeOut('slow');
            $('#c-mask').removeClass('is-active');
            $('#nav-toggle').prop('checked', false);
            $('.content-wrap').css('transform', 'translateX(0)');
            $('.infobar').css('transform', 'translateX(0)');
        }
    });

    /* Product page start */

    (function () {
        $('.product__image').clone().insertBefore($('.product__description'));
    })();

    (function () {
        $('.product__image-for').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            adaptiveHeight: true,
            asNavFor: '.product-thumbnails',
            arrows: true,
            fade: true
        });
        $('.product-thumbnails').slick({
            slidesToShow: 1,
            slidesToScroll: 3,
            asNavFor: '.product__image-for',
            arrows: false,
            variableWidth: true,
            outerEdgeLimit: true,
            infinite: false,
            dots: false,
            focusOnSelect: true
        });
    })();

    $('.product').on('click', '.swatch-element', function (e) {
        $(this).parents('ul.swatch').find('li.swatch-element').removeClass('swatch-active');
        $(this).addClass('swatch-active');

        var selectedSize = $(this).data('value');
        $(this).parents('ul.swatch').find('.product__small-title span').text(selectedSize);

        var option_index = $(this).data('id');

        $('#product-select-option-' + option_index).val(selectedSize).trigger('change');
    });

    /* Product page END */

    /* CART Page START*/

    $('.button-confirm').click(function (e) {
        $(this).addClass('button--disabled').text('Confirmed');
        $('.button-checkout').removeClass('button--disabled').addClass('button--green');
        e.stopPropagation();
    });

    function remove_currency_string(currency) {
        var arr = currency.split(' ');
        return arr[0];
    }

    $('.cart__quantity').on('change', function () {
        var itemId = parseInt($(this).attr('itemid'));
        var qty = parseInt($(this).val());
        var loopindex = parseInt($(this).data('loopindex'));

        $.ajax({
            url: '/cart/change.js',
            dataType: 'json',
            type: 'post',
            data: { quantity: qty, id: itemId },
            success: function success(itemData) {
                console.log(itemData);

                for (var i = 0; i < itemData.items.length; i++) {
                    var item = itemData.items[i];
                    if (item.id == itemId && i == loopindex) {
                        $('#cart__lineitem_lineprice_' + item.id + '_' + loopindex).text(remove_currency_string(Shopify.formatMoney(item.line_price, window.money_with_currency_format)));
                    }
                }

                $('#cart__subtotal-price').text(remove_currency_string(Shopify.formatMoney(itemData.original_total_price, window.money_with_currency_format)));
                $('#cart__total-price').text(remove_currency_string(Shopify.formatMoney(itemData.total_price, window.money_with_currency_format)));
                $('#cart-count').text(itemData.item_count);
            }
        });
    });

    /* CART Page END*/

    /*Infobar START */
    $('.button-close').click(function () {
        $('.infobar').css('display', 'none');
    });
    /* Infobar End */
});

},{"./account":3,"./fonts":4,"./jquery":6,"./map":7,"./modal":8,"./product_map":9,"./slick":10}],6:[function(require,module,exports){
(function (global){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Adding jQuery to the global scope
global.$ = global.jQuery = _jquery2.default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"jquery":"jquery"}],7:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _jquery2.default)(document).ready(function () {

    var api_url = 'https://no-small-plan.herokuapp.com/api';

    /* map page start */

    if ((0, _jquery2.default)('#mappanel').length) {
        var myMaps;
        var customerId;
        var selectedMap = {
            id: -1,
            map_name: "",
            map_setting: ""
        };

        if (typeof meta.page.customerId == 'undefined') {
            customerId = 1;
            (0, _jquery2.default)("#signin-modal").modal({
                fadeDuration: 100,
                fadeDelay: 0.20,
                closeClass: 'icon-remove',
                closeText: 'X',
                escapeClose: false,
                clickClose: false
            });
        } else {
            customerId = meta.page.customerId;
            console.log(customerId);
            _jquery2.default.getJSON(api_url + "/map/load/" + customerId, function (response) {
                if (!response.error) {
                    (0, _jquery2.default)('.maps__buttons_load').removeClass('button--disabled').addClass('button--green');
                    myMaps = response.data;
                } else {}

                console.log(response);
            });
        }

        (0, _jquery2.default)('.maps__buttons_load').click(function () {

            if ((0, _jquery2.default)(this).hasClass('button--green')) {

                // remove all slides
                var cnts = (0, _jquery2.default)('.maps--sliders .item').length;
                for (var i = cnts - 1; i > 0; i--) {
                    if (typeof (0, _jquery2.default)('.maps--sliders .item')[i] != 'undefined') {
                        (0, _jquery2.default)('.maps--sliders .item')[i].remove();
                    }
                    console.log(i);
                }

                var item_ct = '';
                var setting = '';
                myMaps.forEach(function (item) {
                    setting = JSON.parse(item.map_setting).toString();
                    item_ct = '<div class="item" data-id="' + item.id + '" data-setting="' + setting + '" data-name="' + item.map_name + '">' + '   <img src="' + window.map_icon_url + '" />' + '<div class="title">' + item.map_name + '</div>';

                    (0, _jquery2.default)('.maps--sliders').slick('slickAdd', item_ct);
                });

                (0, _jquery2.default)('#load--maps-blocker').show();
                (0, _jquery2.default)('#load--maps').animate({ bottom: "0px" }, 500);
            }
        });

        (0, _jquery2.default)('.maps__buttons_product').click(function () {
            if ((0, _jquery2.default)('.maps__buttons_product').hasClass('button--disabled')) {
                return false;
            }

            (0, _jquery2.default)('.maps__buttons_product').removeClass('button--green').addClass('button--disabled');

            (0, _jquery2.default)('#select-product').show("slow", function () {
                var offset = (0, _jquery2.default)('#select-product').offset();

                (0, _jquery2.default)("html, body").animate({ scrollTop: offset.top }, "slow");
            });
        });

        (0, _jquery2.default)('.maps__buttons_save').click(function (event) {
            event.preventDefault();
            if ((0, _jquery2.default)(this).hasClass('button--green')) {

                (0, _jquery2.default)('#map_name').val(selectedMap.map_name);

                (0, _jquery2.default)("#signin-modal").modal({
                    fadeDuration: 100,
                    fadeDelay: 0.20,
                    closeClass: 'icon-remove',
                    closeText: 'X',
                    escapeClose: false,
                    clickClose: false
                });
            }
        });

        (0, _jquery2.default)('.maps--sliders').slick({
            infinite: false,
            slidesToShow: 5,
            slidesToScroll: 5,
            responsive: [{
                breakpoint: 1199,
                settings: {
                    slidesToShow: 4,
                    slidesToScroll: 4
                }
            }, {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 3
                }
            }, {
                breakpoint: 768,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            }, {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            }]
        });

        (0, _jquery2.default)('.country_list-header ul').slick({
            infinite: false,
            slidesToShow: 6,
            slidesToScroll: 6,
            responsive: [{
                breakpoint: 1024,
                settings: {
                    slidesToShow: 5,
                    slidesToScroll: 5
                }
            }, {
                breakpoint: 992,
                settings: {
                    slidesToShow: 4,
                    slidesToScroll: 4
                }
            }, {
                breakpoint: 768,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            }, {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            }]
        });

        (0, _jquery2.default)('.load--maps_close').click(function (e) {
            (0, _jquery2.default)('#load--maps-blocker').hide();
            (0, _jquery2.default)('#load--maps').animate({ bottom: "-1500px" }, 500);
        });

        (0, _jquery2.default)('.maps--sliders').on('click', '.item', function (e) {
            var map_id = (0, _jquery2.default)(this).data('id');
            var map_name = (0, _jquery2.default)(this).data('name');
            var map_setting = (0, _jquery2.default)(this).data('setting') ? (0, _jquery2.default)(this).data('setting').split(",") : [];

            for (var _i = 0; _i < countries.length; _i++) {
                var area = map.getObjectById(countries[_i]);
                area.showAsSelected = false;

                // make the chart take in new color
                area.validate();
            }

            countries = [];

            for (var _i2 = 0; _i2 < map_setting.length; _i2++) {

                var area = map.getObjectById(map_setting[_i2]);
                area.showAsSelected = true;

                // make the chart take in new color
                area.validate();

                countries.push(area.id);
            }

            console.log(countries);

            selectedMap = {
                id: map_id,
                map_name: map_name,
                map_setting: map_setting
            };

            (0, _jquery2.default)('.load--maps_close').trigger('click');

            console.log(selectedMap);

            (0, _jquery2.default)('.maps__buttons_save').removeClass('button--green').addClass('button--disabled');
            if ((0, _jquery2.default)('.maps__buttons_product').hasClass('button--disabled')) {
                (0, _jquery2.default)('.maps__buttons_product').removeClass('button--disabled').addClass('button--green');
            }

            (0, _jquery2.default)("html, body").animate({ scrollTop: 0 }, "slow");
        });

        for (var i = 0; i < window.map_countries.length - 1; i++) {
            var country_obj = window.map_countries[i];
            if (country_obj.area) {

                var tmp_area = country_obj.area.replace(' ', '');
                (0, _jquery2.default)('ul.area-' + tmp_area).append('<li data-name="' + country_obj.name + '" data-code="' + country_obj.code + '" data-area="' + country_obj.area + '"><label><input type="checkbox" />' + country_obj.name + '</label></li>');
            }
        }

        /* map page end */

        /* signin modal start */
        (0, _jquery2.default)('#signin-modal #customer_login').submit(function (e) {

            if ((0, _jquery2.default)('#customer_login .button').hasClass('button--disabled')) {
                return false;
            }

            e.preventDefault();
            var randnum = Math.floor(Math.random() * 1001);

            var customer_email = _jquery2.default.trim((0, _jquery2.default)('#customer_email').val());
            var customer_password = _jquery2.default.trim((0, _jquery2.default)('#customer_password').val());
            if (customer_email == "") {
                (0, _jquery2.default)('#customer_email').focus();
                return false;
            }
            if (customer_password == "") {
                (0, _jquery2.default)('#customer_password').focus();
                return false;
            }

            (0, _jquery2.default)('#customer_login .button').removeClass('button--green').addClass('button--disabled');

            _jquery2.default.ajax({
                type: "POST",
                url: "/account/login",
                cache: false,
                data: (0, _jquery2.default)('#customer_login').serialize() + "&random=" + randnum,
                success: function success(html) {

                    var result = (0, _jquery2.default)(html).find('#customer_detail').html();

                    (0, _jquery2.default)('#customer_login .button').removeClass('button--disabled').addClass('button--green');

                    if (typeof result == 'undefined') {
                        (0, _jquery2.default)('#customer_login .errors').html('<ul><li>Invalid login credentials.</li></ul>');
                        (0, _jquery2.default)('#customer_login .errors').slideDown('slow');
                    } else {
                        window.location.reload(true);
                    }

                    console.log(meta);
                }
            });
        });

        // recover_customer_password
        (0, _jquery2.default)('#signin-modal #recover-password form').submit(function (e) {
            if ((0, _jquery2.default)('#recover-password form .button').hasClass('button--disabled')) {
                return false;
            }

            e.preventDefault();
            var randnum = Math.floor(Math.random() * 1001);

            var recover_email = _jquery2.default.trim((0, _jquery2.default)('#recover_email').val());
            if (recover_email == "") {
                (0, _jquery2.default)('#recover_email').focus();
                return false;
            }

            (0, _jquery2.default)('#recover-password form .button').removeClass('button--green').addClass('button--disabled');

            _jquery2.default.ajax({
                type: "POST",
                url: "/account/recover",
                cache: false,
                data: (0, _jquery2.default)('#recover-password form').serialize() + "&random=" + randnum,
                success: function success(html) {

                    var result = (0, _jquery2.default)(html).find('#recover-password form .errors').html();

                    (0, _jquery2.default)('#recover-password form .button').removeClass('button--disabled').addClass('button--green');

                    if (typeof result == 'undefined') {
                        (0, _jquery2.default)('#recover_email').val('');

                        (0, _jquery2.default)('#recover-password').animate({
                            opacity: 'hide'
                        }, 300, 'linear', function () {
                            (0, _jquery2.default)('#customer_login .errors').html('').hide();
                            (0, _jquery2.default)('#customer').fadeIn();
                        });
                    } else {
                        (0, _jquery2.default)('#recover-password form .errors').html(result);
                        (0, _jquery2.default)('#recover-password form .errors').slideDown('slow');
                    }
                }
            });
        });

        (0, _jquery2.default)('#save-your-map input.button').click(function (e) {
            if ((0, _jquery2.default)(this).hasClass('button--disabled')) {
                return false;
            }

            e.preventDefault();

            var map_name = _jquery2.default.trim((0, _jquery2.default)('#map_name').val());
            if (map_name == "") {
                (0, _jquery2.default)('#map_name').focus();
                return false;
            }

            (0, _jquery2.default)('#save-your-map .button').removeClass('button--green').addClass('button--disabled');

            var data = JSON.stringify(countries);
            var params = {
                map: {
                    id: selectedMap.id,
                    name: map_name,
                    setting: data
                },
                customer_id: meta.page.customerId
            };

            selectedMap.map_name = map_name, selectedMap.map_setting = countries;

            _jquery2.default.ajax({
                type: 'post',
                url: api_url + '/map/save',
                data: params,
                success: function success(response) {
                    myMaps = response.data;

                    if (selectedMap.id == -1) {
                        selectedMap.id = myMaps[myMaps.length - 1].id;
                    }

                    (0, _jquery2.default)('#save-your-map .button').removeClass('button--disabled').addClass('button--green');
                    (0, _jquery2.default)('#map_name').val('');

                    if ((0, _jquery2.default)('.maps__buttons_load').hasClass('button--disabled')) {
                        (0, _jquery2.default)('.maps__buttons_load').removeClass('button--disabled').addClass('button--green');
                    }

                    (0, _jquery2.default)('.maps__buttons_save').removeClass('button--green').addClass('button--disabled');
                    (0, _jquery2.default)('.maps__buttons_product').removeClass('button--disabled').addClass('button--green');

                    (0, _jquery2.default)("#signin-modal a.close-modal").trigger("click");
                },
                dataType: 'json'
            });
        });

        (0, _jquery2.default)('#register-account').click(function () {
            (0, _jquery2.default)('#customer').animate({
                opacity: 'hide'
            }, 100, 'linear', function () {
                (0, _jquery2.default)('#create-customer').fadeIn();
            });
        });

        (0, _jquery2.default)('#return-signin').click(function () {
            (0, _jquery2.default)('#create-customer').animate({
                opacity: 'hide'
            }, 100, 'linear', function () {
                (0, _jquery2.default)('#customer').fadeIn();
            });
        });

        (0, _jquery2.default)('#forgot_password').click(function () {
            (0, _jquery2.default)('#customer').animate({
                opacity: 'hide'
            }, 100, 'linear', function () {
                (0, _jquery2.default)('#recover-password').fadeIn();
            });
        });

        (0, _jquery2.default)('#cancel-forgot').click(function () {
            (0, _jquery2.default)('#recover-password').animate({
                opacity: 'hide'
            }, 100, 'linear', function () {
                (0, _jquery2.default)('#customer').fadeIn();
            });
        });
        /* signin modal end */

        //////. country list - integration ////////////

        (0, _jquery2.default)('.country_list-header li').click(function () {
            var rel = (0, _jquery2.default)(this).data('rel');

            (0, _jquery2.default)('.country_list-body ul').hide();
            (0, _jquery2.default)('.country_list-body ul.area-' + rel).show();
        });

        (0, _jquery2.default)('.country_list-body li label').click(function () {
            var checked = (0, _jquery2.default)(this).find('input').prop('checked');

            var map_id = (0, _jquery2.default)(this).parent().data('code');
            var area = map.getObjectById(map_id);
            if (checked) {
                area.showAsSelected = true;
                var index = countries.indexOf(area.id);
                if (index == -1) {
                    countries.push(area.id);
                }
            } else {
                area.showAsSelected = false;
                var index = countries.indexOf(area.id);
                if (index > -1) {
                    countries.splice(index, 1);
                }
            }

            // make the chart take in new color
            area.validate();

            if (countries.length) {
                (0, _jquery2.default)('.maps__buttons_save').removeClass('button--disabled').addClass('button--green');
            } else {
                (0, _jquery2.default)('.maps__buttons_save').removeClass('button--green').addClass('button--disabled');
            }

            if ((0, _jquery2.default)('.maps__buttons_product').hasClass('button--green')) {
                (0, _jquery2.default)('.maps__buttons_product').removeClass('button--green').addClass('button--disabled');
            }
        });

        //////. products - integration ////////////
        (0, _jquery2.default)('#select-product a.products-item__link').click(function () {
            var product_id = (0, _jquery2.default)(this).data('id');
            var product_url = (0, _jquery2.default)(this).data('url');

            (0, _jquery2.default)('#selected-product').show("slow", function () {
                var offset = (0, _jquery2.default)('#selected-product').offset();

                (0, _jquery2.default)("html, body").animate({ scrollTop: offset.top }, "slow");
            });

            _jquery2.default.ajax({
                type: "GET",
                url: product_url,
                cache: false,
                success: function success(html) {

                    var result = (0, _jquery2.default)(html).find('section.product').html();

                    (0, _jquery2.default)('#product-view-panel').html(result);

                    // remove 'add your map' button
                    (0, _jquery2.default)('#product-view-panel .product__content .button--add_your_map').remove();

                    var country_names = '';
                    selectedMap.map_setting.forEach(function (item) {
                        for (var i = 0; i < window.map_countries.length - 1; i++) {
                            if (item == window.map_countries[i].code) {
                                country_names += window.map_countries[i].name + ', ';
                            }
                        }
                    });

                    if (country_names) {
                        console.log(country_names);
                        country_names = country_names.substring(0, country_names.length - 2);

                        (0, _jquery2.default)('#map_name_lineitem').val(selectedMap.map_name);
                        (0, _jquery2.default)('#map_countries_lineitem').val(country_names);

                        (0, _jquery2.default)('.accordeon__tab--map p').text(country_names);
                        (0, _jquery2.default)('.accordeon__tab--map').show();
                        // expand detail tab as default
                        (0, _jquery2.default)('.accordeon__tab.accordeon__tab--map label').trigger('click');

                        (0, _jquery2.default)('#add-to-cart').removeClass('button--disabled').addClass('button--green');
                    }

                    /* Product page start */

                    (0, _jquery2.default)('.product__image').clone().insertBefore((0, _jquery2.default)('.product__description'));

                    (0, _jquery2.default)('.product__image-for').slick({
                        slidesToShow: 1,
                        slidesToScroll: 1,
                        adaptiveHeight: true,
                        asNavFor: '.product-thumbnails',
                        arrows: true,
                        fade: true
                    });

                    (0, _jquery2.default)('.product-thumbnails').slick({
                        slidesToShow: 5,
                        slidesToScroll: 1,
                        asNavFor: '.product__image-for',
                        arrows: false,
                        variableWidth: true,
                        infinite: false,
                        dots: false,
                        focusOnSelect: true
                    });

                    /* Product page END */

                    new Shopify.OptionSelectors("product-select", { product: window.product_json, onVariantSelected: selectCallback });
                }
            });
        });
    }
});

},{"jquery":"jquery"}],8:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
    A simple jQuery modal (http://github.com/kylefox/jquery-modal)
    Version 0.8.2
*/

(function (factory) {
  // Making your jQuery plugin work better with npm tools
  // http://blog.npmjs.org/post/112712169830/making-your-jquery-plugin-work-better-with-npm
  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {
    factory(require("jquery"), window, document);
  } else {
    factory(jQuery, window, document);
  }
})(function ($, window, document, undefined) {

  var modals = [],
      getCurrent = function getCurrent() {
    return modals.length ? modals[modals.length - 1] : null;
  },
      selectCurrent = function selectCurrent() {
    var i,
        selected = false;
    for (i = modals.length - 1; i >= 0; i--) {
      if (modals[i].$blocker) {
        modals[i].$blocker.toggleClass('current', !selected).toggleClass('behind', selected);
        selected = true;
      }
    }
  };

  $.modal = function (el, options) {
    var remove, target;
    this.$body = $('body');
    this.options = $.extend({}, $.modal.defaults, options);
    this.options.doFade = !isNaN(parseInt(this.options.fadeDuration, 10));
    this.$blocker = null;
    if (this.options.closeExisting) while ($.modal.isActive()) {
      $.modal.close();
    } // Close any open modals.
    modals.push(this);
    if (el.is('a')) {
      target = el.attr('href');
      this.anchor = el;
      //Select element by id from href
      if (/^#/.test(target)) {
        this.$elm = $(target);
        if (this.$elm.length !== 1) return null;
        this.$body.append(this.$elm);
        this.open();
        //AJAX
      } else {
        this.$elm = $('<div>');
        this.$body.append(this.$elm);
        remove = function remove(event, modal) {
          modal.elm.remove();
        };
        this.showSpinner();
        el.trigger($.modal.AJAX_SEND);
        $.get(target).done(function (html) {
          if (!$.modal.isActive()) return;
          el.trigger($.modal.AJAX_SUCCESS);
          var current = getCurrent();
          current.$elm.empty().append(html).on($.modal.CLOSE, remove);
          current.hideSpinner();
          current.open();
          el.trigger($.modal.AJAX_COMPLETE);
        }).fail(function () {
          el.trigger($.modal.AJAX_FAIL);
          var current = getCurrent();
          current.hideSpinner();
          modals.pop(); // remove expected modal from the list
          el.trigger($.modal.AJAX_COMPLETE);
        });
      }
    } else {
      this.$elm = el;
      this.$body.append(this.$elm);
      this.open();
    }
  };

  $.modal.prototype = {
    constructor: $.modal,

    open: function open() {
      var m = this;
      this.block();
      // this.anchor.blur();
      if (this.options.doFade) {
        setTimeout(function () {
          m.show();
        }, this.options.fadeDuration * this.options.fadeDelay);
      } else {
        this.show();
      }
      $(document).off('keydown.modal').on('keydown.modal', function (event) {
        var current = getCurrent();
        if (event.which === 27 && current.options.escapeClose) current.close();
      });
      if (this.options.clickClose) this.$blocker.click(function (e) {
        if (e.target === this) $.modal.close();
      });
    },

    close: function close() {
      modals.pop();
      this.unblock();
      this.hide();
      if (!$.modal.isActive()) $(document).off('keydown.modal');
    },

    block: function block() {
      this.$elm.trigger($.modal.BEFORE_BLOCK, [this._ctx()]);
      this.$body.css('overflow', 'hidden');
      this.$blocker = $('<div class="' + this.options.blockerClass + ' blocker current"></div>').appendTo(this.$body);
      selectCurrent();
      if (this.options.doFade) {
        this.$blocker.css('opacity', 0).animate({ opacity: 1 }, this.options.fadeDuration);
      }
      this.$elm.trigger($.modal.BLOCK, [this._ctx()]);
    },

    unblock: function unblock(now) {
      if (!now && this.options.doFade) this.$blocker.fadeOut(this.options.fadeDuration, this.unblock.bind(this, true));else {
        this.$blocker.children().appendTo(this.$body);
        this.$blocker.remove();
        this.$blocker = null;
        selectCurrent();
        if (!$.modal.isActive()) this.$body.css('overflow', '');
      }
    },

    show: function show() {
      this.$elm.trigger($.modal.BEFORE_OPEN, [this._ctx()]);
      if (this.options.showClose) {
        this.closeButton = $('<a href="#close-modal" rel="modal:close" class="close-modal ' + this.options.closeClass + '">' + this.options.closeText + '</a>');
        this.$elm.append(this.closeButton);
      }
      this.$elm.addClass(this.options.modalClass).appendTo(this.$blocker);
      if (this.options.doFade) {
        this.$elm.css('opacity', 0).show().animate({ opacity: 1 }, this.options.fadeDuration);
      } else {
        this.$elm.show();
      }
      this.$elm.trigger($.modal.OPEN, [this._ctx()]);
    },

    hide: function hide() {
      this.$elm.trigger($.modal.BEFORE_CLOSE, [this._ctx()]);
      if (this.closeButton) this.closeButton.remove();
      var _this = this;
      if (this.options.doFade) {
        this.$elm.fadeOut(this.options.fadeDuration, function () {
          _this.$elm.trigger($.modal.AFTER_CLOSE, [_this._ctx()]);
        });
      } else {
        this.$elm.hide(0, function () {
          _this.$elm.trigger($.modal.AFTER_CLOSE, [_this._ctx()]);
        });
      }
      this.$elm.trigger($.modal.CLOSE, [this._ctx()]);
    },

    showSpinner: function showSpinner() {
      if (!this.options.showSpinner) return;
      this.spinner = this.spinner || $('<div class="' + this.options.modalClass + '-spinner"></div>').append(this.options.spinnerHtml);
      this.$body.append(this.spinner);
      this.spinner.show();
    },

    hideSpinner: function hideSpinner() {
      if (this.spinner) this.spinner.remove();
    },

    //Return context for custom events
    _ctx: function _ctx() {
      return { elm: this.$elm, $elm: this.$elm, $blocker: this.$blocker, options: this.options };
    }
  };

  $.modal.close = function (event) {
    if (!$.modal.isActive()) return;
    if (event) event.preventDefault();
    var current = getCurrent();
    current.close();
    return current.$elm;
  };

  // Returns if there currently is an active modal
  $.modal.isActive = function () {
    return modals.length > 0;
  };

  $.modal.getCurrent = getCurrent;

  $.modal.defaults = {
    closeExisting: true,
    escapeClose: true,
    clickClose: true,
    closeText: 'Close',
    closeClass: '',
    modalClass: "modal",
    blockerClass: "jquery-modal",
    spinnerHtml: null,
    showSpinner: true,
    showClose: true,
    fadeDuration: null, // Number of milliseconds the fade animation takes.
    fadeDelay: 1.0 // Point during the overlay's fade-in that the modal begins to fade in (.5 = 50%, 1.5 = 150%, etc.)
  };

  // Event constants
  $.modal.BEFORE_BLOCK = 'modal:before-block';
  $.modal.BLOCK = 'modal:block';
  $.modal.BEFORE_OPEN = 'modal:before-open';
  $.modal.OPEN = 'modal:open';
  $.modal.BEFORE_CLOSE = 'modal:before-close';
  $.modal.CLOSE = 'modal:close';
  $.modal.AFTER_CLOSE = 'modal:after-close';
  $.modal.AJAX_SEND = 'modal:ajax:send';
  $.modal.AJAX_SUCCESS = 'modal:ajax:success';
  $.modal.AJAX_FAIL = 'modal:ajax:fail';
  $.modal.AJAX_COMPLETE = 'modal:ajax:complete';

  $.fn.modal = function (options) {
    if (this.length === 1) {
      new $.modal(this, options);
    }
    return this;
  };

  // Automatically bind links with rel="modal:close" to, well, close the modal.
  $(document).on('click.modal', 'a[rel~="modal:close"]', $.modal.close);
  $(document).on('click.modal', 'a[rel~="modal:open"]', function (event) {
    event.preventDefault();
    $(this).modal();
  });
});

},{"jquery":"jquery"}],9:[function(require,module,exports){
'use strict';

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _jquery2.default)(document).ready(function () {
    var api_url = 'https://no-small-plan.herokuapp.com/api';

    if ((0, _jquery2.default)('.button--add_your_map').length) {
        /* map page start */

        var myMaps = [];
        var customerId;
        var selectedMap = {
            id: -1,
            map_name: "",
            map_setting: ""
        };

        if (typeof meta.page.customerId == 'undefined') {
            customerId = 1;
        } else {
            customerId = meta.page.customerId;
            console.log(customerId);
            _jquery2.default.getJSON(api_url + "/map/load/" + customerId, function (response) {
                if (!response.error) {
                    (0, _jquery2.default)('.maps__buttons_load').removeClass('button--disabled').addClass('button--green');
                    myMaps = response.data;
                } else {}

                console.log(response);
            });
        }

        (0, _jquery2.default)('.button--add_your_map').click(function () {

            if ((0, _jquery2.default)(this).hasClass('button--green')) {

                // remove all slides
                var cnts = (0, _jquery2.default)('.maps--sliders .item').length;
                for (var i = cnts - 1; i > 0; i--) {
                    if (typeof (0, _jquery2.default)('.maps--sliders .item')[i] != 'undefined') {
                        (0, _jquery2.default)('.maps--sliders .item')[i].remove();
                    }
                }

                var item_ct = '';
                var setting = '';
                myMaps.forEach(function (item) {
                    setting = JSON.parse(item.map_setting).toString();
                    item_ct = '<div class="item" data-id="' + item.id + '" data-setting="' + setting + '" data-name="' + item.map_name + '">' + '   <img src="' + window.map_icon_url + '" />' + '<div class="title">' + item.map_name + '</div>';

                    (0, _jquery2.default)('.maps--sliders').slick('slickAdd', item_ct);
                });

                (0, _jquery2.default)('#load--maps-blocker').show();
                (0, _jquery2.default)('#load--maps').animate({ bottom: "0px" }, 500);
            }
        });

        (0, _jquery2.default)('.maps--sliders').slick({
            infinite: false,
            slidesToShow: 5,
            slidesToScroll: 5,
            responsive: [{
                breakpoint: 1199,
                settings: {
                    slidesToShow: 4,
                    slidesToScroll: 4
                }
            }, {
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    slidesToScroll: 3
                }
            }, {
                breakpoint: 768,
                settings: {
                    slidesToShow: 2,
                    slidesToScroll: 2
                }
            }, {
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    slidesToScroll: 1
                }
                // You can unslick at a given breakpoint now by adding:
                // settings: "unslick"
                // instead of a settings object
            }]
        });

        (0, _jquery2.default)('.load--maps_close').click(function (e) {
            (0, _jquery2.default)('#load--maps-blocker').hide();
            (0, _jquery2.default)('#load--maps').animate({ bottom: "-1500px" }, 500);
        });

        (0, _jquery2.default)('.maps--sliders').on('click', '.item', function (e) {
            var map_id = (0, _jquery2.default)(this).data('id');
            var map_name = (0, _jquery2.default)(this).data('name');
            var map_setting = (0, _jquery2.default)(this).data('setting') ? (0, _jquery2.default)(this).data('setting').split(",") : [];

            var country_names = '';

            if (map_id == -1) {
                window.location.href = '/maps';
            } else {
                map_setting.forEach(function (item) {
                    for (var i = 0; i < window.map_countries.length - 1; i++) {
                        if (item == window.map_countries[i].code) {
                            country_names += window.map_countries[i].name + ', ';
                        }
                    }
                });
            }

            (0, _jquery2.default)('.load--maps_close').trigger('click');

            if (country_names) {
                console.log(country_names);
                country_names = country_names.substring(0, country_names.length - 2);

                (0, _jquery2.default)('#map_name_lineitem').val(map_name);
                (0, _jquery2.default)('#map_countries_lineitem').val(country_names);

                (0, _jquery2.default)('.accordeon__tab--map p').text(country_names);

                if ((0, _jquery2.default)('.accordeon__tab.accordeon__tab--map').css('display') == 'none') {
                    (0, _jquery2.default)('.accordeon__tab--map').show();
                    // expand detail tab as default
                    (0, _jquery2.default)('.accordeon__tab.accordeon__tab--map label').trigger('click');
                }

                // $('.button--add_your_map').removeClass('button--green').addClass('button--disabled');
                (0, _jquery2.default)('#add-to-cart').removeClass('button--disabled').addClass('button--green');
            }
        });
    }
});

},{"jquery":"jquery"}],10:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (i) {
  "use strict";
  "function" == typeof define && define.amd ? define(["jquery"], i) : "undefined" != typeof exports ? module.exports = i(require("jquery")) : i(jQuery);
}(function (i) {
  "use strict";
  var e = window.Slick || {};(e = function () {
    var e = 0;return function (t, o) {
      var s,
          n = this;n.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: i(t), appendDots: i(t), arrows: !0, asNavFor: null, prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>', nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function customPaging(e, t) {
          return i('<button type="button" />').text(t + 1);
        }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, focusOnChange: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, n.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, scrolling: !1, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, swiping: !1, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(t), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(t).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, void 0 !== document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : void 0 !== document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = e++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0);
    };
  }()).prototype.activateADA = function () {
    this.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });
  }, e.prototype.addSlide = e.prototype.slickAdd = function (e, t, o) {
    var s = this;if ("boolean" == typeof t) o = t, t = null;else if (t < 0 || t >= s.slideCount) return !1;s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : !0 === o ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function (e, t) {
      i(t).attr("data-slick-index", e);
    }), s.$slidesCache = s.$slides, s.reinit();
  }, e.prototype.animateHeight = function () {
    var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
      var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.animate({ height: e }, i.options.speed);
    }
  }, e.prototype.animateSlide = function (e, t) {
    var o = {},
        s = this;s.animateHeight(), !0 === s.options.rtl && !1 === s.options.vertical && (e = -e), !1 === s.transformsEnabled ? !1 === s.options.vertical ? s.$slideTrack.animate({ left: e }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({ top: e }, s.options.speed, s.options.easing, t) : !1 === s.cssTransitions ? (!0 === s.options.rtl && (s.currentLeft = -s.currentLeft), i({ animStart: s.currentLeft }).animate({ animStart: e }, { duration: s.options.speed, easing: s.options.easing, step: function step(i) {
        i = Math.ceil(i), !1 === s.options.vertical ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o));
      }, complete: function complete() {
        t && t.call();
      } })) : (s.applyTransition(), e = Math.ceil(e), !1 === s.options.vertical ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function () {
      s.disableTransition(), t.call();
    }, s.options.speed));
  }, e.prototype.getNavTarget = function () {
    var e = this,
        t = e.options.asNavFor;return t && null !== t && (t = i(t).not(e.$slider)), t;
  }, e.prototype.asNavFor = function (e) {
    var t = this.getNavTarget();null !== t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t.each(function () {
      var t = i(this).slick("getSlick");t.unslicked || t.slideHandler(e, !0);
    });
  }, e.prototype.applyTransition = function (i) {
    var e = this,
        t = {};!1 === e.options.fade ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
  }, e.prototype.autoPlay = function () {
    var i = this;i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed));
  }, e.prototype.autoPlayClear = function () {
    var i = this;i.autoPlayTimer && clearInterval(i.autoPlayTimer);
  }, e.prototype.autoPlayIterator = function () {
    var i = this,
        e = i.currentSlide + i.options.slidesToScroll;i.paused || i.interrupted || i.focussed || (!1 === i.options.infinite && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 == 0 && (i.direction = 1))), i.slideHandler(e));
  }, e.prototype.buildArrows = function () {
    var e = this;!0 === e.options.arrows && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), !0 !== e.options.infinite && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));
  }, e.prototype.buildDots = function () {
    var e,
        t,
        o = this;if (!0 === o.options.dots) {
      for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1) {
        t.append(i("<li />").append(o.options.customPaging.call(this, o, e)));
      }o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active");
    }
  }, e.prototype.buildOut = function () {
    var e = this;e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) {
      i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "");
    }), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), !0 !== e.options.centerMode && !0 !== e.options.swipeToSlide || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), !0 === e.options.draggable && e.$list.addClass("draggable");
  }, e.prototype.buildRows = function () {
    var i,
        e,
        t,
        o,
        s,
        n,
        r,
        l = this;if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 1) {
      for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) {
        var d = document.createElement("div");for (e = 0; e < l.options.rows; e++) {
          var a = document.createElement("div");for (t = 0; t < l.options.slidesPerRow; t++) {
            var c = i * r + (e * l.options.slidesPerRow + t);n.get(c) && a.appendChild(n.get(c));
          }d.appendChild(a);
        }o.appendChild(d);
      }l.$slider.empty().append(o), l.$slider.children().children().children().css({ width: 100 / l.options.slidesPerRow + "%", display: "inline-block" });
    }
  }, e.prototype.checkResponsive = function (e, t) {
    var o,
        s,
        n,
        r = this,
        l = !1,
        d = r.$slider.width(),
        a = window.innerWidth || i(window).width();if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) {
      s = null;for (o in r.breakpoints) {
        r.breakpoints.hasOwnProperty(o) && (!1 === r.originalSettings.mobileFirst ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o]));
      }null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, !0 === e && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || !1 === l || r.$slider.trigger("breakpoint", [r, l]);
    }
  }, e.prototype.changeSlide = function (e, t) {
    var o,
        s,
        n,
        r = this,
        l = i(e.currentTarget);switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll != 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) {case "previous":
        s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t);break;case "next":
        s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t);break;case "index":
        var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll;r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus");break;default:
        return;}
  }, e.prototype.checkNavigable = function (i) {
    var e, t;if (e = this.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1];else for (var o in e) {
      if (i < e[o]) {
        i = t;break;
      }t = e[o];
    }return i;
  }, e.prototype.cleanUpEvents = function () {
    var e = this;e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), !0 === e.options.accessibility && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), !0 === e.options.arrows && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), !0 === e.options.accessibility && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), !0 === e.options.accessibility && e.$list.off("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition);
  }, e.prototype.cleanUpSlideEvents = function () {
    var e = this;e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1));
  }, e.prototype.cleanUpRows = function () {
    var i,
        e = this;e.options.rows > 1 && ((i = e.$slides.children().children()).removeAttr("style"), e.$slider.empty().append(i));
  }, e.prototype.clickHandler = function (i) {
    !1 === this.shouldClick && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault());
  }, e.prototype.destroy = function (e) {
    var t = this;t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
      i(this).attr("style", i(this).data("originalStyling"));
    }), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t]);
  }, e.prototype.disableTransition = function (i) {
    var e = this,
        t = {};t[e.transitionType] = "", !1 === e.options.fade ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t);
  }, e.prototype.fadeSlide = function (i, e) {
    var t = this;!1 === t.cssTransitions ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }), t.$slides.eq(i).animate({ opacity: 1 }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }), e && setTimeout(function () {
      t.disableTransition(i), e.call();
    }, t.options.speed));
  }, e.prototype.fadeSlideOut = function (i) {
    var e = this;!1 === e.cssTransitions ? e.$slides.eq(i).animate({ opacity: 0, zIndex: e.options.zIndex - 2 }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 }));
  }, e.prototype.filterSlides = e.prototype.slickFilter = function (i) {
    var e = this;null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit());
  }, e.prototype.focusHandler = function () {
    var e = this;e.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*", function (t) {
      t.stopImmediatePropagation();var o = i(this);setTimeout(function () {
        e.options.pauseOnFocus && (e.focussed = o.is(":focus"), e.autoPlay());
      }, 0);
    });
  }, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function () {
    return this.currentSlide;
  }, e.prototype.getDotCount = function () {
    var i = this,
        e = 0,
        t = 0,
        o = 0;if (!0 === i.options.infinite) {
      if (i.slideCount <= i.options.slidesToShow) ++o;else for (; e < i.slideCount;) {
        ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
      }
    } else if (!0 === i.options.centerMode) o = i.slideCount;else if (i.options.asNavFor) for (; e < i.slideCount;) {
      ++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow;
    } else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll);return o - 1;
  }, e.prototype.getLeft = function (i) {
    var e,
        t,
        o,
        s,
        n = this,
        r = 0;return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), !0 === n.options.infinite ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, !0 === n.options.vertical && !0 === n.options.centerMode && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll != 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), !0 === n.options.centerMode && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : !0 === n.options.centerMode && !0 === n.options.infinite ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : !0 === n.options.centerMode && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = !1 === n.options.vertical ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, !0 === n.options.variableWidth && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, !0 === n.options.centerMode && (o = n.slideCount <= n.options.slidesToShow || !1 === n.options.infinite ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = !0 === n.options.rtl ? o[0] ? -1 * (n.$slideTrack.width() - o[0].offsetLeft - o.width()) : 0 : o[0] ? -1 * o[0].offsetLeft : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e;
  }, e.prototype.getOption = e.prototype.slickGetOption = function (i) {
    return this.options[i];
  }, e.prototype.getNavigableIndexes = function () {
    var i,
        e = this,
        t = 0,
        o = 0,
        s = [];for (!1 === e.options.infinite ? i = e.slideCount : (t = -1 * e.options.slidesToScroll, o = -1 * e.options.slidesToScroll, i = 2 * e.slideCount); t < i;) {
      s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow;
    }return s;
  }, e.prototype.getSlick = function () {
    return this;
  }, e.prototype.getSlideCount = function () {
    var e,
        t,
        o = this;return t = !0 === o.options.centerMode ? o.slideWidth * Math.floor(o.options.slidesToShow / 2) : 0, !0 === o.options.swipeToSlide ? (o.$slideTrack.find(".slick-slide").each(function (s, n) {
      if (n.offsetLeft - t + i(n).outerWidth() / 2 > -1 * o.swipeLeft) return e = n, !1;
    }), Math.abs(i(e).attr("data-slick-index") - o.currentSlide) || 1) : o.options.slidesToScroll;
  }, e.prototype.goTo = e.prototype.slickGoTo = function (i, e) {
    this.changeSlide({ data: { message: "index", index: parseInt(i) } }, e);
  }, e.prototype.init = function (e) {
    var t = this;i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), !0 === t.options.accessibility && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay());
  }, e.prototype.initADA = function () {
    var e = this,
        t = Math.ceil(e.slideCount / e.options.slidesToShow),
        o = e.getNavigableIndexes().filter(function (i) {
      return i >= 0 && i < e.slideCount;
    });e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) {
      var s = o.indexOf(t);i(this).attr({ role: "tabpanel", id: "slick-slide" + e.instanceUid + t, tabindex: -1 }), -1 !== s && i(this).attr({ "aria-describedby": "slick-slide-control" + e.instanceUid + s });
    }), e.$dots.attr("role", "tablist").find("li").each(function (s) {
      var n = o[s];i(this).attr({ role: "presentation" }), i(this).find("button").first().attr({ role: "tab", id: "slick-slide-control" + e.instanceUid + s, "aria-controls": "slick-slide" + e.instanceUid + n, "aria-label": s + 1 + " of " + t, "aria-selected": null, tabindex: "-1" });
    }).eq(e.currentSlide).find("button").attr({ "aria-selected": "true", tabindex: "0" }).end());for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++) {
      e.$slides.eq(s).attr("tabindex", 0);
    }e.activateADA();
  }, e.prototype.initArrowEvents = function () {
    var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, i.changeSlide), !0 === i.options.accessibility && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler)));
  }, e.prototype.initDotEvents = function () {
    var e = this;!0 === e.options.dots && (i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide), !0 === e.options.accessibility && e.$dots.on("keydown.slick", e.keyHandler)), !0 === e.options.dots && !0 === e.options.pauseOnDotsHover && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1));
  }, e.prototype.initSlideEvents = function () {
    var e = this;e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1)));
  }, e.prototype.initializeEvents = function () {
    var e = this;e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", { action: "start" }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", { action: "move" }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", { action: "end" }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), !0 === e.options.accessibility && e.$list.on("keydown.slick", e.keyHandler), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition);
  }, e.prototype.initUI = function () {
    var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.show();
  }, e.prototype.keyHandler = function (i) {
    var e = this;i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && !0 === e.options.accessibility ? e.changeSlide({ data: { message: !0 === e.options.rtl ? "next" : "previous" } }) : 39 === i.keyCode && !0 === e.options.accessibility && e.changeSlide({ data: { message: !0 === e.options.rtl ? "previous" : "next" } }));
  }, e.prototype.lazyLoad = function () {
    function e(e) {
      i("img[data-lazy]", e).each(function () {
        var e = i(this),
            t = i(this).attr("data-lazy"),
            o = i(this).attr("data-srcset"),
            s = i(this).attr("data-sizes") || n.$slider.attr("data-sizes"),
            r = document.createElement("img");r.onload = function () {
          e.animate({ opacity: 0 }, 100, function () {
            o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({ opacity: 1 }, 200, function () {
              e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading");
            }), n.$slider.trigger("lazyLoaded", [n, e, t]);
          });
        }, r.onerror = function () {
          e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), n.$slider.trigger("lazyLoadError", [n, e, t]);
        }, r.src = t;
      });
    }var t,
        o,
        s,
        n = this;if (!0 === n.options.centerMode ? !0 === n.options.infinite ? s = (o = n.currentSlide + (n.options.slidesToShow / 2 + 1)) + n.options.slidesToShow + 2 : (o = Math.max(0, n.currentSlide - (n.options.slidesToShow / 2 + 1)), s = n.options.slidesToShow / 2 + 1 + 2 + n.currentSlide) : (o = n.options.infinite ? n.options.slidesToShow + n.currentSlide : n.currentSlide, s = Math.ceil(o + n.options.slidesToShow), !0 === n.options.fade && (o > 0 && o--, s <= n.slideCount && s++)), t = n.$slider.find(".slick-slide").slice(o, s), "anticipated" === n.options.lazyLoad) for (var r = o - 1, l = s, d = n.$slider.find(".slick-slide"), a = 0; a < n.options.slidesToScroll; a++) {
      r < 0 && (r = n.slideCount - 1), t = (t = t.add(d.eq(r))).add(d.eq(l)), r--, l++;
    }e(t), n.slideCount <= n.options.slidesToShow ? e(n.$slider.find(".slick-slide")) : n.currentSlide >= n.slideCount - n.options.slidesToShow ? e(n.$slider.find(".slick-cloned").slice(0, n.options.slidesToShow)) : 0 === n.currentSlide && e(n.$slider.find(".slick-cloned").slice(-1 * n.options.slidesToShow));
  }, e.prototype.loadSlider = function () {
    var i = this;i.setPosition(), i.$slideTrack.css({ opacity: 1 }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad();
  }, e.prototype.next = e.prototype.slickNext = function () {
    this.changeSlide({ data: { message: "next" } });
  }, e.prototype.orientationChange = function () {
    var i = this;i.checkResponsive(), i.setPosition();
  }, e.prototype.pause = e.prototype.slickPause = function () {
    var i = this;i.autoPlayClear(), i.paused = !0;
  }, e.prototype.play = e.prototype.slickPlay = function () {
    var i = this;i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1;
  }, e.prototype.postSlide = function (e) {
    var t = this;t.unslicked || (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), !0 === t.options.accessibility && (t.initADA(), t.options.focusOnChange && i(t.$slides.get(t.currentSlide)).attr("tabindex", 0).focus()));
  }, e.prototype.prev = e.prototype.slickPrev = function () {
    this.changeSlide({ data: { message: "previous" } });
  }, e.prototype.preventDefault = function (i) {
    i.preventDefault();
  }, e.prototype.progressiveLazyLoad = function (e) {
    e = e || 1;var t,
        o,
        s,
        n,
        r,
        l = this,
        d = i("img[data-lazy]", l.$slider);d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), (r = document.createElement("img")).onload = function () {
      s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), !0 === l.options.adaptiveHeight && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad();
    }, r.onerror = function () {
      e < 3 ? setTimeout(function () {
        l.progressiveLazyLoad(e + 1);
      }, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad());
    }, r.src = o) : l.$slider.trigger("allImagesLoaded", [l]);
  }, e.prototype.refresh = function (e) {
    var t,
        o,
        s = this;o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, { currentSlide: t }), s.init(), e || s.changeSlide({ data: { message: "index", index: t } }, !1);
  }, e.prototype.registerBreakpoints = function () {
    var e,
        t,
        o,
        s = this,
        n = s.options.responsive || null;if ("array" === i.type(n) && n.length) {
      s.respondTo = s.options.respondTo || "window";for (e in n) {
        if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) {
          for (t = n[e].breakpoint; o >= 0;) {
            s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--;
          }s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings;
        }
      }s.breakpoints.sort(function (i, e) {
        return s.options.mobileFirst ? i - e : e - i;
      });
    }
  }, e.prototype.reinit = function () {
    var e = this;e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), !0 === e.options.focusOnSelect && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e]);
  }, e.prototype.resize = function () {
    var e = this;i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () {
      e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition();
    }, 50));
  }, e.prototype.removeSlide = e.prototype.slickRemove = function (i, e, t) {
    var o = this;if (i = "boolean" == typeof i ? !0 === (e = i) ? 0 : o.slideCount - 1 : !0 === e ? --i : i, o.slideCount < 1 || i < 0 || i > o.slideCount - 1) return !1;o.unload(), !0 === t ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, o.reinit();
  }, e.prototype.setCSS = function (i) {
    var e,
        t,
        o = this,
        s = {};!0 === o.options.rtl && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, !1 === o.transformsEnabled ? o.$slideTrack.css(s) : (s = {}, !1 === o.cssTransitions ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s)));
  }, e.prototype.setDimensions = function () {
    var i = this;!1 === i.options.vertical ? !0 === i.options.centerMode && i.$list.css({ padding: "0px " + i.options.centerPadding }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), !0 === i.options.centerMode && i.$list.css({ padding: i.options.centerPadding + " 0px" })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), !1 === i.options.vertical && !1 === i.options.variableWidth ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : !0 === i.options.variableWidth ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length)));var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width();!1 === i.options.variableWidth && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e);
  }, e.prototype.setFade = function () {
    var e,
        t = this;t.$slides.each(function (o, s) {
      e = t.slideWidth * o * -1, !0 === t.options.rtl ? i(s).css({ position: "relative", right: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) : i(s).css({ position: "relative", left: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 });
    }), t.$slides.eq(t.currentSlide).css({ zIndex: t.options.zIndex - 1, opacity: 1 });
  }, e.prototype.setHeight = function () {
    var i = this;if (1 === i.options.slidesToShow && !0 === i.options.adaptiveHeight && !1 === i.options.vertical) {
      var e = i.$slides.eq(i.currentSlide).outerHeight(!0);i.$list.css("height", e);
    }
  }, e.prototype.setOption = e.prototype.slickSetOption = function () {
    var e,
        t,
        o,
        s,
        n,
        r = this,
        l = !1;if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : void 0 !== arguments[1] && (n = "single")), "single" === n) r.options[o] = s;else if ("multiple" === n) i.each(o, function (i, e) {
      r.options[i] = e;
    });else if ("responsive" === n) for (t in s) {
      if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]];else {
        for (e = r.options.responsive.length - 1; e >= 0;) {
          r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--;
        }r.options.responsive.push(s[t]);
      }
    }l && (r.unload(), r.reinit());
  }, e.prototype.setPosition = function () {
    var i = this;i.setDimensions(), i.setHeight(), !1 === i.options.fade ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i]);
  }, e.prototype.setProps = function () {
    var i = this,
        e = document.body.style;i.positionProp = !0 === i.options.vertical ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || !0 === i.options.useCSS && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && !1 !== i.animType && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && !1 !== i.animType;
  }, e.prototype.setSlideClasses = function (i) {
    var e,
        t,
        o,
        s,
        n = this;if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), !0 === n.options.centerMode) {
      var r = n.options.slidesToShow % 2 == 0 ? 1 : 0;e = Math.floor(n.options.slidesToShow / 2), !0 === n.options.infinite && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center");
    } else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = !0 === n.options.infinite ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false"));"ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad();
  }, e.prototype.setupInfinite = function () {
    var e,
        t,
        o,
        s = this;if (!0 === s.options.fade && (s.options.centerMode = !1), !0 === s.options.infinite && !1 === s.options.fade && (t = null, s.slideCount > s.options.slidesToShow)) {
      for (o = !0 === s.options.centerMode ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1) {
        t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");
      }for (e = 0; e < o + s.slideCount; e += 1) {
        t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");
      }s.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
        i(this).attr("id", "");
      });
    }
  }, e.prototype.interrupt = function (i) {
    var e = this;i || e.autoPlay(), e.interrupted = i;
  }, e.prototype.selectHandler = function (e) {
    var t = this,
        o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"),
        s = parseInt(o.attr("data-slick-index"));s || (s = 0), t.slideCount <= t.options.slidesToShow ? t.slideHandler(s, !1, !0) : t.slideHandler(s);
  }, e.prototype.slideHandler = function (i, e, t) {
    var o,
        s,
        n,
        r,
        l,
        d = null,
        a = this;if (e = e || !1, !(!0 === a.animating && !0 === a.options.waitForAnimate || !0 === a.options.fade && a.currentSlide === i)) if (!1 === e && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, !1 === a.options.infinite && !1 === a.options.centerMode && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {
      a.postSlide(o);
    }) : a.postSlide(o));else if (!1 === a.options.infinite && !0 === a.options.centerMode && (i < 0 || i > a.slideCount - a.options.slidesToScroll)) !1 === a.options.fade && (o = a.currentSlide, !0 !== t ? a.animateSlide(r, function () {
      a.postSlide(o);
    }) : a.postSlide(o));else {
      if (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll != 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll != 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = (l = a.getNavTarget()).slick("getSlick")).slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide), a.updateDots(), a.updateArrows(), !0 === a.options.fade) return !0 !== t ? (a.fadeSlideOut(n), a.fadeSlide(s, function () {
        a.postSlide(s);
      })) : a.postSlide(s), void a.animateHeight();!0 !== t ? a.animateSlide(d, function () {
        a.postSlide(s);
      }) : a.postSlide(s);
    }
  }, e.prototype.startLoad = function () {
    var i = this;!0 === i.options.arrows && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), !0 === i.options.dots && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading");
  }, e.prototype.swipeDirection = function () {
    var i,
        e,
        t,
        o,
        s = this;return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), (o = Math.round(180 * t / Math.PI)) < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? !1 === s.options.rtl ? "left" : "right" : o <= 360 && o >= 315 ? !1 === s.options.rtl ? "left" : "right" : o >= 135 && o <= 225 ? !1 === s.options.rtl ? "right" : "left" : !0 === s.options.verticalSwiping ? o >= 35 && o <= 135 ? "down" : "up" : "vertical";
  }, e.prototype.swipeEnd = function (i) {
    var e,
        t,
        o = this;if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1;if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1;if (!0 === o.touchObject.edgeHit && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) {
      switch (t = o.swipeDirection()) {case "left":case "down":
          e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0;break;case "right":case "up":
          e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1;}"vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t]));
    } else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {});
  }, e.prototype.swipeHandler = function (i) {
    var e = this;if (!(!1 === e.options.swipe || "ontouchend" in document && !1 === e.options.swipe || !1 === e.options.draggable && -1 !== i.type.indexOf("mouse"))) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, !0 === e.options.verticalSwiping && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) {case "start":
        e.swipeStart(i);break;case "move":
        e.swipeMove(i);break;case "end":
        e.swipeEnd(i);}
  }, e.prototype.swipeMove = function (i) {
    var e,
        t,
        o,
        s,
        n,
        r,
        l = this;return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (!0 === l.options.verticalSwiping && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (!1 === l.options.rtl ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), !0 === l.options.verticalSwiping && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, !1 === l.options.infinite && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), !1 === l.options.vertical ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, !0 === l.options.verticalSwiping && (l.swipeLeft = e + o * s), !0 !== l.options.fade && !1 !== l.options.touchMove && (!0 === l.animating ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft))));
  }, e.prototype.swipeStart = function (i) {
    var e,
        t = this;if (t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow) return t.touchObject = {}, !1;void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, t.dragging = !0;
  }, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function () {
    var i = this;null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit());
  }, e.prototype.unload = function () {
    var e = this;i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
  }, e.prototype.unslick = function (i) {
    var e = this;e.$slider.trigger("unslick", [e, i]), e.destroy();
  }, e.prototype.updateArrows = function () {
    var i = this;Math.floor(i.options.slidesToShow / 2), !0 === i.options.arrows && i.slideCount > i.options.slidesToShow && !i.options.infinite && (i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === i.currentSlide ? (i.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - i.options.slidesToShow && !1 === i.options.centerMode ? (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : i.currentSlide >= i.slideCount - 1 && !0 === i.options.centerMode && (i.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), i.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
  }, e.prototype.updateDots = function () {
    var i = this;null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active"));
  }, e.prototype.visibility = function () {
    var i = this;i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1);
  }, i.fn.slick = function () {
    var i,
        t,
        o = this,
        s = arguments[0],
        n = Array.prototype.slice.call(arguments, 1),
        r = o.length;for (i = 0; i < r; i++) {
      if ("object" == (typeof s === "undefined" ? "undefined" : _typeof(s)) || void 0 === s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), void 0 !== t) return t;
    }return o;
  };
});

},{"jquery":"jquery"}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvd2ViZm9udGxvYWRlci93ZWJmb250bG9hZGVyLmpzIiwic3JjL3NjcmlwdHMvYXBwLmpzIiwic3JjL3NjcmlwdHMvZ2VuZXJhbC9hY2NvdW50LmpzIiwic3JjL3NjcmlwdHMvZ2VuZXJhbC9mb250cy5qcyIsInNyYy9zY3JpcHRzL2dlbmVyYWwvaW5kZXguanMiLCJzcmMvc2NyaXB0cy9nZW5lcmFsL2pxdWVyeS5qcyIsInNyYy9zY3JpcHRzL2dlbmVyYWwvbWFwLmpzIiwic3JjL3NjcmlwdHMvZ2VuZXJhbC9tb2RhbC5qcyIsInNyYy9zY3JpcHRzL2dlbmVyYWwvcHJvZHVjdF9tYXAuanMiLCJzcmMvc2NyaXB0cy9nZW5lcmFsL3NsaWNrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaEJBOztBQUVBLElBQU0sU0FBUyxDQUFFLE1BQUYsRUFBVSxLQUFWLEVBQWlCLE1BQWpCLENBQWYsQyxDQUhBOztBQUlBLElBQU0sV0FBVyxDQUFDLE1BQUQsRUFBUyxRQUFULENBQWpCOztBQUVBO0FBQ0EsSUFBTSx5QkFBb0IsTUFBcEIsR0FBNEIsUUFBNUIsRUFBTjtBQUNBLGFBQWEsR0FBYixDQUFpQjtBQUFBLFNBQUssUUFBUSxHQUFSLENBQVksQ0FBWixDQUFMO0FBQUEsQ0FBakI7Ozs7O0FDUkE7Ozs7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdEQSxzQkFBRSxpQkFBRixFQUFxQixNQUFyQixDQUE0QixVQUFTLENBQVQsRUFBVztBQUNuQyxNQUFFLGNBQUY7O0FBRUEsUUFBSSxhQUFhLHNCQUFFLGFBQUYsRUFB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LEdBQVo7QUFBZ0IsVUFBRyxvQkFBaUIsQ0FBakIseUNBQWlCLENBQWpCLE1BQW9CLEtBQUssQ0FBTCxLQUFTLENBQTdCLEdBQStCLEVBQUUsQ0FBRixFQUFLLEtBQUwsR0FBVyxJQUFJLENBQUosQ0FBTSxFQUFFLENBQUYsQ0FBTixFQUFXLENBQVgsQ0FBMUMsR0FBd0QsSUFBRSxFQUFFLENBQUYsRUFBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLEtBQWQsQ0FBb0IsRUFBRSxDQUFGLEVBQUssS0FBekIsRUFBK0IsQ0FBL0IsQ0FBMUQsRUFBNEYsS0FBSyxDQUFMLEtBQVMsQ0FBeEcsRUFBMEcsT0FBTyxDQUFQO0FBQTFILEtBQW1JLE9BQU8sQ0FBUDtBQUFTLEdBQTNwekM7QUFBNHB6QyxDQUEzMnpDLENBQUQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBXZWIgRm9udCBMb2FkZXIgdjEuNi4yOCAtIChjKSBBZG9iZSBTeXN0ZW1zLCBHb29nbGUuIExpY2Vuc2U6IEFwYWNoZSAyLjAgKi8oZnVuY3Rpb24oKXtmdW5jdGlvbiBhYShhLGIsYyl7cmV0dXJuIGEuY2FsbC5hcHBseShhLmJpbmQsYXJndW1lbnRzKX1mdW5jdGlvbiBiYShhLGIsYyl7aWYoIWEpdGhyb3cgRXJyb3IoKTtpZigyPGFyZ3VtZW50cy5sZW5ndGgpe3ZhciBkPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO0FycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGMsZCk7cmV0dXJuIGEuYXBwbHkoYixjKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYixhcmd1bWVudHMpfX1mdW5jdGlvbiBwKGEsYixjKXtwPUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kJiYtMSE9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKS5pbmRleE9mKFwibmF0aXZlIGNvZGVcIik/YWE6YmE7cmV0dXJuIHAuYXBwbHkobnVsbCxhcmd1bWVudHMpfXZhciBxPURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybituZXcgRGF0ZX07ZnVuY3Rpb24gY2EoYSxiKXt0aGlzLmE9YTt0aGlzLm89Ynx8YTt0aGlzLmM9dGhpcy5vLmRvY3VtZW50fXZhciBkYT0hIXdpbmRvdy5Gb250RmFjZTtmdW5jdGlvbiB0KGEsYixjLGQpe2I9YS5jLmNyZWF0ZUVsZW1lbnQoYik7aWYoYylmb3IodmFyIGUgaW4gYyljLmhhc093blByb3BlcnR5KGUpJiYoXCJzdHlsZVwiPT1lP2Iuc3R5bGUuY3NzVGV4dD1jW2VdOmIuc2V0QXR0cmlidXRlKGUsY1tlXSkpO2QmJmIuYXBwZW5kQ2hpbGQoYS5jLmNyZWF0ZVRleHROb2RlKGQpKTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjKXthPWEuYy5nZXRFbGVtZW50c0J5VGFnTmFtZShiKVswXTthfHwoYT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO2EuaW5zZXJ0QmVmb3JlKGMsYS5sYXN0Q2hpbGQpfWZ1bmN0aW9uIHYoYSl7YS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYSl9XG5mdW5jdGlvbiB3KGEsYixjKXtiPWJ8fFtdO2M9Y3x8W107Zm9yKHZhciBkPWEuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyksZT0wO2U8Yi5sZW5ndGg7ZSs9MSl7Zm9yKHZhciBmPSExLGc9MDtnPGQubGVuZ3RoO2crPTEpaWYoYltlXT09PWRbZ10pe2Y9ITA7YnJlYWt9Znx8ZC5wdXNoKGJbZV0pfWI9W107Zm9yKGU9MDtlPGQubGVuZ3RoO2UrPTEpe2Y9ITE7Zm9yKGc9MDtnPGMubGVuZ3RoO2crPTEpaWYoZFtlXT09PWNbZ10pe2Y9ITA7YnJlYWt9Znx8Yi5wdXNoKGRbZV0pfWEuY2xhc3NOYW1lPWIuam9pbihcIiBcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC8sXCJcIil9ZnVuY3Rpb24geShhLGIpe2Zvcih2YXIgYz1hLmNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pLGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspaWYoY1tkXT09YilyZXR1cm4hMDtyZXR1cm4hMX1cbmZ1bmN0aW9uIGVhKGEpe3JldHVybiBhLm8ubG9jYXRpb24uaG9zdG5hbWV8fGEuYS5sb2NhdGlvbi5ob3N0bmFtZX1mdW5jdGlvbiB6KGEsYixjKXtmdW5jdGlvbiBkKCl7bSYmZSYmZiYmKG0oZyksbT1udWxsKX1iPXQoYSxcImxpbmtcIix7cmVsOlwic3R5bGVzaGVldFwiLGhyZWY6YixtZWRpYTpcImFsbFwifSk7dmFyIGU9ITEsZj0hMCxnPW51bGwsbT1jfHxudWxsO2RhPyhiLm9ubG9hZD1mdW5jdGlvbigpe2U9ITA7ZCgpfSxiLm9uZXJyb3I9ZnVuY3Rpb24oKXtlPSEwO2c9RXJyb3IoXCJTdHlsZXNoZWV0IGZhaWxlZCB0byBsb2FkXCIpO2QoKX0pOnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlPSEwO2QoKX0sMCk7dShhLFwiaGVhZFwiLGIpfVxuZnVuY3Rpb24gQShhLGIsYyxkKXt2YXIgZT1hLmMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO2lmKGUpe3ZhciBmPXQoYSxcInNjcmlwdFwiLHtzcmM6Yn0pLGc9ITE7Zi5vbmxvYWQ9Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtnfHx0aGlzLnJlYWR5U3RhdGUmJlwibG9hZGVkXCIhPXRoaXMucmVhZHlTdGF0ZSYmXCJjb21wbGV0ZVwiIT10aGlzLnJlYWR5U3RhdGV8fChnPSEwLGMmJmMobnVsbCksZi5vbmxvYWQ9Zi5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxcIkhFQURcIj09Zi5wYXJlbnROb2RlLnRhZ05hbWUmJmUucmVtb3ZlQ2hpbGQoZikpfTtlLmFwcGVuZENoaWxkKGYpO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtnfHwoZz0hMCxjJiZjKEVycm9yKFwiU2NyaXB0IGxvYWQgdGltZW91dFwiKSkpfSxkfHw1RTMpO3JldHVybiBmfXJldHVybiBudWxsfTtmdW5jdGlvbiBCKCl7dGhpcy5hPTA7dGhpcy5jPW51bGx9ZnVuY3Rpb24gQyhhKXthLmErKztyZXR1cm4gZnVuY3Rpb24oKXthLmEtLTtEKGEpfX1mdW5jdGlvbiBFKGEsYil7YS5jPWI7RChhKX1mdW5jdGlvbiBEKGEpezA9PWEuYSYmYS5jJiYoYS5jKCksYS5jPW51bGwpfTtmdW5jdGlvbiBGKGEpe3RoaXMuYT1hfHxcIi1cIn1GLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliLnB1c2goYXJndW1lbnRzW2NdLnJlcGxhY2UoL1tcXFdfXSsvZyxcIlwiKS50b0xvd2VyQ2FzZSgpKTtyZXR1cm4gYi5qb2luKHRoaXMuYSl9O2Z1bmN0aW9uIEcoYSxiKXt0aGlzLmM9YTt0aGlzLmY9NDt0aGlzLmE9XCJuXCI7dmFyIGM9KGJ8fFwibjRcIikubWF0Y2goL14oW25pb10pKFsxLTldKSQvaSk7YyYmKHRoaXMuYT1jWzFdLHRoaXMuZj1wYXJzZUludChjWzJdLDEwKSl9ZnVuY3Rpb24gZmEoYSl7cmV0dXJuIEgoYSkrXCIgXCIrKGEuZitcIjAwXCIpK1wiIDMwMHB4IFwiK0koYS5jKX1mdW5jdGlvbiBJKGEpe3ZhciBiPVtdO2E9YS5zcGxpdCgvLFxccyovKTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXS5yZXBsYWNlKC9bJ1wiXS9nLFwiXCIpOy0xIT1kLmluZGV4T2YoXCIgXCIpfHwvXlxcZC8udGVzdChkKT9iLnB1c2goXCInXCIrZCtcIidcIik6Yi5wdXNoKGQpfXJldHVybiBiLmpvaW4oXCIsXCIpfWZ1bmN0aW9uIEooYSl7cmV0dXJuIGEuYSthLmZ9ZnVuY3Rpb24gSChhKXt2YXIgYj1cIm5vcm1hbFwiO1wib1wiPT09YS5hP2I9XCJvYmxpcXVlXCI6XCJpXCI9PT1hLmEmJihiPVwiaXRhbGljXCIpO3JldHVybiBifVxuZnVuY3Rpb24gZ2EoYSl7dmFyIGI9NCxjPVwiblwiLGQ9bnVsbDthJiYoKGQ9YS5tYXRjaCgvKG5vcm1hbHxvYmxpcXVlfGl0YWxpYykvaSkpJiZkWzFdJiYoYz1kWzFdLnN1YnN0cigwLDEpLnRvTG93ZXJDYXNlKCkpLChkPWEubWF0Y2goLyhbMS05XTAwfG5vcm1hbHxib2xkKS9pKSkmJmRbMV0mJigvYm9sZC9pLnRlc3QoZFsxXSk/Yj03Oi9bMS05XTAwLy50ZXN0KGRbMV0pJiYoYj1wYXJzZUludChkWzFdLnN1YnN0cigwLDEpLDEwKSkpKTtyZXR1cm4gYytifTtmdW5jdGlvbiBoYShhLGIpe3RoaXMuYz1hO3RoaXMuZj1hLm8uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3RoaXMuaD1iO3RoaXMuYT1uZXcgRihcIi1cIik7dGhpcy5qPSExIT09Yi5ldmVudHM7dGhpcy5nPSExIT09Yi5jbGFzc2VzfWZ1bmN0aW9uIGlhKGEpe2EuZyYmdyhhLmYsW2EuYS5jKFwid2ZcIixcImxvYWRpbmdcIildKTtLKGEsXCJsb2FkaW5nXCIpfWZ1bmN0aW9uIEwoYSl7aWYoYS5nKXt2YXIgYj15KGEuZixhLmEuYyhcIndmXCIsXCJhY3RpdmVcIikpLGM9W10sZD1bYS5hLmMoXCJ3ZlwiLFwibG9hZGluZ1wiKV07Ynx8Yy5wdXNoKGEuYS5jKFwid2ZcIixcImluYWN0aXZlXCIpKTt3KGEuZixjLGQpfUsoYSxcImluYWN0aXZlXCIpfWZ1bmN0aW9uIEsoYSxiLGMpe2lmKGEuaiYmYS5oW2JdKWlmKGMpYS5oW2JdKGMuYyxKKGMpKTtlbHNlIGEuaFtiXSgpfTtmdW5jdGlvbiBqYSgpe3RoaXMuYz17fX1mdW5jdGlvbiBrYShhLGIsYyl7dmFyIGQ9W10sZTtmb3IoZSBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBmPWEuY1tlXTtmJiZkLnB1c2goZihiW2VdLGMpKX1yZXR1cm4gZH07ZnVuY3Rpb24gTShhLGIpe3RoaXMuYz1hO3RoaXMuZj1iO3RoaXMuYT10KHRoaXMuYyxcInNwYW5cIix7XCJhcmlhLWhpZGRlblwiOlwidHJ1ZVwifSx0aGlzLmYpfWZ1bmN0aW9uIE4oYSl7dShhLmMsXCJib2R5XCIsYS5hKX1mdW5jdGlvbiBPKGEpe3JldHVyblwiZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTk5OTlweDtsZWZ0Oi05OTk5cHg7Zm9udC1zaXplOjMwMHB4O3dpZHRoOmF1dG87aGVpZ2h0OmF1dG87bGluZS1oZWlnaHQ6bm9ybWFsO21hcmdpbjowO3BhZGRpbmc6MDtmb250LXZhcmlhbnQ6bm9ybWFsO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LWZhbWlseTpcIitJKGEuYykrXCI7XCIrKFwiZm9udC1zdHlsZTpcIitIKGEpK1wiO2ZvbnQtd2VpZ2h0OlwiKyhhLmYrXCIwMFwiKStcIjtcIil9O2Z1bmN0aW9uIFAoYSxiLGMsZCxlLGYpe3RoaXMuZz1hO3RoaXMuaj1iO3RoaXMuYT1kO3RoaXMuYz1jO3RoaXMuZj1lfHwzRTM7dGhpcy5oPWZ8fHZvaWQgMH1QLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuYy5vLmRvY3VtZW50LGI9dGhpcyxjPXEoKSxkPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGQsZSl7ZnVuY3Rpb24gZigpe3EoKS1jPj1iLmY/ZSgpOmEuZm9udHMubG9hZChmYShiLmEpLGIuaCkudGhlbihmdW5jdGlvbihhKXsxPD1hLmxlbmd0aD9kKCk6c2V0VGltZW91dChmLDI1KX0sZnVuY3Rpb24oKXtlKCl9KX1mKCl9KSxlPW51bGwsZj1uZXcgUHJvbWlzZShmdW5jdGlvbihhLGQpe2U9c2V0VGltZW91dChkLGIuZil9KTtQcm9taXNlLnJhY2UoW2YsZF0pLnRoZW4oZnVuY3Rpb24oKXtlJiYoY2xlYXJUaW1lb3V0KGUpLGU9bnVsbCk7Yi5nKGIuYSl9LGZ1bmN0aW9uKCl7Yi5qKGIuYSl9KX07ZnVuY3Rpb24gUShhLGIsYyxkLGUsZixnKXt0aGlzLnY9YTt0aGlzLkI9Yjt0aGlzLmM9Yzt0aGlzLmE9ZDt0aGlzLnM9Z3x8XCJCRVNic3d5XCI7dGhpcy5mPXt9O3RoaXMudz1lfHwzRTM7dGhpcy51PWZ8fG51bGw7dGhpcy5tPXRoaXMuaj10aGlzLmg9dGhpcy5nPW51bGw7dGhpcy5nPW5ldyBNKHRoaXMuYyx0aGlzLnMpO3RoaXMuaD1uZXcgTSh0aGlzLmMsdGhpcy5zKTt0aGlzLmo9bmV3IE0odGhpcy5jLHRoaXMucyk7dGhpcy5tPW5ldyBNKHRoaXMuYyx0aGlzLnMpO2E9bmV3IEcodGhpcy5hLmMrXCIsc2VyaWZcIixKKHRoaXMuYSkpO2E9TyhhKTt0aGlzLmcuYS5zdHlsZS5jc3NUZXh0PWE7YT1uZXcgRyh0aGlzLmEuYytcIixzYW5zLXNlcmlmXCIsSih0aGlzLmEpKTthPU8oYSk7dGhpcy5oLmEuc3R5bGUuY3NzVGV4dD1hO2E9bmV3IEcoXCJzZXJpZlwiLEoodGhpcy5hKSk7YT1PKGEpO3RoaXMuai5hLnN0eWxlLmNzc1RleHQ9YTthPW5ldyBHKFwic2Fucy1zZXJpZlwiLEoodGhpcy5hKSk7YT1cbk8oYSk7dGhpcy5tLmEuc3R5bGUuY3NzVGV4dD1hO04odGhpcy5nKTtOKHRoaXMuaCk7Tih0aGlzLmopO04odGhpcy5tKX12YXIgUj17RDpcInNlcmlmXCIsQzpcInNhbnMtc2VyaWZcIn0sUz1udWxsO2Z1bmN0aW9uIFQoKXtpZihudWxsPT09Uyl7dmFyIGE9L0FwcGxlV2ViS2l0XFwvKFswLTldKykoPzpcXC4oWzAtOV0rKSkvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1M9ISFhJiYoNTM2PnBhcnNlSW50KGFbMV0sMTApfHw1MzY9PT1wYXJzZUludChhWzFdLDEwKSYmMTE+PXBhcnNlSW50KGFbMl0sMTApKX1yZXR1cm4gU31RLnByb3RvdHlwZS5zdGFydD1mdW5jdGlvbigpe3RoaXMuZi5zZXJpZj10aGlzLmouYS5vZmZzZXRXaWR0aDt0aGlzLmZbXCJzYW5zLXNlcmlmXCJdPXRoaXMubS5hLm9mZnNldFdpZHRoO3RoaXMuQT1xKCk7VSh0aGlzKX07XG5mdW5jdGlvbiBsYShhLGIsYyl7Zm9yKHZhciBkIGluIFIpaWYoUi5oYXNPd25Qcm9wZXJ0eShkKSYmYj09PWEuZltSW2RdXSYmYz09PWEuZltSW2RdXSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBVKGEpe3ZhciBiPWEuZy5hLm9mZnNldFdpZHRoLGM9YS5oLmEub2Zmc2V0V2lkdGgsZDsoZD1iPT09YS5mLnNlcmlmJiZjPT09YS5mW1wic2Fucy1zZXJpZlwiXSl8fChkPVQoKSYmbGEoYSxiLGMpKTtkP3EoKS1hLkE+PWEudz9UKCkmJmxhKGEsYixjKSYmKG51bGw9PT1hLnV8fGEudS5oYXNPd25Qcm9wZXJ0eShhLmEuYykpP1YoYSxhLnYpOlYoYSxhLkIpOm1hKGEpOlYoYSxhLnYpfWZ1bmN0aW9uIG1hKGEpe3NldFRpbWVvdXQocChmdW5jdGlvbigpe1UodGhpcyl9LGEpLDUwKX1mdW5jdGlvbiBWKGEsYil7c2V0VGltZW91dChwKGZ1bmN0aW9uKCl7dih0aGlzLmcuYSk7dih0aGlzLmguYSk7dih0aGlzLmouYSk7dih0aGlzLm0uYSk7Yih0aGlzLmEpfSxhKSwwKX07ZnVuY3Rpb24gVyhhLGIsYyl7dGhpcy5jPWE7dGhpcy5hPWI7dGhpcy5mPTA7dGhpcy5tPXRoaXMuaj0hMTt0aGlzLnM9Y312YXIgWD1udWxsO1cucHJvdG90eXBlLmc9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5hO2IuZyYmdyhiLmYsW2IuYS5jKFwid2ZcIixhLmMsSihhKS50b1N0cmluZygpLFwiYWN0aXZlXCIpXSxbYi5hLmMoXCJ3ZlwiLGEuYyxKKGEpLnRvU3RyaW5nKCksXCJsb2FkaW5nXCIpLGIuYS5jKFwid2ZcIixhLmMsSihhKS50b1N0cmluZygpLFwiaW5hY3RpdmVcIildKTtLKGIsXCJmb250YWN0aXZlXCIsYSk7dGhpcy5tPSEwO25hKHRoaXMpfTtcblcucHJvdG90eXBlLmg9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5hO2lmKGIuZyl7dmFyIGM9eShiLmYsYi5hLmMoXCJ3ZlwiLGEuYyxKKGEpLnRvU3RyaW5nKCksXCJhY3RpdmVcIikpLGQ9W10sZT1bYi5hLmMoXCJ3ZlwiLGEuYyxKKGEpLnRvU3RyaW5nKCksXCJsb2FkaW5nXCIpXTtjfHxkLnB1c2goYi5hLmMoXCJ3ZlwiLGEuYyxKKGEpLnRvU3RyaW5nKCksXCJpbmFjdGl2ZVwiKSk7dyhiLmYsZCxlKX1LKGIsXCJmb250aW5hY3RpdmVcIixhKTtuYSh0aGlzKX07ZnVuY3Rpb24gbmEoYSl7MD09LS1hLmYmJmEuaiYmKGEubT8oYT1hLmEsYS5nJiZ3KGEuZixbYS5hLmMoXCJ3ZlwiLFwiYWN0aXZlXCIpXSxbYS5hLmMoXCJ3ZlwiLFwibG9hZGluZ1wiKSxhLmEuYyhcIndmXCIsXCJpbmFjdGl2ZVwiKV0pLEsoYSxcImFjdGl2ZVwiKSk6TChhLmEpKX07ZnVuY3Rpb24gb2EoYSl7dGhpcy5qPWE7dGhpcy5hPW5ldyBqYTt0aGlzLmg9MDt0aGlzLmY9dGhpcy5nPSEwfW9hLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3RoaXMuYz1uZXcgY2EodGhpcy5qLGEuY29udGV4dHx8dGhpcy5qKTt0aGlzLmc9ITEhPT1hLmV2ZW50czt0aGlzLmY9ITEhPT1hLmNsYXNzZXM7cGEodGhpcyxuZXcgaGEodGhpcy5jLGEpLGEpfTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQsZSl7dmFyIGY9MD09LS1hLmg7KGEuZnx8YS5nKSYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBhPWV8fG51bGwsbT1kfHxudWxsfHx7fTtpZigwPT09Yy5sZW5ndGgmJmYpTChiLmEpO2Vsc2V7Yi5mKz1jLmxlbmd0aDtmJiYoYi5qPWYpO3ZhciBoLGw9W107Zm9yKGg9MDtoPGMubGVuZ3RoO2grKyl7dmFyIGs9Y1toXSxuPW1bay5jXSxyPWIuYSx4PWs7ci5nJiZ3KHIuZixbci5hLmMoXCJ3ZlwiLHguYyxKKHgpLnRvU3RyaW5nKCksXCJsb2FkaW5nXCIpXSk7SyhyLFwiZm9udGxvYWRpbmdcIix4KTtyPW51bGw7aWYobnVsbD09PVgpaWYod2luZG93LkZvbnRGYWNlKXt2YXIgeD0vR2Vja28uKkZpcmVmb3hcXC8oXFxkKykvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLHhhPS9PUyBYLipWZXJzaW9uXFwvMTBcXC4uKlNhZmFyaS8uZXhlYyh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZS8uZXhlYyh3aW5kb3cubmF2aWdhdG9yLnZlbmRvcik7XG5YPXg/NDI8cGFyc2VJbnQoeFsxXSwxMCk6eGE/ITE6ITB9ZWxzZSBYPSExO1g/cj1uZXcgUChwKGIuZyxiKSxwKGIuaCxiKSxiLmMsayxiLnMsbik6cj1uZXcgUShwKGIuZyxiKSxwKGIuaCxiKSxiLmMsayxiLnMsYSxuKTtsLnB1c2gocil9Zm9yKGg9MDtoPGwubGVuZ3RoO2grKylsW2hdLnN0YXJ0KCl9fSwwKX1mdW5jdGlvbiBwYShhLGIsYyl7dmFyIGQ9W10sZT1jLnRpbWVvdXQ7aWEoYik7dmFyIGQ9a2EoYS5hLGMsYS5jKSxmPW5ldyBXKGEuYyxiLGUpO2EuaD1kLmxlbmd0aDtiPTA7Zm9yKGM9ZC5sZW5ndGg7YjxjO2IrKylkW2JdLmxvYWQoZnVuY3Rpb24oYixkLGMpe3FhKGEsZixiLGQsYyl9KX07ZnVuY3Rpb24gcmEoYSxiKXt0aGlzLmM9YTt0aGlzLmE9Yn1cbnJhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXtpZihmW1wiX19tdGlfZm50THN0XCIrZF0pe3ZhciBjPWZbXCJfX210aV9mbnRMc3RcIitkXSgpLGU9W10saDtpZihjKWZvcih2YXIgbD0wO2w8Yy5sZW5ndGg7bCsrKXt2YXIgaz1jW2xdLmZvbnRmYW1pbHk7dm9pZCAwIT1jW2xdLmZvbnRTdHlsZSYmdm9pZCAwIT1jW2xdLmZvbnRXZWlnaHQ/KGg9Y1tsXS5mb250U3R5bGUrY1tsXS5mb250V2VpZ2h0LGUucHVzaChuZXcgRyhrLGgpKSk6ZS5wdXNoKG5ldyBHKGspKX1hKGUpfWVsc2Ugc2V0VGltZW91dChmdW5jdGlvbigpe2IoKX0sNTApfXZhciBjPXRoaXMsZD1jLmEucHJvamVjdElkLGU9Yy5hLnZlcnNpb247aWYoZCl7dmFyIGY9Yy5jLm87QSh0aGlzLmMsKGMuYS5hcGl8fFwiaHR0cHM6Ly9mYXN0LmZvbnRzLm5ldC9qc2FwaVwiKStcIi9cIitkK1wiLmpzXCIrKGU/XCI/dj1cIitlOlwiXCIpLGZ1bmN0aW9uKGUpe2U/YShbXSk6KGZbXCJfX01vbm90eXBlQ29uZmlndXJhdGlvbl9fXCIrXG5kXT1mdW5jdGlvbigpe3JldHVybiBjLmF9LGIoKSl9KS5pZD1cIl9fTW9ub3R5cGVBUElTY3JpcHRfX1wiK2R9ZWxzZSBhKFtdKX07ZnVuY3Rpb24gc2EoYSxiKXt0aGlzLmM9YTt0aGlzLmE9Yn1zYS5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihhKXt2YXIgYixjLGQ9dGhpcy5hLnVybHN8fFtdLGU9dGhpcy5hLmZhbWlsaWVzfHxbXSxmPXRoaXMuYS50ZXN0U3RyaW5nc3x8e30sZz1uZXcgQjtiPTA7Zm9yKGM9ZC5sZW5ndGg7YjxjO2IrKyl6KHRoaXMuYyxkW2JdLEMoZykpO3ZhciBtPVtdO2I9MDtmb3IoYz1lLmxlbmd0aDtiPGM7YisrKWlmKGQ9ZVtiXS5zcGxpdChcIjpcIiksZFsxXSlmb3IodmFyIGg9ZFsxXS5zcGxpdChcIixcIiksbD0wO2w8aC5sZW5ndGg7bCs9MSltLnB1c2gobmV3IEcoZFswXSxoW2xdKSk7ZWxzZSBtLnB1c2gobmV3IEcoZFswXSkpO0UoZyxmdW5jdGlvbigpe2EobSxmKX0pfTtmdW5jdGlvbiB0YShhLGIpe2E/dGhpcy5jPWE6dGhpcy5jPXVhO3RoaXMuYT1bXTt0aGlzLmY9W107dGhpcy5nPWJ8fFwiXCJ9dmFyIHVhPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3NcIjtmdW5jdGlvbiB2YShhLGIpe2Zvcih2YXIgYz1iLmxlbmd0aCxkPTA7ZDxjO2QrKyl7dmFyIGU9YltkXS5zcGxpdChcIjpcIik7Mz09ZS5sZW5ndGgmJmEuZi5wdXNoKGUucG9wKCkpO3ZhciBmPVwiXCI7Mj09ZS5sZW5ndGgmJlwiXCIhPWVbMV0mJihmPVwiOlwiKTthLmEucHVzaChlLmpvaW4oZikpfX1cbmZ1bmN0aW9uIHdhKGEpe2lmKDA9PWEuYS5sZW5ndGgpdGhyb3cgRXJyb3IoXCJObyBmb250cyB0byBsb2FkIVwiKTtpZigtMSE9YS5jLmluZGV4T2YoXCJraXQ9XCIpKXJldHVybiBhLmM7Zm9yKHZhciBiPWEuYS5sZW5ndGgsYz1bXSxkPTA7ZDxiO2QrKyljLnB1c2goYS5hW2RdLnJlcGxhY2UoLyAvZyxcIitcIikpO2I9YS5jK1wiP2ZhbWlseT1cIitjLmpvaW4oXCIlN0NcIik7MDxhLmYubGVuZ3RoJiYoYis9XCImc3Vic2V0PVwiK2EuZi5qb2luKFwiLFwiKSk7MDxhLmcubGVuZ3RoJiYoYis9XCImdGV4dD1cIitlbmNvZGVVUklDb21wb25lbnQoYS5nKSk7cmV0dXJuIGJ9O2Z1bmN0aW9uIHlhKGEpe3RoaXMuZj1hO3RoaXMuYT1bXTt0aGlzLmM9e319XG52YXIgemE9e2xhdGluOlwiQkVTYnN3eVwiLFwibGF0aW4tZXh0XCI6XCJcXHUwMGU3XFx1MDBmNlxcdTAwZmNcXHUwMTFmXFx1MDE1ZlwiLGN5cmlsbGljOlwiXFx1MDQzOVxcdTA0NGZcXHUwNDE2XCIsZ3JlZWs6XCJcXHUwM2IxXFx1MDNiMlxcdTAzYTNcIixraG1lcjpcIlxcdTE3ODBcXHUxNzgxXFx1MTc4MlwiLEhhbnVtYW46XCJcXHUxNzgwXFx1MTc4MVxcdTE3ODJcIn0sQWE9e3RoaW46XCIxXCIsZXh0cmFsaWdodDpcIjJcIixcImV4dHJhLWxpZ2h0XCI6XCIyXCIsdWx0cmFsaWdodDpcIjJcIixcInVsdHJhLWxpZ2h0XCI6XCIyXCIsbGlnaHQ6XCIzXCIscmVndWxhcjpcIjRcIixib29rOlwiNFwiLG1lZGl1bTpcIjVcIixcInNlbWktYm9sZFwiOlwiNlwiLHNlbWlib2xkOlwiNlwiLFwiZGVtaS1ib2xkXCI6XCI2XCIsZGVtaWJvbGQ6XCI2XCIsYm9sZDpcIjdcIixcImV4dHJhLWJvbGRcIjpcIjhcIixleHRyYWJvbGQ6XCI4XCIsXCJ1bHRyYS1ib2xkXCI6XCI4XCIsdWx0cmFib2xkOlwiOFwiLGJsYWNrOlwiOVwiLGhlYXZ5OlwiOVwiLGw6XCIzXCIscjpcIjRcIixiOlwiN1wifSxCYT17aTpcImlcIixpdGFsaWM6XCJpXCIsbjpcIm5cIixub3JtYWw6XCJuXCJ9LFxuQ2E9L14odGhpbnwoPzooPzpleHRyYXx1bHRyYSktPyk/bGlnaHR8cmVndWxhcnxib29rfG1lZGl1bXwoPzooPzpzZW1pfGRlbWl8ZXh0cmF8dWx0cmEpLT8pP2JvbGR8YmxhY2t8aGVhdnl8bHxyfGJ8WzEtOV0wMCk/KG58aXxub3JtYWx8aXRhbGljKT8kLztcbmZ1bmN0aW9uIERhKGEpe2Zvcih2YXIgYj1hLmYubGVuZ3RoLGM9MDtjPGI7YysrKXt2YXIgZD1hLmZbY10uc3BsaXQoXCI6XCIpLGU9ZFswXS5yZXBsYWNlKC9cXCsvZyxcIiBcIiksZj1bXCJuNFwiXTtpZigyPD1kLmxlbmd0aCl7dmFyIGc7dmFyIG09ZFsxXTtnPVtdO2lmKG0pZm9yKHZhciBtPW0uc3BsaXQoXCIsXCIpLGg9bS5sZW5ndGgsbD0wO2w8aDtsKyspe3ZhciBrO2s9bVtsXTtpZihrLm1hdGNoKC9eW1xcdy1dKyQvKSl7dmFyIG49Q2EuZXhlYyhrLnRvTG93ZXJDYXNlKCkpO2lmKG51bGw9PW4paz1cIlwiO2Vsc2V7az1uWzJdO2s9bnVsbD09a3x8XCJcIj09az9cIm5cIjpCYVtrXTtuPW5bMV07aWYobnVsbD09bnx8XCJcIj09biluPVwiNFwiO2Vsc2UgdmFyIHI9QWFbbl0sbj1yP3I6aXNOYU4obik/XCI0XCI6bi5zdWJzdHIoMCwxKTtrPVtrLG5dLmpvaW4oXCJcIil9fWVsc2Ugaz1cIlwiO2smJmcucHVzaChrKX0wPGcubGVuZ3RoJiYoZj1nKTszPT1kLmxlbmd0aCYmKGQ9ZFsyXSxnPVtdLGQ9ZD9kLnNwbGl0KFwiLFwiKTpcbmcsMDxkLmxlbmd0aCYmKGQ9emFbZFswXV0pJiYoYS5jW2VdPWQpKX1hLmNbZV18fChkPXphW2VdKSYmKGEuY1tlXT1kKTtmb3IoZD0wO2Q8Zi5sZW5ndGg7ZCs9MSlhLmEucHVzaChuZXcgRyhlLGZbZF0pKX19O2Z1bmN0aW9uIEVhKGEsYil7dGhpcy5jPWE7dGhpcy5hPWJ9dmFyIEZhPXtBcmltbzohMCxDb3VzaW5lOiEwLFRpbm9zOiEwfTtFYS5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgQixjPXRoaXMuYyxkPW5ldyB0YSh0aGlzLmEuYXBpLHRoaXMuYS50ZXh0KSxlPXRoaXMuYS5mYW1pbGllczt2YShkLGUpO3ZhciBmPW5ldyB5YShlKTtEYShmKTt6KGMsd2EoZCksQyhiKSk7RShiLGZ1bmN0aW9uKCl7YShmLmEsZi5jLEZhKX0pfTtmdW5jdGlvbiBHYShhLGIpe3RoaXMuYz1hO3RoaXMuYT1ifUdhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYS5pZCxjPXRoaXMuYy5vO2I/QSh0aGlzLmMsKHRoaXMuYS5hcGl8fFwiaHR0cHM6Ly91c2UudHlwZWtpdC5uZXRcIikrXCIvXCIrYitcIi5qc1wiLGZ1bmN0aW9uKGIpe2lmKGIpYShbXSk7ZWxzZSBpZihjLlR5cGVraXQmJmMuVHlwZWtpdC5jb25maWcmJmMuVHlwZWtpdC5jb25maWcuZm4pe2I9Yy5UeXBla2l0LmNvbmZpZy5mbjtmb3IodmFyIGU9W10sZj0wO2Y8Yi5sZW5ndGg7Zis9Milmb3IodmFyIGc9YltmXSxtPWJbZisxXSxoPTA7aDxtLmxlbmd0aDtoKyspZS5wdXNoKG5ldyBHKGcsbVtoXSkpO3RyeXtjLlR5cGVraXQubG9hZCh7ZXZlbnRzOiExLGNsYXNzZXM6ITEsYXN5bmM6ITB9KX1jYXRjaChsKXt9YShlKX19LDJFMyk6YShbXSl9O2Z1bmN0aW9uIEhhKGEsYil7dGhpcy5jPWE7dGhpcy5mPWI7dGhpcy5hPVtdfUhhLnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZi5pZCxjPXRoaXMuYy5vLGQ9dGhpcztiPyhjLl9fd2ViZm9udGZvbnRkZWNrbW9kdWxlX198fChjLl9fd2ViZm9udGZvbnRkZWNrbW9kdWxlX189e30pLGMuX193ZWJmb250Zm9udGRlY2ttb2R1bGVfX1tiXT1mdW5jdGlvbihiLGMpe2Zvcih2YXIgZz0wLG09Yy5mb250cy5sZW5ndGg7ZzxtOysrZyl7dmFyIGg9Yy5mb250c1tnXTtkLmEucHVzaChuZXcgRyhoLm5hbWUsZ2EoXCJmb250LXdlaWdodDpcIitoLndlaWdodCtcIjtmb250LXN0eWxlOlwiK2guc3R5bGUpKSl9YShkLmEpfSxBKHRoaXMuYywodGhpcy5mLmFwaXx8XCJodHRwczovL2YuZm9udGRlY2suY29tL3MvY3NzL2pzL1wiKStlYSh0aGlzLmMpK1wiL1wiK2IrXCIuanNcIixmdW5jdGlvbihiKXtiJiZhKFtdKX0pKTphKFtdKX07dmFyIFk9bmV3IG9hKHdpbmRvdyk7WS5hLmMuY3VzdG9tPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyBzYShiLGEpfTtZLmEuYy5mb250ZGVjaz1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgSGEoYixhKX07WS5hLmMubW9ub3R5cGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHJhKGIsYSl9O1kuYS5jLnR5cGVraXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IEdhKGIsYSl9O1kuYS5jLmdvb2dsZT1mdW5jdGlvbihhLGIpe3JldHVybiBuZXcgRWEoYixhKX07dmFyIFo9e2xvYWQ6cChZLmxvYWQsWSl9O1wiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGZ1bmN0aW9uKCl7cmV0dXJuIFp9KTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9Wjood2luZG93LldlYkZvbnQ9Wix3aW5kb3cuV2ViRm9udENvbmZpZyYmWS5sb2FkKHdpbmRvdy5XZWJGb250Q29uZmlnKSk7fSgpKTtcbiIsIi8vIE1vZHVsZSBMaWZlXG5pbXBvcnQgJy4vZ2VuZXJhbCdcblxuY29uc3QgY29sb3JzID0gWyAncGluaycsICdyZWQnLCAnYmx1ZScgXVxuY29uc3QgbW9Db2xvcnMgPSBbJ2JsdWUnLCAnb3JhbmdlJ11cblxuLy8gV2UgaGF2ZSBFczYgR29vZGllcyB0aGFua3MgdG8gQmFiZWxcbmNvbnN0IGFsbFRoZUNvbG9ycyA9IFsgLi4uY29sb3JzLCBtb0NvbG9ycyBdXG5hbGxUaGVDb2xvcnMubWFwKGMgPT4gY29uc29sZS5sb2coYykpXG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbi8qXG4kKCcjY3JlYXRlX2N1c3RvbWVyJykuc3VibWl0KGZ1bmN0aW9uKGUpe1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBmaXJzdF9uYW1lID0gJCgnI2ZpcnN0X25hbWUnKS52YWwoKS50cmltKCk7XG4gICAgJCgnI2ZpcnN0X25hbWUnKS52YWwoZmlyc3RfbmFtZSk7XG4gICAgdmFyIGxhc3RfbmFtZSA9ICQoJyNsYXN0X25hbWUnKS52YWwoKS50cmltKCk7XG4gICAgJCgnI2xhc3RfbmFtZScpLnZhbChsYXN0X25hbWUpO1xuICAgIHZhciBlbWFpbCA9ICQoJyNlbWFpbCcpLnZhbCgpLnRyaW0oKTtcbiAgICAkKCcjZW1haWwnKS52YWwoZW1haWwpO1xuICAgIHZhciBwYXNzd29yZCA9ICQoJyNwYXNzd29yZCcpLnZhbCgpO1xuICAgIGlmKGZpcnN0X25hbWUgPT0gXCJcIikge1xuICAgICAgICAkKCcjZmlyc3RfbmFtZScpLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYobGFzdF9uYW1lID09IFwiXCIpIHtcbiAgICAgICAgJCgnI2xhc3RfbmFtZScpLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYoZW1haWwgPT0gXCJcIikge1xuICAgICAgICAkKCcjZW1haWwnKS5mb2N1cygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmKHBhc3N3b3JkID09IFwiXCIpIHtcbiAgICAgICAgJCgnI3Bhc3N3b3JkJykuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwYXJhbSA9IHtcbiAgICAgICAgXCJjdXN0b21lclwiOiB7XG4gICAgICAgICAgICBcImZpcnN0X25hbWVcIjogZmlyc3RfbmFtZSxcbiAgICAgICAgICAgIFwibGFzdF9uYW1lXCI6IGxhc3RfbmFtZSxcbiAgICAgICAgICAgIFwiZW1haWxcIjogZW1haWwsXG4gICAgICAgICAgICBcInZlcmlmaWVkX2VtYWlsXCI6IHRydWUsXG4gICAgICAgICAgICBcInBhc3N3b3JkXCI6IHBhc3N3b3JkLFxuICAgICAgICAgICAgXCJwYXNzd29yZF9jb25maXJtYXRpb25cIjogcGFzc3dvcmQsXG4gICAgICAgICAgICBcInNlbmRfZW1haWxfd2VsY29tZVwiOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoJ2FjdGlvbicpO1xuXG5cbiAgICB2YXIgeGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQgJiYgdGhpcy5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICAgICAgICAvLyB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYWNjb3VudCc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhodHRwLm9wZW4oXCJQT1NUXCIsIHVybCwgdHJ1ZSk7XG4gICAgeGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgeGh0dHAuc2VuZChKU09OLnN0cmluZ2lmeShwYXJhbSkpO1xufSk7XG4qL1xuXG4kKCcjdXBkYXRlLXByb2ZpbGUnKS5zdWJtaXQoZnVuY3Rpb24oZSl7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdmFyIGZpcnN0X25hbWUgPSAkKCcjZmlyc3RfbmFtZScpLnZhbCgpLnRyaW0oKTtcbiAgICAkKCcjZmlyc3RfbmFtZScpLnZhbChmaXJzdF9uYW1lKTtcbiAgICB2YXIgbGFzdF9uYW1lID0gJCgnI2xhc3RfbmFtZScpLnZhbCgpLnRyaW0oKTtcbiAgICAkKCcjbGFzdF9uYW1lJykudmFsKGxhc3RfbmFtZSk7XG4gICAgdmFyIGVtYWlsID0gJCgnI2VtYWlsJykudmFsKCkudHJpbSgpO1xuICAgICQoJyNlbWFpbCcpLnZhbChlbWFpbCk7XG4gICAgaWYoZmlyc3RfbmFtZSA9PSBcIlwiKSB7XG4gICAgICAgICQoJyNmaXJzdF9uYW1lJykuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZihsYXN0X25hbWUgPT0gXCJcIikge1xuICAgICAgICAkKCcjbGFzdF9uYW1lJykuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZihlbWFpbCA9PSBcIlwiKSB7XG4gICAgICAgICQoJyNlbWFpbCcpLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW0gPSB7XG4gICAgICAgIFwiY3VzdG9tZXJcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiAkKCcjY3VzdG9tZXJfaWQnKS52YWwoKSxcbiAgICAgICAgICAgIFwiZmlyc3RfbmFtZVwiOiBmaXJzdF9uYW1lLFxuICAgICAgICAgICAgXCJsYXN0X25hbWVcIjogbGFzdF9uYW1lLFxuICAgICAgICAgICAgXCJlbWFpbFwiOiBlbWFpbFxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoJ2FjdGlvbicpO1xuXG5cbiAgICB2YXIgeGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSA0ICYmIHRoaXMuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2FjY291bnQnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB4aHR0cC5vcGVuKFwiUFVUXCIsIHVybCwgdHJ1ZSk7XG4gICAgeGh0dHAuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgeGh0dHAuc2VuZChKU09OLnN0cmluZ2lmeShwYXJhbSkpO1xufSk7XG5cbiQoJyNjaGFuZ2UtcGFzc3dvcmQnKS5zdWJtaXQoZnVuY3Rpb24oZSl7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBwd2QgPSAkKCcjY3VzdG9tZXJfcGFzc3dvcmQnKS52YWwoKTtcbiAgICB2YXIgcmVfcHdkID0gJCgnI2N1c3RvbWVyX2NvbmZpcm1fcGFzc3dvcmQnKS52YWwoKTtcbiAgICBpZihwd2QgPT0gXCJcIikge1xuICAgICAgICAkKCcjY3VzdG9tZXJfcGFzc3dvcmQnKS5mb2N1cygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYocHdkICE9IHJlX3B3ZCkge1xuICAgICAgICAkKCcjY3VzdG9tZXJfY29uZmlybV9wYXNzd29yZCcpLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyYW0gPSB7XG4gICAgICAgIFwiY3VzdG9tZXJcIjoge1xuICAgICAgICAgICAgXCJpZFwiOiAkKCcjY3VzdG9tZXJfaWQnKS52YWwoKSxcbiAgICAgICAgICAgIFwicGFzc3dvcmRcIjogcHdkLFxuICAgICAgICAgICAgXCJwYXNzd29yZF9jb25maXJtYXRpb25cIjogcmVfcHdkXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHVybCA9ICQodGhpcykuYXR0cignYWN0aW9uJyk7XG5cblxuICAgIHZhciB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09IDQgJiYgdGhpcy5zdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYWNjb3VudCc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhodHRwLm9wZW4oXCJQVVRcIiwgdXJsLCB0cnVlKTtcbiAgICB4aHR0cC5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICB4aHR0cC5zZW5kKEpTT04uc3RyaW5naWZ5KHBhcmFtKSk7XG59KTtcblxuLy8gYWNjb3VudCBtYXBzIFxuaWYoJCgnI2N1c3RvbWVyX21hcHMnKS5sZW5ndGgpIHtcblxuICAgIC8vIGxvYWQgbWFwc1xuICAgIHZhciBhcGlfdXJsID0gJ2h0dHBzOi8vbm8tc21hbGwtcGxhbi5oZXJva3VhcHAuY29tL2FwaSc7XG4gICAgdmFyIGN1c3RvbWVySWQgPSBtZXRhLnBhZ2UuY3VzdG9tZXJJZDtcbiAgICB2YXIgbXlNYXBzO1xuICAgIHZhciBzZWxlY3RlZE1hcCA9IHtcbiAgICAgICAgaWQ6IC0xLFxuICAgICAgICBtYXBfbmFtZTogXCJcIixcbiAgICAgICAgbWFwX3NldHRpbmc6IFwiXCJcbiAgICB9O1xuXG4gICAgJC5nZXRKU09OKCBhcGlfdXJsICsgXCIvbWFwL2xvYWQvXCIgKyBjdXN0b21lcklkLCBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG4gICAgICAgIGlmKCFyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgbXlNYXBzID0gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgdmFyIGl0ZW1fY3QgPSAnJztcbiAgICAgICAgICAgIHZhciBzZXR0aW5nID0gJyc7XG4gICAgICAgICAgICBteU1hcHMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgc2V0dGluZyA9IEpTT04ucGFyc2UoaXRlbS5tYXBfc2V0dGluZykudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgIGl0ZW1fY3QgPSAnJyArIFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJibG9ja19tYXBcIiBkYXRhLWlkPVwiJyArIGl0ZW0uaWQgKyAnXCIgZGF0YS1zZXR0aW5nPVwiJyArIHNldHRpbmcgKyAnXCIgZGF0YS1uYW1lPVwiJyArIGl0ZW0ubWFwX25hbWUgKyAnXCI+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImJveFwiPicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW1nIHNyYz1cIicgKyB3aW5kb3cubWFwX2ljb25fdXJsICsgJ1wiIC8+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwPicgKyBpdGVtLm1hcF9uYW1lICsgJzwvcD4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInZfYm9yZGVyXCI+PC9kaXY+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJoX2JvcmRlclwiPjwvZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwib3ZlcmxhcC0tYnV0dG9uc1wiPicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tZ3JlZW4gYnV0dG9uLS1lZGl0XCI+RWRpdDwvYnV0dG9uPicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJidXR0b24gYnV0dG9uLS1kaXNhYmxlIGJ1dHRvbi0tZGVsZXRlXCI+ZGVsZXRlPC9idXR0b24+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XG5cbiAgICAgICAgICAgICAgICAkKCcjY3VzdG9tZXJfbWFwcyAubWFwLWJsb2NrcycpLmFwcGVuZChpdGVtX2N0KTsgXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgfSk7XG5cbiAgICAvLyBjbGljayBtYXBcbiAgICAkKCcjY3VzdG9tZXJfbWFwcycpLm9uKCdjbGljaycsICcuYmxvY2tfbWFwX25ldycsIGZ1bmN0aW9uKGUpe1xuICAgICAgICB2YXIgbWFwX2lkID0gLTE7XG4gICAgICAgIHZhciBtYXBfbmFtZSA9IFwiXCI7XG4gICAgICAgIHZhciBtYXBfc2V0dGluZyA9IFtdO1xuXG4gICAgICAgIHNlbGVjdGVkTWFwID0ge1xuICAgICAgICAgICAgaWQ6IG1hcF9pZCxcbiAgICAgICAgICAgIG1hcF9uYW1lOiBtYXBfbmFtZSxcbiAgICAgICAgICAgIG1hcF9zZXR0aW5nOiBtYXBfc2V0dGluZ1xuICAgICAgICB9O1xuXG4gICAgICAgICQoJyNtYXBfbmFtZScpLnZhbCggc2VsZWN0ZWRNYXAubWFwX25hbWUpO1xuXG4gICAgICAgICQoXCIjY3VzdG9tZXJfbWFwcy1tb2RhbFwiKS5tb2RhbCh7XG4gICAgICAgICAgICBmYWRlRHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgIGZhZGVEZWxheTogMC4yLFxuICAgICAgICAgICAgY2xvc2VDbGFzczogJ2ljb24tcmVtb3ZlJyxcbiAgICAgICAgICAgIGNsb3NlVGV4dDogJ1gnLFxuICAgICAgICAgICAgZXNjYXBlQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgY2xpY2tDbG9zZTogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNjdXN0b21lcl9tYXBzLW1vZGFsIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7IFxuICAgIH0pO1xuXG4gICAgLy8gY2xpY2sgbWFwXG4gICAgJCgnI2N1c3RvbWVyX21hcHMnKS5vbignY2xpY2snLCAnLmJ1dHRvbi0tZWRpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICB2YXIgcGFyZW50ID0gJCh0aGlzKS5wYXJlbnRzKCcuYmxvY2tfbWFwJyk7XG4gICAgICAgIHZhciBtYXBfaWQgPSAkKHBhcmVudCkuZGF0YSgnaWQnKTtcbiAgICAgICAgdmFyIG1hcF9uYW1lID0gJChwYXJlbnQpLmRhdGEoJ25hbWUnKTtcbiAgICAgICAgdmFyIG1hcF9zZXR0aW5nID0gJChwYXJlbnQpLmRhdGEoJ3NldHRpbmcnKT8gJChwYXJlbnQpLmRhdGEoJ3NldHRpbmcnKS5zcGxpdChcIixcIik6IFtdO1xuXG4gICAgICAgIHNlbGVjdGVkTWFwID0ge1xuICAgICAgICAgICAgaWQ6IG1hcF9pZCxcbiAgICAgICAgICAgIG1hcF9uYW1lOiBtYXBfbmFtZSxcbiAgICAgICAgICAgIG1hcF9zZXR0aW5nOiBtYXBfc2V0dGluZ1xuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZE1hcCk7XG4gICAgICAgICQoJyNtYXBfbmFtZScpLnZhbCggc2VsZWN0ZWRNYXAubWFwX25hbWUpO1xuXG4gICAgICAgICQoXCIjY3VzdG9tZXJfbWFwcy1tb2RhbFwiKS5tb2RhbCh7XG4gICAgICAgICAgICBmYWRlRHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgIGZhZGVEZWxheTogMC4yLFxuICAgICAgICAgICAgY2xvc2VDbGFzczogJ2ljb24tcmVtb3ZlJyxcbiAgICAgICAgICAgIGNsb3NlVGV4dDogJ1gnLFxuICAgICAgICAgICAgZXNjYXBlQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgY2xpY2tDbG9zZTogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNjdXN0b21lcl9tYXBzLW1vZGFsIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLmFkZENsYXNzKCdidXR0b24tLWdyZWVuJyk7IFxuXG4gICAgfSk7XG5cbiAgICAkKCcjY3VzdG9tZXJfbWFwcy1tb2RhbCcpLm9uKCQubW9kYWwuT1BFTiwgZnVuY3Rpb24oZXZlbnQsIG1vZGFsKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGxldCdzIGJ1aWxkIGEgbGlzdCBvZiBjdXJyZW50bHkgc2VsZWN0ZWQgY291bnRyaWVzXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtYXApO1xuICAgICAgICAgICAgZm9yICggdmFyIGkgaW4gbWFwLmRhdGFQcm92aWRlci5hcmVhcyApIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IG1hcC5kYXRhUHJvdmlkZXIuYXJlYXNbIGkgXTtcbiAgICAgICAgICAgICAgICBpZiAoIGFyZWEuc2hvd0FzU2VsZWN0ZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZWEuc2hvd0FzU2VsZWN0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHRoZSBjaGFydCB0YWtlIGluIG5ldyBjb2xvclxuICAgICAgICAgICAgICAgICAgICBhcmVhLnZhbGlkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb3VudHJpZXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPHNlbGVjdGVkTWFwLm1hcF9zZXR0aW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZWEgPSBtYXAuZ2V0T2JqZWN0QnlJZChzZWxlY3RlZE1hcC5tYXBfc2V0dGluZ1tpXSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhcmVhPT09XCIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFyZWEpO1xuICAgICAgICAgICAgICAgIGFyZWEuc2hvd0FzU2VsZWN0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgLy8gbWFrZSB0aGUgY2hhcnQgdGFrZSBpbiBuZXcgY29sb3JcbiAgICAgICAgICAgICAgICBhcmVhLnZhbGlkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb3VudHJpZXMucHVzaCggYXJlYS5pZCApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjb3VudHJpZXMpO1xuICAgICAgICB9LCA1MDApO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbG9hZF9tYXBzKCkge1xuICAgICAgICAkKCcjY3VzdG9tZXJfbWFwcyAuYmxvY2tfbWFwJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoISQodGhpcykuaGFzQ2xhc3MoJ2Jsb2NrX21hcF9uZXcnKSkge1xuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBpdGVtX2N0ID0gJyc7XG4gICAgICAgIHZhciBzZXR0aW5nID0gJyc7XG4gICAgICAgIG15TWFwcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHNldHRpbmcgPSBKU09OLnBhcnNlKGl0ZW0ubWFwX3NldHRpbmcpLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIGl0ZW1fY3QgPSAnJyArIFxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImJsb2NrX21hcFwiIGRhdGEtaWQ9XCInICsgaXRlbS5pZCArICdcIiBkYXRhLXNldHRpbmc9XCInICsgc2V0dGluZyArICdcIiBkYXRhLW5hbWU9XCInICsgaXRlbS5tYXBfbmFtZSArICdcIj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJib3hcIj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW1nIHNyYz1cIicgKyB3aW5kb3cubWFwX2ljb25fdXJsICsgJ1wiIC8+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHA+JyArIGl0ZW0ubWFwX25hbWUgKyAnPC9wPicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ2X2JvcmRlclwiPjwvZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJoX2JvcmRlclwiPjwvZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJvdmVybGFwLS1idXR0b25zXCI+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXY+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbi0tZ3JlZW4gYnV0dG9uLS1lZGl0XCI+RWRpdDwvYnV0dG9uPicrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBidXR0b24tLWRpc2FibGUgYnV0dG9uLS1kZWxldGVcIj5kZWxldGU8L2J1dHRvbj4nK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcbiAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicrXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICAkKCcjY3VzdG9tZXJfbWFwcyAubWFwLWJsb2NrcycpLmFwcGVuZChpdGVtX2N0KTsgXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgICQoJyNzYXZlLXlvdXItbWFwIGlucHV0LmJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgICBpZigkKHRoaXMpLmhhc0NsYXNzKCdidXR0b24tLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgbWFwX25hbWUgPSAkLnRyaW0oJCgnI21hcF9uYW1lJykudmFsKCkpO1xuICAgICAgICBpZihtYXBfbmFtZSA9PSBcIlwiKSB7XG4gICAgICAgICAgICAkKCcjbWFwX25hbWUnKS5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnI3NhdmUteW91ci1tYXAgLmJ1dHRvbicpLnJlbW92ZUNsYXNzKCdidXR0b24tLWdyZWVuJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKTtcblxuICAgICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGNvdW50cmllcyk7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgICAgICBtYXA6IHtcbiAgICAgICAgICAgICAgICBpZDogc2VsZWN0ZWRNYXAuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogbWFwX25hbWUsXG4gICAgICAgICAgICAgICAgc2V0dGluZzogZGF0YVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGN1c3RvbWVyX2lkOiBtZXRhLnBhZ2UuY3VzdG9tZXJJZFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHBhcmFtcyk7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogYXBpX3VybCArICcvbWFwL3NhdmUnLFxuICAgICAgICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBteU1hcHMgPSByZXNwb25zZS5kYXRhO1xuXG4gICAgICAgICAgICAgICAgJCgnI3NhdmUteW91ci1tYXAgLmJ1dHRvbicpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTtcbiAgICAgICAgICAgICAgICAkKCcjbWFwX25hbWUnKS52YWwoJycpO1xuXG4gICAgICAgICAgICAgICAgJChcIiNjdXN0b21lcl9tYXBzLW1vZGFsIGEuY2xvc2UtbW9kYWxcIiApLnRyaWdnZXIoIFwiY2xpY2tcIiApO1xuXG4gICAgICAgICAgICAgICAgbG9hZF9tYXBzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICB9KTsgXG4gICAgfSk7XG5cbiAgICAvLyBkZWxldGUgbWFwXG5cbiAgICAvLyBjbGljayBtYXBcbiAgICAkKCcjY3VzdG9tZXJfbWFwcycpLm9uKCdjbGljaycsICcuYnV0dG9uLS1kZWxldGUnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgdmFyIHBhcmVudCA9ICQodGhpcykucGFyZW50cygnLmJsb2NrX21hcCcpO1xuICAgICAgICB2YXIgbWFwX2lkID0gJChwYXJlbnQpLmRhdGEoJ2lkJyk7XG4gICAgICAgIHZhciBtYXBfbmFtZSA9ICQocGFyZW50KS5kYXRhKCduYW1lJyk7XG4gICAgICAgIHZhciBtYXBfc2V0dGluZyA9ICQocGFyZW50KS5kYXRhKCdzZXR0aW5nJyk/ICQocGFyZW50KS5kYXRhKCdzZXR0aW5nJykuc3BsaXQoXCIsXCIpOiBbXTtcblxuICAgICAgICBzZWxlY3RlZE1hcCA9IHtcbiAgICAgICAgICAgIGlkOiBtYXBfaWQsXG4gICAgICAgICAgICBtYXBfbmFtZTogbWFwX25hbWUsXG4gICAgICAgICAgICBtYXBfc2V0dGluZzogbWFwX3NldHRpbmdcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgICQoJyNkZWxldGVfeW91cl9tYXAgc3Bhbi5kZWxldGVfbWFwLS1uYW1lJykuaHRtbChtYXBfbmFtZSk7XG5cbiAgICAgICAgJChcIiNjdXN0b21lcl9tYXBzLW1vZGFsX2RlbGV0ZVwiKS5tb2RhbCh7XG4gICAgICAgICAgICBmYWRlRHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgIGZhZGVEZWxheTogMC4yLFxuICAgICAgICAgICAgY2xvc2VDbGFzczogJ2ljb24tcmVtb3ZlJyxcbiAgICAgICAgICAgIGNsb3NlVGV4dDogJ1gnLFxuICAgICAgICAgICAgZXNjYXBlQ2xvc2U6IGZhbHNlLFxuICAgICAgICAgICAgY2xpY2tDbG9zZTogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgICAkKCdhLmNhbmNlbC1tb2RhbCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICQoXCIubW9kYWwgYS5jbG9zZS1tb2RhbFwiICkudHJpZ2dlciggXCJjbGlja1wiICk7XG4gICAgfSk7XG5cbiAgICAkKCcjZGVsZXRlLXlvdXItbWFwIGlucHV0LmJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uKGUpe1xuICAgICAgICBpZigkKHRoaXMpLmhhc0NsYXNzKCdidXR0b24tLWRpc2FibGVkJykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAkKCcjZGVsZXRlLXlvdXItbWFwIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnN0cmluZ2lmeShjb3VudHJpZXMpO1xuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICAgICAgaWQ6IHNlbGVjdGVkTWFwLmlkXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3VzdG9tZXJfaWQ6IG1ldGEucGFnZS5jdXN0b21lcklkXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJwYXJhbXNcIilcbiAgICAgICAgY29uc29sZS5sb2cocGFyYW1zKTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgdXJsOiBhcGlfdXJsICsgJy9tYXAvZGVsZXRlJyxcbiAgICAgICAgICAgIGRhdGE6IHBhcmFtcyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgbXlNYXBzID0gcmVzcG9uc2UuZGF0YTtcblxuICAgICAgICAgICAgICAgICQoJyNzYXZlLXlvdXItbWFwIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLmFkZENsYXNzKCdidXR0b24tLWdyZWVuJyk7XG5cbiAgICAgICAgICAgICAgICAkKFwiI2N1c3RvbWVyX21hcHMtbW9kYWxfZGVsZXRlIGEuY2xvc2UtbW9kYWxcIiApLnRyaWdnZXIoIFwiY2xpY2tcIiApO1xuXG4gICAgICAgICAgICAgICAgbG9hZF9tYXBzKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJ1xuICAgICAgICB9KTsgXG4gICAgfSk7XG59XG5cblxuXG4iLCJpbXBvcnQgV2ViRm9udCBmcm9tICd3ZWJmb250bG9hZGVyJ1xuXG4vLyBMYXp5IGxvYWQgb2YgZm9udHMgZnJvbSBHb29nbGUsIFR5cGVraXQgYW5kIG1vcmVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90eXBla2l0L3dlYmZvbnRsb2FkZXJcbldlYkZvbnQubG9hZCh7XG4gIGdvb2dsZToge1xuICAgIGZhbWlsaWVzOiBbJ09wZW4gU2FucyddXG4gIH1cbn0pXG4iLCJpbXBvcnQgJy4vanF1ZXJ5J1xuaW1wb3J0ICcuL2ZvbnRzJ1xuaW1wb3J0ICcuL21vZGFsJ1xuaW1wb3J0ICcuL3NsaWNrJ1xuaW1wb3J0ICcuL21hcCdcbmltcG9ydCAnLi9hY2NvdW50J1xuaW1wb3J0ICcuL3Byb2R1Y3RfbWFwJ1xuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICAgLyogTmFnaWdhdGlvbiAqL1xuICAgICQoJyNuYXYtdG9nZ2xlJykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoJCh0aGlzKS5pcyhcIjpjaGVja2VkXCIpKSB7XG4gICAgICAgICAgICAkKCcuY29udGVudC13cmFwJykuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCg4OCUpJyk7XG4gICAgICAgICAgICAkKCcuaW5mb2JhcicpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoODglKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCgnLmNvbnRlbnQtd3JhcCcpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoMCknKTtcbiAgICAgICAgICAgICQoJy5pbmZvYmFyJykuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgwKScpO1xuICAgICAgICB9XG4gICAgICAgICQoJ2JvZHksIGh0bWwnKS50b2dnbGVDbGFzcygnb3ZlcmZsb3ctaGlkZGVuJyk7XG4gICAgICAgICQoJyNjLW1hc2snKS50b2dnbGVDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgfSk7XG5cbiAgICAkKCcjYy1tYXNrJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJyNvdmVybGF5JykuZmFkZU91dCgnc2xvdycpO1xuICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgJCgnI25hdi10b2dnbGUnKS5wcm9wKCdjaGVja2VkJywgZmFsc2UpO1xuICAgICAgICAkKCcuY29udGVudC13cmFwJykuY3NzKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlWCgwKScpO1xuICAgICAgICAkKCcuaW5mb2JhcicpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoMCknKTtcbiAgICB9KTtcblxuICAgICQoJ2EuaGVhZGVyX19uYXYtaXRlbS1saW5rLS1hY2NvdW50JykuY2xpY2soZnVuY3Rpb24oZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKCQod2luZG93KS53aWR0aCgpKVxuICAgICAgICBpZigkKHdpbmRvdykud2lkdGgoKSA8IDc2OCAmJiB0eXBlb2YgbWV0YS5wYWdlLmN1c3RvbWVySWQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICQoJ2xpLmhlYWRlcl9fbmF2LWl0ZW0nKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCdsaS5oZWFkZXJfX25hdi1pdGVtLWFjY291bnRzJykuc2hvdygpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCdsaS5oZWFkZXJfX25hdi1pdGVtLWFjY291bnRzLWJhY2sgYS5oZWFkZXJfX25hdi1pdGVtLWxpbmsnKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkKCdsaS5oZWFkZXJfX25hdi1pdGVtJykuc2hvdygpO1xuICAgICAgICAkKCdsaS5oZWFkZXJfX25hdi1pdGVtLWFjY291bnRzJykuaGlkZSgpO1xuICAgIH0pO1xuXG4gIC8qIEhpZGUgbW9iaWxlIG5hdiB3aGVuIHdpbmRvdyByZXNpemUgKi9cbiAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPiA3NjgpIHtcbiAgICAgICAgICAgICQoJyNvdmVybGF5JykuZmFkZU91dCgnc2xvdycpO1xuICAgICAgICAgICAgJCgnI2MtbWFzaycpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAgICQoJyNuYXYtdG9nZ2xlJykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICQoJy5jb250ZW50LXdyYXAnKS5jc3MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVYKDApJyk7XG4gICAgICAgICAgICAkKCcuaW5mb2JhcicpLmNzcygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVgoMCknKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyogUHJvZHVjdCBwYWdlIHN0YXJ0ICovXG5cbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJy5wcm9kdWN0X19pbWFnZScpLmNsb25lKCkuaW5zZXJ0QmVmb3JlKCQoJy5wcm9kdWN0X19kZXNjcmlwdGlvbicpKTtcbiAgICB9KSgpO1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcucHJvZHVjdF9faW1hZ2UtZm9yJykuc2xpY2soe1xuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGFzTmF2Rm9yOiAnLnByb2R1Y3QtdGh1bWJuYWlscycsXG4gICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICBmYWRlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICAkKCcucHJvZHVjdC10aHVtYm5haWxzJykuc2xpY2soe1xuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXG4gICAgICAgICAgICBhc05hdkZvcjogJy5wcm9kdWN0X19pbWFnZS1mb3InLFxuICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgICAgICBvdXRlckVkZ2VMaW1pdDogdHJ1ZSxcbiAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgfSkoKTtcblxuICAgICQoJy5wcm9kdWN0Jykub24oJ2NsaWNrJywgJy5zd2F0Y2gtZWxlbWVudCcsIGZ1bmN0aW9uKGUpIHsgIFxuICAgICAgICAkKHRoaXMpLnBhcmVudHMoJ3VsLnN3YXRjaCcpLmZpbmQoJ2xpLnN3YXRjaC1lbGVtZW50JykucmVtb3ZlQ2xhc3MoJ3N3YXRjaC1hY3RpdmUnKTtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnc3dhdGNoLWFjdGl2ZScpO1xuXG4gICAgICAgIHZhciBzZWxlY3RlZFNpemUgPSAkKHRoaXMpLmRhdGEoJ3ZhbHVlJyk7XG4gICAgICAgICQodGhpcykucGFyZW50cygndWwuc3dhdGNoJykuZmluZCgnLnByb2R1Y3RfX3NtYWxsLXRpdGxlIHNwYW4nKS50ZXh0KHNlbGVjdGVkU2l6ZSk7XG5cbiAgICAgICAgdmFyIG9wdGlvbl9pbmRleCA9ICQodGhpcykuZGF0YSgnaWQnKTtcblxuICAgICAgICAkKCcjcHJvZHVjdC1zZWxlY3Qtb3B0aW9uLScgKyBvcHRpb25faW5kZXgpLnZhbChzZWxlY3RlZFNpemUpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH0pO1xuXG4gICAgLyogUHJvZHVjdCBwYWdlIEVORCAqL1xuXG4gICAgLyogQ0FSVCBQYWdlIFNUQVJUKi9cblxuICAgICQoJy5idXR0b24tY29uZmlybScpLmNsaWNrKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLnRleHQoJ0NvbmZpcm1lZCcpO1xuICAgICAgICAkKCcuYnV0dG9uLWNoZWNrb3V0JykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKS5hZGRDbGFzcygnYnV0dG9uLS1ncmVlbicpO1xuICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZV9jdXJyZW5jeV9zdHJpbmcoY3VycmVuY3kpIHtcbiAgICAgICAgdmFyIGFyciA9IGN1cnJlbmN5LnNwbGl0KCcgJyk7XG4gICAgICAgIHJldHVybiBhcnJbMF07XG4gICAgfVxuICAgIFxuICAgICQoJy5jYXJ0X19xdWFudGl0eScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpdGVtSWQgPSBwYXJzZUludCgkKHRoaXMpLmF0dHIoJ2l0ZW1pZCcpKTtcbiAgICAgICAgdmFyIHF0eSA9IHBhcnNlSW50KCQodGhpcykudmFsKCkpO1xuICAgICAgICB2YXIgbG9vcGluZGV4ID0gcGFyc2VJbnQoJCh0aGlzKS5kYXRhKCdsb29waW5kZXgnKSk7XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogJy9jYXJ0L2NoYW5nZS5qcycsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgZGF0YToge3F1YW50aXR5OiBxdHksIGlkOiBpdGVtSWR9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oaXRlbURhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpdGVtRGF0YSlcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8aXRlbURhdGEuaXRlbXMubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZW1EYXRhLml0ZW1zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZihpdGVtLmlkID09IGl0ZW1JZCAmJiBpID09IGxvb3BpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NhcnRfX2xpbmVpdGVtX2xpbmVwcmljZV8nICsgaXRlbS5pZCsgJ18nICsgbG9vcGluZGV4KS50ZXh0KHJlbW92ZV9jdXJyZW5jeV9zdHJpbmcoU2hvcGlmeS5mb3JtYXRNb25leShpdGVtLmxpbmVfcHJpY2UsIHdpbmRvdy5tb25leV93aXRoX2N1cnJlbmN5X2Zvcm1hdCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQoJyNjYXJ0X19zdWJ0b3RhbC1wcmljZScpLnRleHQocmVtb3ZlX2N1cnJlbmN5X3N0cmluZyhTaG9waWZ5LmZvcm1hdE1vbmV5KGl0ZW1EYXRhLm9yaWdpbmFsX3RvdGFsX3ByaWNlLCB3aW5kb3cubW9uZXlfd2l0aF9jdXJyZW5jeV9mb3JtYXQpKSk7XG4gICAgICAgICAgICAgICAgJCgnI2NhcnRfX3RvdGFsLXByaWNlJykudGV4dChyZW1vdmVfY3VycmVuY3lfc3RyaW5nKFNob3BpZnkuZm9ybWF0TW9uZXkoaXRlbURhdGEudG90YWxfcHJpY2UsIHdpbmRvdy5tb25leV93aXRoX2N1cnJlbmN5X2Zvcm1hdCkpKTtcbiAgICAgICAgICAgICAgICAkKCcjY2FydC1jb3VudCcpLnRleHQoaXRlbURhdGEuaXRlbV9jb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIC8qIENBUlQgUGFnZSBFTkQqL1xuXG4gICAgLypJbmZvYmFyIFNUQVJUICovXG4gICAgJCgnLmJ1dHRvbi1jbG9zZScpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCcuaW5mb2JhcicpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgfSk7XG4gICAgLyogSW5mb2JhciBFbmQgKi9cbn0pO1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuXG4vLyBBZGRpbmcgalF1ZXJ5IHRvIHRoZSBnbG9iYWwgc2NvcGVcbmdsb2JhbC4kID0gZ2xvYmFsLmpRdWVyeSA9ICRcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgYXBpX3VybCA9ICdodHRwczovL25vLXNtYWxsLXBsYW4uaGVyb2t1YXBwLmNvbS9hcGknO1xuXG4gIC8qIG1hcCBwYWdlIHN0YXJ0ICovXG5cbiAgaWYoJCgnI21hcHBhbmVsJykubGVuZ3RoKSB7XG4gICAgICAgIHZhciBteU1hcHM7XG4gICAgICAgIHZhciBjdXN0b21lcklkO1xuICAgICAgICB2YXIgc2VsZWN0ZWRNYXAgPSB7XG4gICAgICAgICAgICBpZDogLTEsXG4gICAgICAgICAgICBtYXBfbmFtZTogXCJcIixcbiAgICAgICAgICAgIG1hcF9zZXR0aW5nOiBcIlwiXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYodHlwZW9mIG1ldGEucGFnZS5jdXN0b21lcklkID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjdXN0b21lcklkID0gMTtcbiAgICAgICAgICAgICQoXCIjc2lnbmluLW1vZGFsXCIpLm1vZGFsKHtcbiAgICAgICAgICAgICAgICBmYWRlRHVyYXRpb246IDEwMCxcbiAgICAgICAgICAgICAgICBmYWRlRGVsYXk6IDAuMjAsXG4gICAgICAgICAgICAgICAgY2xvc2VDbGFzczogJ2ljb24tcmVtb3ZlJyxcbiAgICAgICAgICAgICAgICBjbG9zZVRleHQ6ICdYJyxcbiAgICAgICAgICAgICAgICBlc2NhcGVDbG9zZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2xpY2tDbG9zZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VzdG9tZXJJZCA9IG1ldGEucGFnZS5jdXN0b21lcklkO1xuICAgICAgICAgICAgY29uc29sZS5sb2coY3VzdG9tZXJJZCk7XG4gICAgICAgICAgICAkLmdldEpTT04oIGFwaV91cmwgKyBcIi9tYXAvbG9hZC9cIiArIGN1c3RvbWVySWQsIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcbiAgICAgICAgICAgICAgICBpZighcmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfbG9hZCcpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgbXlNYXBzID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICQoJy5tYXBzX19idXR0b25zX2xvYWQnKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgIFxuICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKSkge1xuXG4gICAgICAgICAgICAvLyByZW1vdmUgYWxsIHNsaWRlc1xuICAgICAgICAgICAgdmFyIGNudHMgPSAkKCcubWFwcy0tc2xpZGVycyAuaXRlbScpLmxlbmd0aDtcbiAgICAgICAgICAgIGZvcih2YXIgaT1jbnRzLTE7IGk+MDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYodHlwZW9mICQoJy5tYXBzLS1zbGlkZXJzIC5pdGVtJylbaV0gIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1hcHMtLXNsaWRlcnMgLml0ZW0nKVtpXS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpdGVtX2N0ID0gJyc7XG4gICAgICAgICAgICB2YXIgc2V0dGluZyA9ICcnO1xuICAgICAgICAgICAgbXlNYXBzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgIHNldHRpbmcgPSBKU09OLnBhcnNlKGl0ZW0ubWFwX3NldHRpbmcpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgaXRlbV9jdCA9ICc8ZGl2IGNsYXNzPVwiaXRlbVwiIGRhdGEtaWQ9XCInICsgaXRlbS5pZCArICdcIiBkYXRhLXNldHRpbmc9XCInICsgc2V0dGluZyArICdcIiBkYXRhLW5hbWU9XCInICsgaXRlbS5tYXBfbmFtZSArICdcIj4nICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAnICAgPGltZyBzcmM9XCInICsgd2luZG93Lm1hcF9pY29uX3VybCArICdcIiAvPicgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGl0bGVcIj4nICsgaXRlbS5tYXBfbmFtZSArICc8L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgJCgnLm1hcHMtLXNsaWRlcnMnKS5zbGljaygnc2xpY2tBZGQnLGl0ZW1fY3QpOyBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcjbG9hZC0tbWFwcy1ibG9ja2VyJykuc2hvdygpO1xuICAgICAgICAgICAgJCgnI2xvYWQtLW1hcHMnKS5hbmltYXRlKHtib3R0b206IFwiMHB4XCJ9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAkKCcubWFwc19fYnV0dG9uc19wcm9kdWN0JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKCQoJy5tYXBzX19idXR0b25zX3Byb2R1Y3QnKS5oYXNDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcubWFwc19fYnV0dG9uc19wcm9kdWN0JykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKS5hZGRDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICAkKCcjc2VsZWN0LXByb2R1Y3QnKS5zaG93KFwic2xvd1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJCgnI3NlbGVjdC1wcm9kdWN0Jykub2Zmc2V0KCk7XG5cbiAgICAgICAgICAgICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBvZmZzZXQudG9wIH0sIFwic2xvd1wiKTsgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfc2F2ZScpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KXtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKSkge1xuXG4gICAgICAgICAgICAkKCcjbWFwX25hbWUnKS52YWwoIHNlbGVjdGVkTWFwLm1hcF9uYW1lKTtcblxuICAgICAgICAgICAgJChcIiNzaWduaW4tbW9kYWxcIikubW9kYWwoe1xuICAgICAgICAgICAgICAgIGZhZGVEdXJhdGlvbjogMTAwLFxuICAgICAgICAgICAgICAgIGZhZGVEZWxheTogMC4yMCxcbiAgICAgICAgICAgICAgICBjbG9zZUNsYXNzOiAnaWNvbi1yZW1vdmUnLFxuICAgICAgICAgICAgICAgIGNsb3NlVGV4dDogJ1gnLFxuICAgICAgICAgICAgICAgIGVzY2FwZUNsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjbGlja0Nsb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCcubWFwcy0tc2xpZGVycycpLnNsaWNrKHtcbiAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA1LFxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTE5OSxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3NjgsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNDgwLFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBZb3UgY2FuIHVuc2xpY2sgYXQgYSBnaXZlbiBicmVha3BvaW50IG5vdyBieSBhZGRpbmc6XG4gICAgICAgICAgICAgICAgLy8gc2V0dGluZ3M6IFwidW5zbGlja1wiXG4gICAgICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiBhIHNldHRpbmdzIG9iamVjdFxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcblxuICAgICAgICAkKCcuY291bnRyeV9saXN0LWhlYWRlciB1bCcpLnNsaWNrKHtcbiAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNixcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA2LFxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiA1XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA5OTIsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY4LFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiB1bnNsaWNrIGF0IGEgZ2l2ZW4gYnJlYWtwb2ludCBub3cgYnkgYWRkaW5nOlxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmdzOiBcInVuc2xpY2tcIlxuICAgICAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgYSBzZXR0aW5ncyBvYmplY3RcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmxvYWQtLW1hcHNfY2xvc2UnKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICQoJyNsb2FkLS1tYXBzLWJsb2NrZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCcjbG9hZC0tbWFwcycpLmFuaW1hdGUoe2JvdHRvbTogXCItMTUwMHB4XCJ9LCA1MDApO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCcubWFwcy0tc2xpZGVycycpLm9uKCdjbGljaycsICcuaXRlbScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgdmFyIG1hcF9pZCA9ICQodGhpcykuZGF0YSgnaWQnKTtcbiAgICAgICAgICAgIHZhciBtYXBfbmFtZSA9ICQodGhpcykuZGF0YSgnbmFtZScpO1xuICAgICAgICAgICAgdmFyIG1hcF9zZXR0aW5nID0gJCh0aGlzKS5kYXRhKCdzZXR0aW5nJyk/ICQodGhpcykuZGF0YSgnc2V0dGluZycpLnNwbGl0KFwiLFwiKTogW107XG5cblxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhcmVhID0gbWFwLmdldE9iamVjdEJ5SWQoY291bnRyaWVzW2ldKTtcbiAgICAgICAgICAgICAgICBhcmVhLnNob3dBc1NlbGVjdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoZSBjaGFydCB0YWtlIGluIG5ldyBjb2xvclxuICAgICAgICAgICAgICAgIGFyZWEudmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY291bnRyaWVzID0gW107XG5cblxuICAgICAgICAgICAgZm9yIChsZXQgaT0wOyBpPG1hcF9zZXR0aW5nLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgYXJlYSA9IG1hcC5nZXRPYmplY3RCeUlkKG1hcF9zZXR0aW5nW2ldKTtcbiAgICAgICAgICAgICAgICBhcmVhLnNob3dBc1NlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIG1ha2UgdGhlIGNoYXJ0IHRha2UgaW4gbmV3IGNvbG9yXG4gICAgICAgICAgICAgICAgYXJlYS52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgY291bnRyaWVzLnB1c2goIGFyZWEuaWQgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc29sZS5sb2coY291bnRyaWVzKTtcblxuICAgICAgICAgICAgc2VsZWN0ZWRNYXAgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG1hcF9pZCxcbiAgICAgICAgICAgICAgICBtYXBfbmFtZTogbWFwX25hbWUsXG4gICAgICAgICAgICAgICAgbWFwX3NldHRpbmc6IG1hcF9zZXR0aW5nXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkKCcubG9hZC0tbWFwc19jbG9zZScpLnRyaWdnZXIoJ2NsaWNrJyk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkTWFwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfc2F2ZScpLnJlbW92ZUNsYXNzKCdidXR0b24tLWdyZWVuJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGlmKCQoJy5tYXBzX19idXR0b25zX3Byb2R1Y3QnKS5oYXNDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfcHJvZHVjdCcpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJChcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCBcInNsb3dcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPHdpbmRvdy5tYXBfY291bnRyaWVzLmxlbmd0aC0xO2krKykge1xuICAgICAgICAgICAgdmFyIGNvdW50cnlfb2JqID0gd2luZG93Lm1hcF9jb3VudHJpZXNbaV07XG4gICAgICAgICAgICBpZihjb3VudHJ5X29iai5hcmVhKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgdG1wX2FyZWEgPSBjb3VudHJ5X29iai5hcmVhLnJlcGxhY2UoJyAnLCAnJyk7XG4gICAgICAgICAgICAgICAgJCgndWwuYXJlYS0nICsgdG1wX2FyZWEpLmFwcGVuZCgnPGxpIGRhdGEtbmFtZT1cIicgKyBjb3VudHJ5X29iai5uYW1lICsgJ1wiIGRhdGEtY29kZT1cIicgKyBjb3VudHJ5X29iai5jb2RlICsgJ1wiIGRhdGEtYXJlYT1cIicgKyBjb3VudHJ5X29iai5hcmVhICsgJ1wiPjxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgLz4nICsgY291bnRyeV9vYmoubmFtZSArICc8L2xhYmVsPjwvbGk+JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgLyogbWFwIHBhZ2UgZW5kICovXG5cbiAgICAgICAgLyogc2lnbmluIG1vZGFsIHN0YXJ0ICovXG4gICAgICAgICQoJyNzaWduaW4tbW9kYWwgI2N1c3RvbWVyX2xvZ2luJykuc3VibWl0KCBmdW5jdGlvbihlKXtcblxuICAgICAgICAgICAgaWYoJCgnI2N1c3RvbWVyX2xvZ2luIC5idXR0b24nKS5oYXNDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgcmFuZG51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAxKTtcblxuICAgICAgICAgICAgdmFyIGN1c3RvbWVyX2VtYWlsID0gJC50cmltKCQoJyNjdXN0b21lcl9lbWFpbCcpLnZhbCgpKTtcbiAgICAgICAgICAgIHZhciBjdXN0b21lcl9wYXNzd29yZCA9ICQudHJpbSgkKCcjY3VzdG9tZXJfcGFzc3dvcmQnKS52YWwoKSk7XG4gICAgICAgICAgICBpZihjdXN0b21lcl9lbWFpbCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgJCgnI2N1c3RvbWVyX2VtYWlsJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihjdXN0b21lcl9wYXNzd29yZCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgJCgnI2N1c3RvbWVyX3Bhc3N3b3JkJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoJyNjdXN0b21lcl9sb2dpbiAuYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKS5hZGRDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIHVybDogXCIvYWNjb3VudC9sb2dpblwiLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiAkKCcjY3VzdG9tZXJfbG9naW4nKS5zZXJpYWxpemUoKSArIFwiJnJhbmRvbT1cIiArIHJhbmRudW0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oaHRtbCl7ICBcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gJChodG1sKS5maW5kKCcjY3VzdG9tZXJfZGV0YWlsJykuaHRtbCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJyNjdXN0b21lcl9sb2dpbiAuYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKS5hZGRDbGFzcygnYnV0dG9uLS1ncmVlbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjdXN0b21lcl9sb2dpbiAuZXJyb3JzJykuaHRtbCgnPHVsPjxsaT5JbnZhbGlkIGxvZ2luIGNyZWRlbnRpYWxzLjwvbGk+PC91bD4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNjdXN0b21lcl9sb2dpbiAuZXJyb3JzJykuc2xpZGVEb3duKCdzbG93Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1ldGEpO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVjb3Zlcl9jdXN0b21lcl9wYXNzd29yZFxuICAgICAgICAkKCcjc2lnbmluLW1vZGFsICNyZWNvdmVyLXBhc3N3b3JkIGZvcm0nKS5zdWJtaXQoZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZigkKCcjcmVjb3Zlci1wYXNzd29yZCBmb3JtIC5idXR0b24nKS5oYXNDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgcmFuZG51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAxKTtcblxuICAgICAgICAgICAgdmFyIHJlY292ZXJfZW1haWwgPSAkLnRyaW0oJCgnI3JlY292ZXJfZW1haWwnKS52YWwoKSk7XG4gICAgICAgICAgICBpZihyZWNvdmVyX2VtYWlsID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAkKCcjcmVjb3Zlcl9lbWFpbCcpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcjcmVjb3Zlci1wYXNzd29yZCBmb3JtIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7XG5cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9hY2NvdW50L3JlY292ZXJcIixcbiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGF0YTogJCgnI3JlY292ZXItcGFzc3dvcmQgZm9ybScpLnNlcmlhbGl6ZSgpICsgXCImcmFuZG9tPVwiICsgcmFuZG51bSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihodG1sKXsgIFxuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAkKGh0bWwpLmZpbmQoJyNyZWNvdmVyLXBhc3N3b3JkIGZvcm0gLmVycm9ycycpLmh0bWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjcmVjb3Zlci1wYXNzd29yZCBmb3JtIC5idXR0b24nKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLmFkZENsYXNzKCdidXR0b24tLWdyZWVuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3JlY292ZXJfZW1haWwnKS52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVjb3Zlci1wYXNzd29yZCcpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICdoaWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwLCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2N1c3RvbWVyX2xvZ2luIC5lcnJvcnMnKS5odG1sKCcnKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2N1c3RvbWVyJykuZmFkZUluKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVjb3Zlci1wYXNzd29yZCBmb3JtIC5lcnJvcnMnKS5odG1sKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVjb3Zlci1wYXNzd29yZCBmb3JtIC5lcnJvcnMnKS5zbGlkZURvd24oJ3Nsb3cnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCcjc2F2ZS15b3VyLW1hcCBpbnB1dC5idXR0b24nKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKCQodGhpcykuaGFzQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YXIgbWFwX25hbWUgPSAkLnRyaW0oJCgnI21hcF9uYW1lJykudmFsKCkpO1xuICAgICAgICAgICAgaWYobWFwX25hbWUgPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICQoJyNtYXBfbmFtZScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcjc2F2ZS15b3VyLW1hcCAuYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKS5hZGRDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGNvdW50cmllcyk7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG1hcDoge1xuICAgICAgICAgICAgICAgICAgICBpZDogc2VsZWN0ZWRNYXAuaWQsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1hcF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nOiBkYXRhXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjdXN0b21lcl9pZDogbWV0YS5wYWdlLmN1c3RvbWVySWRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNlbGVjdGVkTWFwLm1hcF9uYW1lID0gbWFwX25hbWUsXG4gICAgICAgICAgICBzZWxlY3RlZE1hcC5tYXBfc2V0dGluZyA9IGNvdW50cmllcztcblxuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgdXJsOiBhcGlfdXJsICsgJy9tYXAvc2F2ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIG15TWFwcyA9IHJlc3BvbnNlLmRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0ZWRNYXAuaWQgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTWFwLmlkID0gbXlNYXBzW215TWFwcy5sZW5ndGgtMV0uaWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAkKCcjc2F2ZS15b3VyLW1hcCAuYnV0dG9uJykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKS5hZGRDbGFzcygnYnV0dG9uLS1ncmVlbicpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjbWFwX25hbWUnKS52YWwoJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCQoJy5tYXBzX19idXR0b25zX2xvYWQnKS5oYXNDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcubWFwc19fYnV0dG9uc19sb2FkJykucmVtb3ZlQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKS5hZGRDbGFzcygnYnV0dG9uLS1ncmVlbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfc2F2ZScpLnJlbW92ZUNsYXNzKCdidXR0b24tLWdyZWVuJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfcHJvZHVjdCcpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCBcIiNzaWduaW4tbW9kYWwgYS5jbG9zZS1tb2RhbFwiICkudHJpZ2dlciggXCJjbGlja1wiICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nXG4gICAgICAgICAgICB9KTsgXG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJCgnI3JlZ2lzdGVyLWFjY291bnQnKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnI2N1c3RvbWVyJykuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogJ2hpZGUnXG4gICAgICAgICAgICB9LCAxMDAsICdsaW5lYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKCcjY3JlYXRlLWN1c3RvbWVyJykuZmFkZUluKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnI3JldHVybi1zaWduaW4nKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnI2NyZWF0ZS1jdXN0b21lcicpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICdoaWRlJ1xuICAgICAgICAgICAgfSwgMTAwLCAnbGluZWFyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCgnI2N1c3RvbWVyJykuZmFkZUluKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnI2ZvcmdvdF9wYXNzd29yZCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKCcjY3VzdG9tZXInKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAnaGlkZSdcbiAgICAgICAgICAgIH0sIDEwMCwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJyNyZWNvdmVyLXBhc3N3b3JkJykuZmFkZUluKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnI2NhbmNlbC1mb3Jnb3QnKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCgnI3JlY292ZXItcGFzc3dvcmQnKS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAnaGlkZSdcbiAgICAgICAgICAgIH0sIDEwMCwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJyNjdXN0b21lcicpLmZhZGVJbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiBzaWduaW4gbW9kYWwgZW5kICovXG5cbiAgICAgICAgLy8vLy8vLiBjb3VudHJ5IGxpc3QgLSBpbnRlZ3JhdGlvbiAvLy8vLy8vLy8vLy9cblxuICAgICAgICAkKCcuY291bnRyeV9saXN0LWhlYWRlciBsaScpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgcmVsID0gJCh0aGlzKS5kYXRhKCdyZWwnKTtcblxuICAgICAgICAgICAgJCgnLmNvdW50cnlfbGlzdC1ib2R5IHVsJykuaGlkZSgpO1xuICAgICAgICAgICAgJCgnLmNvdW50cnlfbGlzdC1ib2R5IHVsLmFyZWEtJyArIHJlbCkuc2hvdygpO1xuICAgICAgICB9KSAgXG5cbiAgICAgICAgJCgnLmNvdW50cnlfbGlzdC1ib2R5IGxpIGxhYmVsJykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gJCh0aGlzKS5maW5kKCdpbnB1dCcpLnByb3AoJ2NoZWNrZWQnKTtcblxuICAgICAgICAgICAgdmFyIG1hcF9pZCA9ICQodGhpcykucGFyZW50KCkuZGF0YSgnY29kZScpO1xuICAgICAgICAgICAgdmFyIGFyZWEgPSBtYXAuZ2V0T2JqZWN0QnlJZChtYXBfaWQpO1xuICAgICAgICAgICAgaWYoY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGFyZWEuc2hvd0FzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGNvdW50cmllcy5pbmRleE9mKGFyZWEuaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXMucHVzaCggYXJlYS5pZCApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhcmVhLnNob3dBc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gY291bnRyaWVzLmluZGV4T2YoYXJlYS5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnRyaWVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYWtlIHRoZSBjaGFydCB0YWtlIGluIG5ldyBjb2xvclxuICAgICAgICAgICAgYXJlYS52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICBpZihjb3VudHJpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJCgnLm1hcHNfX2J1dHRvbnNfc2F2ZScpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTsgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJy5tYXBzX19idXR0b25zX3NhdmUnKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7IFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZigkKCcubWFwc19fYnV0dG9uc19wcm9kdWN0JykuaGFzQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKSkge1xuICAgICAgICAgICAgICAgICQoJy5tYXBzX19idXR0b25zX3Byb2R1Y3QnKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vLy8vLy4gcHJvZHVjdHMgLSBpbnRlZ3JhdGlvbiAvLy8vLy8vLy8vLy9cbiAgICAgICAgJCgnI3NlbGVjdC1wcm9kdWN0IGEucHJvZHVjdHMtaXRlbV9fbGluaycpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICB2YXIgcHJvZHVjdF9pZCA9ICQodGhpcykuZGF0YSgnaWQnKTtcbiAgICAgICAgICAgIHZhciBwcm9kdWN0X3VybCA9ICQodGhpcykuZGF0YSgndXJsJyk7XG5cbiAgICAgICAgICAgICQoJyNzZWxlY3RlZC1wcm9kdWN0Jykuc2hvdyhcInNsb3dcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9ICQoJyNzZWxlY3RlZC1wcm9kdWN0Jykub2Zmc2V0KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJChcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogb2Zmc2V0LnRvcCB9LCBcInNsb3dcIik7IFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJHRVRcIixcbiAgICAgICAgICAgICAgICB1cmw6IHByb2R1Y3RfdXJsLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihodG1sKXsgIFxuXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAkKGh0bWwpLmZpbmQoJ3NlY3Rpb24ucHJvZHVjdCcpLmh0bWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcjcHJvZHVjdC12aWV3LXBhbmVsJykuaHRtbChyZXN1bHQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSAnYWRkIHlvdXIgbWFwJyBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgJCgnI3Byb2R1Y3Qtdmlldy1wYW5lbCAucHJvZHVjdF9fY29udGVudCAuYnV0dG9uLS1hZGRfeW91cl9tYXAnKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRyeV9uYW1lcyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE1hcC5tYXBfc2V0dGluZy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTx3aW5kb3cubWFwX2NvdW50cmllcy5sZW5ndGgtMTtpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpdGVtID09IHdpbmRvdy5tYXBfY291bnRyaWVzW2ldLmNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeV9uYW1lcyArPSB3aW5kb3cubWFwX2NvdW50cmllc1tpXS5uYW1lICsgJywgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoY291bnRyeV9uYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY291bnRyeV9uYW1lcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5X25hbWVzID0gY291bnRyeV9uYW1lcy5zdWJzdHJpbmcoMCwgY291bnRyeV9uYW1lcy5sZW5ndGggLSAyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI21hcF9uYW1lX2xpbmVpdGVtJykudmFsKHNlbGVjdGVkTWFwLm1hcF9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtYXBfY291bnRyaWVzX2xpbmVpdGVtJykudmFsKGNvdW50cnlfbmFtZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcuYWNjb3JkZW9uX190YWItLW1hcCBwJykudGV4dChjb3VudHJ5X25hbWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5hY2NvcmRlb25fX3RhYi0tbWFwJykuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhwYW5kIGRldGFpbCB0YWIgYXMgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmFjY29yZGVvbl9fdGFiLmFjY29yZGVvbl9fdGFiLS1tYXAgbGFiZWwnKS50cmlnZ2VyKCdjbGljaycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjYWRkLXRvLWNhcnQnKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLmFkZENsYXNzKCdidXR0b24tLWdyZWVuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKiBQcm9kdWN0IHBhZ2Ugc3RhcnQgKi9cblxuICAgICAgICAgICAgICAgICAgICAkKCcucHJvZHVjdF9faW1hZ2UnKS5jbG9uZSgpLmluc2VydEJlZm9yZSgkKCcucHJvZHVjdF9fZGVzY3JpcHRpb24nKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgJCgnLnByb2R1Y3RfX2ltYWdlLWZvcicpLnNsaWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhc05hdkZvcjogJy5wcm9kdWN0LXRodW1ibmFpbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFkZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAkKCcucHJvZHVjdC10aHVtYm5haWxzJykuc2xpY2soe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBhc05hdkZvcjogJy5wcm9kdWN0X19pbWFnZS1mb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyogUHJvZHVjdCBwYWdlIEVORCAqL1xuXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTaG9waWZ5Lk9wdGlvblNlbGVjdG9ycyhcInByb2R1Y3Qtc2VsZWN0XCIsIHsgcHJvZHVjdDogd2luZG93LnByb2R1Y3RfanNvbiwgb25WYXJpYW50U2VsZWN0ZWQ6IHNlbGVjdENhbGxiYWNrIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxufSk7XG4iLCIvKlxuICAgIEEgc2ltcGxlIGpRdWVyeSBtb2RhbCAoaHR0cDovL2dpdGh1Yi5jb20va3lsZWZveC9qcXVlcnktbW9kYWwpXG4gICAgVmVyc2lvbiAwLjguMlxuKi9cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIC8vIE1ha2luZyB5b3VyIGpRdWVyeSBwbHVnaW4gd29yayBiZXR0ZXIgd2l0aCBucG0gdG9vbHNcbiAgLy8gaHR0cDovL2Jsb2cubnBtanMub3JnL3Bvc3QvMTEyNzEyMTY5ODMwL21ha2luZy15b3VyLWpxdWVyeS1wbHVnaW4td29yay1iZXR0ZXItd2l0aC1ucG1cbiAgaWYodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBmYWN0b3J5KHJlcXVpcmUoXCJqcXVlcnlcIiksIHdpbmRvdywgZG9jdW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIGZhY3RvcnkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiAgfVxufShmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuICB2YXIgbW9kYWxzID0gW10sXG4gICAgICBnZXRDdXJyZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtb2RhbHMubGVuZ3RoID8gbW9kYWxzW21vZGFscy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgICB9LFxuICAgICAgc2VsZWN0Q3VycmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGZvciAoaT1tb2RhbHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICAgIGlmIChtb2RhbHNbaV0uJGJsb2NrZXIpIHtcbiAgICAgICAgICAgIG1vZGFsc1tpXS4kYmxvY2tlci50b2dnbGVDbGFzcygnY3VycmVudCcsIXNlbGVjdGVkKS50b2dnbGVDbGFzcygnYmVoaW5kJyxzZWxlY3RlZCk7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICQubW9kYWwgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciByZW1vdmUsIHRhcmdldDtcbiAgICB0aGlzLiRib2R5ID0gJCgnYm9keScpO1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLm1vZGFsLmRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMuZG9GYWRlID0gIWlzTmFOKHBhcnNlSW50KHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24sIDEwKSk7XG4gICAgdGhpcy4kYmxvY2tlciA9IG51bGw7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZUV4aXN0aW5nKVxuICAgICAgd2hpbGUgKCQubW9kYWwuaXNBY3RpdmUoKSlcbiAgICAgICAgJC5tb2RhbC5jbG9zZSgpOyAvLyBDbG9zZSBhbnkgb3BlbiBtb2RhbHMuXG4gICAgbW9kYWxzLnB1c2godGhpcyk7XG4gICAgaWYgKGVsLmlzKCdhJykpIHtcbiAgICAgIHRhcmdldCA9IGVsLmF0dHIoJ2hyZWYnKTtcbiAgICAgIHRoaXMuYW5jaG9yID0gZWw7XG4gICAgICAvL1NlbGVjdCBlbGVtZW50IGJ5IGlkIGZyb20gaHJlZlxuICAgICAgaWYgKC9eIy8udGVzdCh0YXJnZXQpKSB7XG4gICAgICAgIHRoaXMuJGVsbSA9ICQodGFyZ2V0KTtcbiAgICAgICAgaWYgKHRoaXMuJGVsbS5sZW5ndGggIT09IDEpIHJldHVybiBudWxsO1xuICAgICAgICB0aGlzLiRib2R5LmFwcGVuZCh0aGlzLiRlbG0pO1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIC8vQUpBWFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxtID0gJCgnPGRpdj4nKTtcbiAgICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy4kZWxtKTtcbiAgICAgICAgcmVtb3ZlID0gZnVuY3Rpb24oZXZlbnQsIG1vZGFsKSB7IG1vZGFsLmVsbS5yZW1vdmUoKTsgfTtcbiAgICAgICAgdGhpcy5zaG93U3Bpbm5lcigpO1xuICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9TRU5EKTtcbiAgICAgICAgJC5nZXQodGFyZ2V0KS5kb25lKGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSkgcmV0dXJuO1xuICAgICAgICAgIGVsLnRyaWdnZXIoJC5tb2RhbC5BSkFYX1NVQ0NFU1MpO1xuICAgICAgICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xuICAgICAgICAgIGN1cnJlbnQuJGVsbS5lbXB0eSgpLmFwcGVuZChodG1sKS5vbigkLm1vZGFsLkNMT1NFLCByZW1vdmUpO1xuICAgICAgICAgIGN1cnJlbnQuaGlkZVNwaW5uZXIoKTtcbiAgICAgICAgICBjdXJyZW50Lm9wZW4oKTtcbiAgICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9DT01QTEVURSk7XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWwudHJpZ2dlcigkLm1vZGFsLkFKQVhfRkFJTCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnQgPSBnZXRDdXJyZW50KCk7XG4gICAgICAgICAgY3VycmVudC5oaWRlU3Bpbm5lcigpO1xuICAgICAgICAgIG1vZGFscy5wb3AoKTsgLy8gcmVtb3ZlIGV4cGVjdGVkIG1vZGFsIGZyb20gdGhlIGxpc3RcbiAgICAgICAgICBlbC50cmlnZ2VyKCQubW9kYWwuQUpBWF9DT01QTEVURSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbG0gPSBlbDtcbiAgICAgIHRoaXMuJGJvZHkuYXBwZW5kKHRoaXMuJGVsbSk7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgJC5tb2RhbC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6ICQubW9kYWwsXG5cbiAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtID0gdGhpcztcbiAgICAgIHRoaXMuYmxvY2soKTtcbiAgICAgIC8vIHRoaXMuYW5jaG9yLmJsdXIoKTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5kb0ZhZGUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBtLnNob3coKTtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmZhZGVEdXJhdGlvbiAqIHRoaXMub3B0aW9ucy5mYWRlRGVsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgICAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24ubW9kYWwnKS5vbigna2V5ZG93bi5tb2RhbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gZ2V0Q3VycmVudCgpO1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDI3ICYmIGN1cnJlbnQub3B0aW9ucy5lc2NhcGVDbG9zZSkgY3VycmVudC5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrQ2xvc2UpXG4gICAgICAgIHRoaXMuJGJsb2NrZXIuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgICQubW9kYWwuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIG1vZGFscy5wb3AoKTtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSlcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCdrZXlkb3duLm1vZGFsJyk7XG4gICAgfSxcblxuICAgIGJsb2NrOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQkVGT1JFX0JMT0NLLCBbdGhpcy5fY3R4KCldKTtcbiAgICAgIHRoaXMuJGJvZHkuY3NzKCdvdmVyZmxvdycsJ2hpZGRlbicpO1xuICAgICAgdGhpcy4kYmxvY2tlciA9ICQoJzxkaXYgY2xhc3M9XCInICsgdGhpcy5vcHRpb25zLmJsb2NrZXJDbGFzcyArICcgYmxvY2tlciBjdXJyZW50XCI+PC9kaXY+JykuYXBwZW5kVG8odGhpcy4kYm9keSk7XG4gICAgICBzZWxlY3RDdXJyZW50KCk7XG4gICAgICBpZih0aGlzLm9wdGlvbnMuZG9GYWRlKSB7XG4gICAgICAgIHRoaXMuJGJsb2NrZXIuY3NzKCdvcGFjaXR5JywwKS5hbmltYXRlKHtvcGFjaXR5OiAxfSwgdGhpcy5vcHRpb25zLmZhZGVEdXJhdGlvbik7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkJMT0NLLCBbdGhpcy5fY3R4KCldKTtcbiAgICB9LFxuXG4gICAgdW5ibG9jazogZnVuY3Rpb24obm93KSB7XG4gICAgICBpZiAoIW5vdyAmJiB0aGlzLm9wdGlvbnMuZG9GYWRlKVxuICAgICAgICB0aGlzLiRibG9ja2VyLmZhZGVPdXQodGhpcy5vcHRpb25zLmZhZGVEdXJhdGlvbiwgdGhpcy51bmJsb2NrLmJpbmQodGhpcyx0cnVlKSk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy4kYmxvY2tlci5jaGlsZHJlbigpLmFwcGVuZFRvKHRoaXMuJGJvZHkpO1xuICAgICAgICB0aGlzLiRibG9ja2VyLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLiRibG9ja2VyID0gbnVsbDtcbiAgICAgICAgc2VsZWN0Q3VycmVudCgpO1xuICAgICAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSlcbiAgICAgICAgICB0aGlzLiRib2R5LmNzcygnb3ZlcmZsb3cnLCcnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvdzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkJFRk9SRV9PUEVOLCBbdGhpcy5fY3R4KCldKTtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0Nsb3NlKSB7XG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b24gPSAkKCc8YSBocmVmPVwiI2Nsb3NlLW1vZGFsXCIgcmVsPVwibW9kYWw6Y2xvc2VcIiBjbGFzcz1cImNsb3NlLW1vZGFsICcgKyB0aGlzLm9wdGlvbnMuY2xvc2VDbGFzcyArICdcIj4nICsgdGhpcy5vcHRpb25zLmNsb3NlVGV4dCArICc8L2E+Jyk7XG4gICAgICAgIHRoaXMuJGVsbS5hcHBlbmQodGhpcy5jbG9zZUJ1dHRvbik7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbG0uYWRkQ2xhc3ModGhpcy5vcHRpb25zLm1vZGFsQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGJsb2NrZXIpO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmRvRmFkZSkge1xuICAgICAgICB0aGlzLiRlbG0uY3NzKCdvcGFjaXR5JywwKS5zaG93KCkuYW5pbWF0ZSh7b3BhY2l0eTogMX0sIHRoaXMub3B0aW9ucy5mYWRlRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWxtLnNob3coKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuT1BFTiwgW3RoaXMuX2N0eCgpXSk7XG4gICAgfSxcblxuICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWxtLnRyaWdnZXIoJC5tb2RhbC5CRUZPUkVfQ0xPU0UsIFt0aGlzLl9jdHgoKV0pO1xuICAgICAgaWYgKHRoaXMuY2xvc2VCdXR0b24pIHRoaXMuY2xvc2VCdXR0b24ucmVtb3ZlKCk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmRvRmFkZSkge1xuICAgICAgICB0aGlzLiRlbG0uZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZUR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQUZURVJfQ0xPU0UsIFtfdGhpcy5fY3R4KCldKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbG0uaGlkZSgwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuJGVsbS50cmlnZ2VyKCQubW9kYWwuQUZURVJfQ0xPU0UsIFtfdGhpcy5fY3R4KCldKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbG0udHJpZ2dlcigkLm1vZGFsLkNMT1NFLCBbdGhpcy5fY3R4KCldKTtcbiAgICB9LFxuXG4gICAgc2hvd1NwaW5uZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd1NwaW5uZXIpIHJldHVybjtcbiAgICAgIHRoaXMuc3Bpbm5lciA9IHRoaXMuc3Bpbm5lciB8fCAkKCc8ZGl2IGNsYXNzPVwiJyArIHRoaXMub3B0aW9ucy5tb2RhbENsYXNzICsgJy1zcGlubmVyXCI+PC9kaXY+JylcbiAgICAgICAgLmFwcGVuZCh0aGlzLm9wdGlvbnMuc3Bpbm5lckh0bWwpO1xuICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy5zcGlubmVyKTtcbiAgICAgIHRoaXMuc3Bpbm5lci5zaG93KCk7XG4gICAgfSxcblxuICAgIGhpZGVTcGlubmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNwaW5uZXIpIHRoaXMuc3Bpbm5lci5yZW1vdmUoKTtcbiAgICB9LFxuXG4gICAgLy9SZXR1cm4gY29udGV4dCBmb3IgY3VzdG9tIGV2ZW50c1xuICAgIF9jdHg6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHsgZWxtOiB0aGlzLiRlbG0sICRlbG06IHRoaXMuJGVsbSwgJGJsb2NrZXI6IHRoaXMuJGJsb2NrZXIsIG9wdGlvbnM6IHRoaXMub3B0aW9ucyB9O1xuICAgIH1cbiAgfTtcblxuICAkLm1vZGFsLmNsb3NlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoISQubW9kYWwuaXNBY3RpdmUoKSkgcmV0dXJuO1xuICAgIGlmIChldmVudCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgY3VycmVudCA9IGdldEN1cnJlbnQoKTtcbiAgICBjdXJyZW50LmNsb3NlKCk7XG4gICAgcmV0dXJuIGN1cnJlbnQuJGVsbTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGlmIHRoZXJlIGN1cnJlbnRseSBpcyBhbiBhY3RpdmUgbW9kYWxcbiAgJC5tb2RhbC5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9kYWxzLmxlbmd0aCA+IDA7XG4gIH07XG5cbiAgJC5tb2RhbC5nZXRDdXJyZW50ID0gZ2V0Q3VycmVudDtcblxuICAkLm1vZGFsLmRlZmF1bHRzID0ge1xuICAgIGNsb3NlRXhpc3Rpbmc6IHRydWUsXG4gICAgZXNjYXBlQ2xvc2U6IHRydWUsXG4gICAgY2xpY2tDbG9zZTogdHJ1ZSxcbiAgICBjbG9zZVRleHQ6ICdDbG9zZScsXG4gICAgY2xvc2VDbGFzczogJycsXG4gICAgbW9kYWxDbGFzczogXCJtb2RhbFwiLFxuICAgIGJsb2NrZXJDbGFzczogXCJqcXVlcnktbW9kYWxcIixcbiAgICBzcGlubmVySHRtbDogbnVsbCxcbiAgICBzaG93U3Bpbm5lcjogdHJ1ZSxcbiAgICBzaG93Q2xvc2U6IHRydWUsXG4gICAgZmFkZUR1cmF0aW9uOiBudWxsLCAgIC8vIE51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhlIGZhZGUgYW5pbWF0aW9uIHRha2VzLlxuICAgIGZhZGVEZWxheTogMS4wICAgICAgICAvLyBQb2ludCBkdXJpbmcgdGhlIG92ZXJsYXkncyBmYWRlLWluIHRoYXQgdGhlIG1vZGFsIGJlZ2lucyB0byBmYWRlIGluICguNSA9IDUwJSwgMS41ID0gMTUwJSwgZXRjLilcbiAgfTtcblxuICAvLyBFdmVudCBjb25zdGFudHNcbiAgJC5tb2RhbC5CRUZPUkVfQkxPQ0sgPSAnbW9kYWw6YmVmb3JlLWJsb2NrJztcbiAgJC5tb2RhbC5CTE9DSyA9ICdtb2RhbDpibG9jayc7XG4gICQubW9kYWwuQkVGT1JFX09QRU4gPSAnbW9kYWw6YmVmb3JlLW9wZW4nO1xuICAkLm1vZGFsLk9QRU4gPSAnbW9kYWw6b3Blbic7XG4gICQubW9kYWwuQkVGT1JFX0NMT1NFID0gJ21vZGFsOmJlZm9yZS1jbG9zZSc7XG4gICQubW9kYWwuQ0xPU0UgPSAnbW9kYWw6Y2xvc2UnO1xuICAkLm1vZGFsLkFGVEVSX0NMT1NFID0gJ21vZGFsOmFmdGVyLWNsb3NlJztcbiAgJC5tb2RhbC5BSkFYX1NFTkQgPSAnbW9kYWw6YWpheDpzZW5kJztcbiAgJC5tb2RhbC5BSkFYX1NVQ0NFU1MgPSAnbW9kYWw6YWpheDpzdWNjZXNzJztcbiAgJC5tb2RhbC5BSkFYX0ZBSUwgPSAnbW9kYWw6YWpheDpmYWlsJztcbiAgJC5tb2RhbC5BSkFYX0NPTVBMRVRFID0gJ21vZGFsOmFqYXg6Y29tcGxldGUnO1xuXG4gICQuZm4ubW9kYWwgPSBmdW5jdGlvbihvcHRpb25zKXtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIG5ldyAkLm1vZGFsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBdXRvbWF0aWNhbGx5IGJpbmQgbGlua3Mgd2l0aCByZWw9XCJtb2RhbDpjbG9zZVwiIHRvLCB3ZWxsLCBjbG9zZSB0aGUgbW9kYWwuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5tb2RhbCcsICdhW3JlbH49XCJtb2RhbDpjbG9zZVwiXScsICQubW9kYWwuY2xvc2UpO1xuICAkKGRvY3VtZW50KS5vbignY2xpY2subW9kYWwnLCAnYVtyZWx+PVwibW9kYWw6b3BlblwiXScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAkKHRoaXMpLm1vZGFsKCk7XG4gIH0pO1xufSkpOyIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFwaV91cmwgPSAnaHR0cHM6Ly9uby1zbWFsbC1wbGFuLmhlcm9rdWFwcC5jb20vYXBpJztcblxuICAgIGlmKCQoJy5idXR0b24tLWFkZF95b3VyX21hcCcpLmxlbmd0aCkge1xuXHQgIFx0LyogbWFwIHBhZ2Ugc3RhcnQgKi9cblxuXHQgICAgdmFyIG15TWFwcyA9IFtdO1xuXHQgICAgdmFyIGN1c3RvbWVySWQ7XG5cdCAgICB2YXIgc2VsZWN0ZWRNYXAgPSB7XG5cdCAgICAgICAgaWQ6IC0xLFxuXHQgICAgICAgIG1hcF9uYW1lOiBcIlwiLFxuXHQgICAgICAgIG1hcF9zZXR0aW5nOiBcIlwiXG5cdCAgICB9O1xuXG5cdCAgICBpZih0eXBlb2YgbWV0YS5wYWdlLmN1c3RvbWVySWQgPT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICBjdXN0b21lcklkID0gMTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY3VzdG9tZXJJZCA9IG1ldGEucGFnZS5jdXN0b21lcklkO1xuXHQgICAgICAgIGNvbnNvbGUubG9nKGN1c3RvbWVySWQpO1xuXHQgICAgICAgICQuZ2V0SlNPTiggYXBpX3VybCArIFwiL21hcC9sb2FkL1wiICsgY3VzdG9tZXJJZCwgZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHQgICAgICAgICAgICBpZighcmVzcG9uc2UuZXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICQoJy5tYXBzX19idXR0b25zX2xvYWQnKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1kaXNhYmxlZCcpLmFkZENsYXNzKCdidXR0b24tLWdyZWVuJyk7XG5cdCAgICAgICAgICAgICAgICBteU1hcHMgPSByZXNwb25zZS5kYXRhO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cblx0ICAgICQoJy5idXR0b24tLWFkZF95b3VyX21hcCcpLmNsaWNrKGZ1bmN0aW9uKCl7XG5cdCAgICAgIFxuXHRcdFx0aWYoJCh0aGlzKS5oYXNDbGFzcygnYnV0dG9uLS1ncmVlbicpKSB7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIGFsbCBzbGlkZXNcblx0XHRcdFx0dmFyIGNudHMgPSAkKCcubWFwcy0tc2xpZGVycyAuaXRlbScpLmxlbmd0aDtcblx0XHRcdFx0Zm9yKHZhciBpPWNudHMtMTsgaT4wOyBpLS0pIHtcblx0XHRcdFx0ICAgIGlmKHR5cGVvZiAkKCcubWFwcy0tc2xpZGVycyAuaXRlbScpW2ldICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdCAgICAgICAgJCgnLm1hcHMtLXNsaWRlcnMgLml0ZW0nKVtpXS5yZW1vdmUoKTtcblx0XHRcdFx0ICAgIH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBpdGVtX2N0ID0gJyc7XG5cdFx0XHRcdHZhciBzZXR0aW5nID0gJyc7XG5cdFx0XHRcdG15TWFwcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdFx0ICAgIHNldHRpbmcgPSBKU09OLnBhcnNlKGl0ZW0ubWFwX3NldHRpbmcpLnRvU3RyaW5nKCk7XG5cdFx0XHRcdCAgICBpdGVtX2N0ID0gJzxkaXYgY2xhc3M9XCJpdGVtXCIgZGF0YS1pZD1cIicgKyBpdGVtLmlkICsgJ1wiIGRhdGEtc2V0dGluZz1cIicgKyBzZXR0aW5nICsgJ1wiIGRhdGEtbmFtZT1cIicgKyBpdGVtLm1hcF9uYW1lICsgJ1wiPicgKyBcblx0XHRcdFx0ICAgICAgICAgICAgJyAgIDxpbWcgc3JjPVwiJyArIHdpbmRvdy5tYXBfaWNvbl91cmwgKyAnXCIgLz4nICsgXG5cdFx0XHRcdCAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwidGl0bGVcIj4nICsgaXRlbS5tYXBfbmFtZSArICc8L2Rpdj4nO1xuXG5cdFx0XHRcdCAgICAkKCcubWFwcy0tc2xpZGVycycpLnNsaWNrKCdzbGlja0FkZCcsaXRlbV9jdCk7IFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQkKCcjbG9hZC0tbWFwcy1ibG9ja2VyJykuc2hvdygpO1xuXHRcdFx0XHQkKCcjbG9hZC0tbWFwcycpLmFuaW1hdGUoe2JvdHRvbTogXCIwcHhcIn0sIDUwMCk7XG5cdFx0XHR9XG5cdCAgICB9KTtcblxuXHQgICAgJCgnLm1hcHMtLXNsaWRlcnMnKS5zbGljayh7XG4gICAgICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDUsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNSxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDExOTksXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogNFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogM1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludDogNzY4LFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiB1bnNsaWNrIGF0IGEgZ2l2ZW4gYnJlYWtwb2ludCBub3cgYnkgYWRkaW5nOlxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmdzOiBcInVuc2xpY2tcIlxuICAgICAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgYSBzZXR0aW5ncyBvYmplY3RcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgJCgnLmxvYWQtLW1hcHNfY2xvc2UnKS5jbGljayhmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICQoJyNsb2FkLS1tYXBzLWJsb2NrZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCcjbG9hZC0tbWFwcycpLmFuaW1hdGUoe2JvdHRvbTogXCItMTUwMHB4XCJ9LCA1MDApO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgICQoJy5tYXBzLS1zbGlkZXJzJykub24oJ2NsaWNrJywgJy5pdGVtJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICB2YXIgbWFwX2lkID0gJCh0aGlzKS5kYXRhKCdpZCcpO1xuICAgICAgICAgICAgdmFyIG1hcF9uYW1lID0gJCh0aGlzKS5kYXRhKCduYW1lJyk7XG4gICAgICAgICAgICB2YXIgbWFwX3NldHRpbmcgPSAkKHRoaXMpLmRhdGEoJ3NldHRpbmcnKT8gJCh0aGlzKS5kYXRhKCdzZXR0aW5nJykuc3BsaXQoXCIsXCIpOiBbXTtcblxuICAgICAgICAgICAgdmFyIGNvdW50cnlfbmFtZXMgPSAnJztcblxuICAgICAgICAgICAgaWYobWFwX2lkID09IC0xKSB7XG4gICAgICAgICAgICBcdHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9tYXBzJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcdG1hcF9zZXR0aW5nLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICBcdFx0Zm9yKHZhciBpPTA7aTx3aW5kb3cubWFwX2NvdW50cmllcy5sZW5ndGgtMTtpKyspIHtcbiAgICAgICAgICAgIFx0XHRcdGlmKGl0ZW0gPT0gd2luZG93Lm1hcF9jb3VudHJpZXNbaV0uY29kZSkge1xuICAgICAgICAgICAgXHRcdFx0XHRjb3VudHJ5X25hbWVzICs9IHdpbmRvdy5tYXBfY291bnRyaWVzW2ldLm5hbWUgKyAnLCAnXG4gICAgICAgICAgICBcdFx0XHR9XG4gICAgICAgICAgICBcdFx0fVxuICAgICAgICAgICAgXHR9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCgnLmxvYWQtLW1hcHNfY2xvc2UnKS50cmlnZ2VyKCdjbGljaycpO1xuXG4gICAgICAgICAgICBpZihjb3VudHJ5X25hbWVzKSB7XG4gICAgICAgICAgICBcdGNvbnNvbGUubG9nKGNvdW50cnlfbmFtZXMpO1xuICAgICAgICAgICAgXHRjb3VudHJ5X25hbWVzID0gY291bnRyeV9uYW1lcy5zdWJzdHJpbmcoMCwgY291bnRyeV9uYW1lcy5sZW5ndGggLSAyKTtcblxuICAgICAgICAgICAgXHQkKCcjbWFwX25hbWVfbGluZWl0ZW0nKS52YWwobWFwX25hbWUpO1xuICAgICAgICAgICAgXHQkKCcjbWFwX2NvdW50cmllc19saW5laXRlbScpLnZhbChjb3VudHJ5X25hbWVzKTtcbiAgICAgICAgICAgIFx0XG4gICAgICAgICAgICBcdCQoJy5hY2NvcmRlb25fX3RhYi0tbWFwIHAnKS50ZXh0KGNvdW50cnlfbmFtZXMpO1xuXG4gICAgICAgICAgICAgICAgaWYoJCgnLmFjY29yZGVvbl9fdGFiLmFjY29yZGVvbl9fdGFiLS1tYXAnKS5jc3MoJ2Rpc3BsYXknKSA9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFjY29yZGVvbl9fdGFiLS1tYXAnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV4cGFuZCBkZXRhaWwgdGFiIGFzIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFjY29yZGVvbl9fdGFiLmFjY29yZGVvbl9fdGFiLS1tYXAgbGFiZWwnKS50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgIH1cblxuXHRcdFx0XHQvLyAkKCcuYnV0dG9uLS1hZGRfeW91cl9tYXAnKS5yZW1vdmVDbGFzcygnYnV0dG9uLS1ncmVlbicpLmFkZENsYXNzKCdidXR0b24tLWRpc2FibGVkJyk7XG5cdFx0XHRcdCQoJyNhZGQtdG8tY2FydCcpLnJlbW92ZUNsYXNzKCdidXR0b24tLWRpc2FibGVkJykuYWRkQ2xhc3MoJ2J1dHRvbi0tZ3JlZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cdH1cbn0pOyIsIiFmdW5jdGlvbihpKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxpKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1pKHJlcXVpcmUoXCJqcXVlcnlcIikpOmkoalF1ZXJ5KX0oZnVuY3Rpb24oaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9d2luZG93LlNsaWNrfHx7fTsoZT1mdW5jdGlvbigpe3ZhciBlPTA7cmV0dXJuIGZ1bmN0aW9uKHQsbyl7dmFyIHMsbj10aGlzO24uZGVmYXVsdHM9e2FjY2Vzc2liaWxpdHk6ITAsYWRhcHRpdmVIZWlnaHQ6ITEsYXBwZW5kQXJyb3dzOmkodCksYXBwZW5kRG90czppKHQpLGFycm93czohMCxhc05hdkZvcjpudWxsLHByZXZBcnJvdzonPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLG5leHRBcnJvdzonPGJ1dHRvbiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHR5cGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxhdXRvcGxheTohMSxhdXRvcGxheVNwZWVkOjNlMyxjZW50ZXJNb2RlOiExLGNlbnRlclBhZGRpbmc6XCI1MHB4XCIsY3NzRWFzZTpcImVhc2VcIixjdXN0b21QYWdpbmc6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaSgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KHQrMSl9LGRvdHM6ITEsZG90c0NsYXNzOlwic2xpY2stZG90c1wiLGRyYWdnYWJsZTohMCxlYXNpbmc6XCJsaW5lYXJcIixlZGdlRnJpY3Rpb246LjM1LGZhZGU6ITEsZm9jdXNPblNlbGVjdDohMSxmb2N1c09uQ2hhbmdlOiExLGluZmluaXRlOiEwLGluaXRpYWxTbGlkZTowLGxhenlMb2FkOlwib25kZW1hbmRcIixtb2JpbGVGaXJzdDohMSxwYXVzZU9uSG92ZXI6ITAscGF1c2VPbkZvY3VzOiEwLHBhdXNlT25Eb3RzSG92ZXI6ITEscmVzcG9uZFRvOlwid2luZG93XCIscmVzcG9uc2l2ZTpudWxsLHJvd3M6MSxydGw6ITEsc2xpZGU6XCJcIixzbGlkZXNQZXJSb3c6MSxzbGlkZXNUb1Nob3c6MSxzbGlkZXNUb1Njcm9sbDoxLHNwZWVkOjUwMCxzd2lwZTohMCxzd2lwZVRvU2xpZGU6ITEsdG91Y2hNb3ZlOiEwLHRvdWNoVGhyZXNob2xkOjUsdXNlQ1NTOiEwLHVzZVRyYW5zZm9ybTohMCx2YXJpYWJsZVdpZHRoOiExLHZlcnRpY2FsOiExLHZlcnRpY2FsU3dpcGluZzohMSx3YWl0Rm9yQW5pbWF0ZTohMCx6SW5kZXg6MWUzfSxuLmluaXRpYWxzPXthbmltYXRpbmc6ITEsZHJhZ2dpbmc6ITEsYXV0b1BsYXlUaW1lcjpudWxsLGN1cnJlbnREaXJlY3Rpb246MCxjdXJyZW50TGVmdDpudWxsLGN1cnJlbnRTbGlkZTowLGRpcmVjdGlvbjoxLCRkb3RzOm51bGwsbGlzdFdpZHRoOm51bGwsbGlzdEhlaWdodDpudWxsLGxvYWRJbmRleDowLCRuZXh0QXJyb3c6bnVsbCwkcHJldkFycm93Om51bGwsc2Nyb2xsaW5nOiExLHNsaWRlQ291bnQ6bnVsbCxzbGlkZVdpZHRoOm51bGwsJHNsaWRlVHJhY2s6bnVsbCwkc2xpZGVzOm51bGwsc2xpZGluZzohMSxzbGlkZU9mZnNldDowLHN3aXBlTGVmdDpudWxsLHN3aXBpbmc6ITEsJGxpc3Q6bnVsbCx0b3VjaE9iamVjdDp7fSx0cmFuc2Zvcm1zRW5hYmxlZDohMSx1bnNsaWNrZWQ6ITF9LGkuZXh0ZW5kKG4sbi5pbml0aWFscyksbi5hY3RpdmVCcmVha3BvaW50PW51bGwsbi5hbmltVHlwZT1udWxsLG4uYW5pbVByb3A9bnVsbCxuLmJyZWFrcG9pbnRzPVtdLG4uYnJlYWtwb2ludFNldHRpbmdzPVtdLG4uY3NzVHJhbnNpdGlvbnM9ITEsbi5mb2N1c3NlZD0hMSxuLmludGVycnVwdGVkPSExLG4uaGlkZGVuPVwiaGlkZGVuXCIsbi5wYXVzZWQ9ITAsbi5wb3NpdGlvblByb3A9bnVsbCxuLnJlc3BvbmRUbz1udWxsLG4ucm93Q291bnQ9MSxuLnNob3VsZENsaWNrPSEwLG4uJHNsaWRlcj1pKHQpLG4uJHNsaWRlc0NhY2hlPW51bGwsbi50cmFuc2Zvcm1UeXBlPW51bGwsbi50cmFuc2l0aW9uVHlwZT1udWxsLG4udmlzaWJpbGl0eUNoYW5nZT1cInZpc2liaWxpdHljaGFuZ2VcIixuLndpbmRvd1dpZHRoPTAsbi53aW5kb3dUaW1lcj1udWxsLHM9aSh0KS5kYXRhKFwic2xpY2tcIil8fHt9LG4ub3B0aW9ucz1pLmV4dGVuZCh7fSxuLmRlZmF1bHRzLG8scyksbi5jdXJyZW50U2xpZGU9bi5vcHRpb25zLmluaXRpYWxTbGlkZSxuLm9yaWdpbmFsU2V0dGluZ3M9bi5vcHRpb25zLHZvaWQgMCE9PWRvY3VtZW50Lm1vekhpZGRlbj8obi5oaWRkZW49XCJtb3pIaWRkZW5cIixuLnZpc2liaWxpdHlDaGFuZ2U9XCJtb3p2aXNpYmlsaXR5Y2hhbmdlXCIpOnZvaWQgMCE9PWRvY3VtZW50LndlYmtpdEhpZGRlbiYmKG4uaGlkZGVuPVwid2Via2l0SGlkZGVuXCIsbi52aXNpYmlsaXR5Q2hhbmdlPVwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiKSxuLmF1dG9QbGF5PWkucHJveHkobi5hdXRvUGxheSxuKSxuLmF1dG9QbGF5Q2xlYXI9aS5wcm94eShuLmF1dG9QbGF5Q2xlYXIsbiksbi5hdXRvUGxheUl0ZXJhdG9yPWkucHJveHkobi5hdXRvUGxheUl0ZXJhdG9yLG4pLG4uY2hhbmdlU2xpZGU9aS5wcm94eShuLmNoYW5nZVNsaWRlLG4pLG4uY2xpY2tIYW5kbGVyPWkucHJveHkobi5jbGlja0hhbmRsZXIsbiksbi5zZWxlY3RIYW5kbGVyPWkucHJveHkobi5zZWxlY3RIYW5kbGVyLG4pLG4uc2V0UG9zaXRpb249aS5wcm94eShuLnNldFBvc2l0aW9uLG4pLG4uc3dpcGVIYW5kbGVyPWkucHJveHkobi5zd2lwZUhhbmRsZXIsbiksbi5kcmFnSGFuZGxlcj1pLnByb3h5KG4uZHJhZ0hhbmRsZXIsbiksbi5rZXlIYW5kbGVyPWkucHJveHkobi5rZXlIYW5kbGVyLG4pLG4uaW5zdGFuY2VVaWQ9ZSsrLG4uaHRtbEV4cHI9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvLG4ucmVnaXN0ZXJCcmVha3BvaW50cygpLG4uaW5pdCghMCl9fSgpKS5wcm90b3R5cGUuYWN0aXZhdGVBREE9ZnVuY3Rpb24oKXt0aGlzLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stYWN0aXZlXCIpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcImZhbHNlXCJ9KS5maW5kKFwiYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0XCIpLmF0dHIoe3RhYmluZGV4OlwiMFwifSl9LGUucHJvdG90eXBlLmFkZFNsaWRlPWUucHJvdG90eXBlLnNsaWNrQWRkPWZ1bmN0aW9uKGUsdCxvKXt2YXIgcz10aGlzO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgdClvPXQsdD1udWxsO2Vsc2UgaWYodDwwfHx0Pj1zLnNsaWRlQ291bnQpcmV0dXJuITE7cy51bmxvYWQoKSxcIm51bWJlclwiPT10eXBlb2YgdD8wPT09dCYmMD09PXMuJHNsaWRlcy5sZW5ndGg/aShlKS5hcHBlbmRUbyhzLiRzbGlkZVRyYWNrKTpvP2koZSkuaW5zZXJ0QmVmb3JlKHMuJHNsaWRlcy5lcSh0KSk6aShlKS5pbnNlcnRBZnRlcihzLiRzbGlkZXMuZXEodCkpOiEwPT09bz9pKGUpLnByZXBlbmRUbyhzLiRzbGlkZVRyYWNrKTppKGUpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spLHMuJHNsaWRlcz1zLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkscy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLHMuJHNsaWRlVHJhY2suYXBwZW5kKHMuJHNsaWRlcykscy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oZSx0KXtpKHQpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsZSl9KSxzLiRzbGlkZXNDYWNoZT1zLiRzbGlkZXMscy5yZWluaXQoKX0sZS5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodD1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aWYoMT09PWkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiEwPT09aS5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0JiYhMT09PWkub3B0aW9ucy52ZXJ0aWNhbCl7dmFyIGU9aS4kc2xpZGVzLmVxKGkuY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCghMCk7aS4kbGlzdC5hbmltYXRlKHtoZWlnaHQ6ZX0saS5vcHRpb25zLnNwZWVkKX19LGUucHJvdG90eXBlLmFuaW1hdGVTbGlkZT1mdW5jdGlvbihlLHQpe3ZhciBvPXt9LHM9dGhpcztzLmFuaW1hdGVIZWlnaHQoKSwhMD09PXMub3B0aW9ucy5ydGwmJiExPT09cy5vcHRpb25zLnZlcnRpY2FsJiYoZT0tZSksITE9PT1zLnRyYW5zZm9ybXNFbmFibGVkPyExPT09cy5vcHRpb25zLnZlcnRpY2FsP3MuJHNsaWRlVHJhY2suYW5pbWF0ZSh7bGVmdDplfSxzLm9wdGlvbnMuc3BlZWQscy5vcHRpb25zLmVhc2luZyx0KTpzLiRzbGlkZVRyYWNrLmFuaW1hdGUoe3RvcDplfSxzLm9wdGlvbnMuc3BlZWQscy5vcHRpb25zLmVhc2luZyx0KTohMT09PXMuY3NzVHJhbnNpdGlvbnM/KCEwPT09cy5vcHRpb25zLnJ0bCYmKHMuY3VycmVudExlZnQ9LXMuY3VycmVudExlZnQpLGkoe2FuaW1TdGFydDpzLmN1cnJlbnRMZWZ0fSkuYW5pbWF0ZSh7YW5pbVN0YXJ0OmV9LHtkdXJhdGlvbjpzLm9wdGlvbnMuc3BlZWQsZWFzaW5nOnMub3B0aW9ucy5lYXNpbmcsc3RlcDpmdW5jdGlvbihpKXtpPU1hdGguY2VpbChpKSwhMT09PXMub3B0aW9ucy52ZXJ0aWNhbD8ob1tzLmFuaW1UeXBlXT1cInRyYW5zbGF0ZShcIitpK1wicHgsIDBweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSk6KG9bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUoMHB4LFwiK2krXCJweClcIixzLiRzbGlkZVRyYWNrLmNzcyhvKSl9LGNvbXBsZXRlOmZ1bmN0aW9uKCl7dCYmdC5jYWxsKCl9fSkpOihzLmFwcGx5VHJhbnNpdGlvbigpLGU9TWF0aC5jZWlsKGUpLCExPT09cy5vcHRpb25zLnZlcnRpY2FsP29bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZChcIitlK1wicHgsIDBweCwgMHB4KVwiOm9bcy5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZCgwcHgsXCIrZStcInB4LCAwcHgpXCIscy4kc2xpZGVUcmFjay5jc3MobyksdCYmc2V0VGltZW91dChmdW5jdGlvbigpe3MuZGlzYWJsZVRyYW5zaXRpb24oKSx0LmNhbGwoKX0scy5vcHRpb25zLnNwZWVkKSl9LGUucHJvdG90eXBlLmdldE5hdlRhcmdldD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLm9wdGlvbnMuYXNOYXZGb3I7cmV0dXJuIHQmJm51bGwhPT10JiYodD1pKHQpLm5vdChlLiRzbGlkZXIpKSx0fSxlLnByb3RvdHlwZS5hc05hdkZvcj1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmdldE5hdlRhcmdldCgpO251bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdC5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9aSh0aGlzKS5zbGljayhcImdldFNsaWNrXCIpO3QudW5zbGlja2VkfHx0LnNsaWRlSGFuZGxlcihlLCEwKX0pfSxlLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb249ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcyx0PXt9OyExPT09ZS5vcHRpb25zLmZhZGU/dFtlLnRyYW5zaXRpb25UeXBlXT1lLnRyYW5zZm9ybVR5cGUrXCIgXCIrZS5vcHRpb25zLnNwZWVkK1wibXMgXCIrZS5vcHRpb25zLmNzc0Vhc2U6dFtlLnRyYW5zaXRpb25UeXBlXT1cIm9wYWNpdHkgXCIrZS5vcHRpb25zLnNwZWVkK1wibXMgXCIrZS5vcHRpb25zLmNzc0Vhc2UsITE9PT1lLm9wdGlvbnMuZmFkZT9lLiRzbGlkZVRyYWNrLmNzcyh0KTplLiRzbGlkZXMuZXEoaSkuY3NzKHQpfSxlLnByb3RvdHlwZS5hdXRvUGxheT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheUNsZWFyKCksaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLmF1dG9QbGF5VGltZXI9c2V0SW50ZXJ2YWwoaS5hdXRvUGxheUl0ZXJhdG9yLGkub3B0aW9ucy5hdXRvcGxheVNwZWVkKSl9LGUucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXI9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuYXV0b1BsYXlUaW1lciYmY2xlYXJJbnRlcnZhbChpLmF1dG9QbGF5VGltZXIpfSxlLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcyxlPWkuY3VycmVudFNsaWRlK2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtpLnBhdXNlZHx8aS5pbnRlcnJ1cHRlZHx8aS5mb2N1c3NlZHx8KCExPT09aS5vcHRpb25zLmluZmluaXRlJiYoMT09PWkuZGlyZWN0aW9uJiZpLmN1cnJlbnRTbGlkZSsxPT09aS5zbGlkZUNvdW50LTE/aS5kaXJlY3Rpb249MDowPT09aS5kaXJlY3Rpb24mJihlPWkuY3VycmVudFNsaWRlLWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxpLmN1cnJlbnRTbGlkZS0xPT0wJiYoaS5kaXJlY3Rpb249MSkpKSxpLnNsaWRlSGFuZGxlcihlKSl9LGUucHJvdG90eXBlLmJ1aWxkQXJyb3dzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczshMD09PWUub3B0aW9ucy5hcnJvd3MmJihlLiRwcmV2QXJyb3c9aShlLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcyhcInNsaWNrLWFycm93XCIpLGUuJG5leHRBcnJvdz1pKGUub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKFwic2xpY2stYXJyb3dcIiksZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3c/KGUuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gdGFiaW5kZXhcIiksZS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2staGlkZGVuXCIpLnJlbW92ZUF0dHIoXCJhcmlhLWhpZGRlbiB0YWJpbmRleFwiKSxlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLnByZXZBcnJvdykmJmUuJHByZXZBcnJvdy5wcmVwZW5kVG8oZS5vcHRpb25zLmFwcGVuZEFycm93cyksZS5odG1sRXhwci50ZXN0KGUub3B0aW9ucy5uZXh0QXJyb3cpJiZlLiRuZXh0QXJyb3cuYXBwZW5kVG8oZS5vcHRpb25zLmFwcGVuZEFycm93cyksITAhPT1lLm9wdGlvbnMuaW5maW5pdGUmJmUuJHByZXZBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpKTplLiRwcmV2QXJyb3cuYWRkKGUuJG5leHRBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1oaWRkZW5cIikuYXR0cih7XCJhcmlhLWRpc2FibGVkXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSkpfSxlLnByb3RvdHlwZS5idWlsZERvdHM9ZnVuY3Rpb24oKXt2YXIgZSx0LG89dGhpcztpZighMD09PW8ub3B0aW9ucy5kb3RzKXtmb3Ioby4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stZG90dGVkXCIpLHQ9aShcIjx1bCAvPlwiKS5hZGRDbGFzcyhvLm9wdGlvbnMuZG90c0NsYXNzKSxlPTA7ZTw9by5nZXREb3RDb3VudCgpO2UrPTEpdC5hcHBlbmQoaShcIjxsaSAvPlwiKS5hcHBlbmQoby5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsbyxlKSkpO28uJGRvdHM9dC5hcHBlbmRUbyhvLm9wdGlvbnMuYXBwZW5kRG90cyksby4kZG90cy5maW5kKFwibGlcIikuZmlyc3QoKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKX19LGUucHJvdG90eXBlLmJ1aWxkT3V0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXM9ZS4kc2xpZGVyLmNoaWxkcmVuKGUub3B0aW9ucy5zbGlkZStcIjpub3QoLnNsaWNrLWNsb25lZClcIikuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxlLnNsaWRlQ291bnQ9ZS4kc2xpZGVzLmxlbmd0aCxlLiRzbGlkZXMuZWFjaChmdW5jdGlvbihlLHQpe2kodCkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixlKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIsaSh0KS5hdHRyKFwic3R5bGVcIil8fFwiXCIpfSksZS4kc2xpZGVyLmFkZENsYXNzKFwic2xpY2stc2xpZGVyXCIpLGUuJHNsaWRlVHJhY2s9MD09PWUuc2xpZGVDb3VudD9pKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oZS4kc2xpZGVyKTplLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpLGUuJGxpc3Q9ZS4kc2xpZGVUcmFjay53cmFwKCc8ZGl2IGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKSxlLiRzbGlkZVRyYWNrLmNzcyhcIm9wYWNpdHlcIiwwKSwhMCE9PWUub3B0aW9ucy5jZW50ZXJNb2RlJiYhMCE9PWUub3B0aW9ucy5zd2lwZVRvU2xpZGV8fChlLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw9MSksaShcImltZ1tkYXRhLWxhenldXCIsZS4kc2xpZGVyKS5ub3QoXCJbc3JjXVwiKS5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksZS5zZXR1cEluZmluaXRlKCksZS5idWlsZEFycm93cygpLGUuYnVpbGREb3RzKCksZS51cGRhdGVEb3RzKCksZS5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGUuY3VycmVudFNsaWRlP2UuY3VycmVudFNsaWRlOjApLCEwPT09ZS5vcHRpb25zLmRyYWdnYWJsZSYmZS4kbGlzdC5hZGRDbGFzcyhcImRyYWdnYWJsZVwiKX0sZS5wcm90b3R5cGUuYnVpbGRSb3dzPWZ1bmN0aW9uKCl7dmFyIGksZSx0LG8scyxuLHIsbD10aGlzO2lmKG89ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG49bC4kc2xpZGVyLmNoaWxkcmVuKCksbC5vcHRpb25zLnJvd3M+MSl7Zm9yKHI9bC5vcHRpb25zLnNsaWRlc1BlclJvdypsLm9wdGlvbnMucm93cyxzPU1hdGguY2VpbChuLmxlbmd0aC9yKSxpPTA7aTxzO2krKyl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoZT0wO2U8bC5vcHRpb25zLnJvd3M7ZSsrKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2Zvcih0PTA7dDxsLm9wdGlvbnMuc2xpZGVzUGVyUm93O3QrKyl7dmFyIGM9aSpyKyhlKmwub3B0aW9ucy5zbGlkZXNQZXJSb3crdCk7bi5nZXQoYykmJmEuYXBwZW5kQ2hpbGQobi5nZXQoYykpfWQuYXBwZW5kQ2hpbGQoYSl9by5hcHBlbmRDaGlsZChkKX1sLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobyksbC4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNzcyh7d2lkdGg6MTAwL2wub3B0aW9ucy5zbGlkZXNQZXJSb3crXCIlXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wifSl9fSxlLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmU9ZnVuY3Rpb24oZSx0KXt2YXIgbyxzLG4scj10aGlzLGw9ITEsZD1yLiRzbGlkZXIud2lkdGgoKSxhPXdpbmRvdy5pbm5lcldpZHRofHxpKHdpbmRvdykud2lkdGgoKTtpZihcIndpbmRvd1wiPT09ci5yZXNwb25kVG8/bj1hOlwic2xpZGVyXCI9PT1yLnJlc3BvbmRUbz9uPWQ6XCJtaW5cIj09PXIucmVzcG9uZFRvJiYobj1NYXRoLm1pbihhLGQpKSxyLm9wdGlvbnMucmVzcG9uc2l2ZSYmci5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoJiZudWxsIT09ci5vcHRpb25zLnJlc3BvbnNpdmUpe3M9bnVsbDtmb3IobyBpbiByLmJyZWFrcG9pbnRzKXIuYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkobykmJighMT09PXIub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdD9uPHIuYnJlYWtwb2ludHNbb10mJihzPXIuYnJlYWtwb2ludHNbb10pOm4+ci5icmVha3BvaW50c1tvXSYmKHM9ci5icmVha3BvaW50c1tvXSkpO251bGwhPT1zP251bGwhPT1yLmFjdGl2ZUJyZWFrcG9pbnQ/KHMhPT1yLmFjdGl2ZUJyZWFrcG9pbnR8fHQpJiYoci5hY3RpdmVCcmVha3BvaW50PXMsXCJ1bnNsaWNrXCI9PT1yLmJyZWFrcG9pbnRTZXR0aW5nc1tzXT9yLnVuc2xpY2socyk6KHIub3B0aW9ucz1pLmV4dGVuZCh7fSxyLm9yaWdpbmFsU2V0dGluZ3Msci5icmVha3BvaW50U2V0dGluZ3Nbc10pLCEwPT09ZSYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSksbD1zKTooci5hY3RpdmVCcmVha3BvaW50PXMsXCJ1bnNsaWNrXCI9PT1yLmJyZWFrcG9pbnRTZXR0aW5nc1tzXT9yLnVuc2xpY2socyk6KHIub3B0aW9ucz1pLmV4dGVuZCh7fSxyLm9yaWdpbmFsU2V0dGluZ3Msci5icmVha3BvaW50U2V0dGluZ3Nbc10pLCEwPT09ZSYmKHIuY3VycmVudFNsaWRlPXIub3B0aW9ucy5pbml0aWFsU2xpZGUpLHIucmVmcmVzaChlKSksbD1zKTpudWxsIT09ci5hY3RpdmVCcmVha3BvaW50JiYoci5hY3RpdmVCcmVha3BvaW50PW51bGwsci5vcHRpb25zPXIub3JpZ2luYWxTZXR0aW5ncywhMD09PWUmJihyLmN1cnJlbnRTbGlkZT1yLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxyLnJlZnJlc2goZSksbD1zKSxlfHwhMT09PWx8fHIuJHNsaWRlci50cmlnZ2VyKFwiYnJlYWtwb2ludFwiLFtyLGxdKX19LGUucHJvdG90eXBlLmNoYW5nZVNsaWRlPWZ1bmN0aW9uKGUsdCl7dmFyIG8scyxuLHI9dGhpcyxsPWkoZS5jdXJyZW50VGFyZ2V0KTtzd2l0Y2gobC5pcyhcImFcIikmJmUucHJldmVudERlZmF1bHQoKSxsLmlzKFwibGlcIil8fChsPWwuY2xvc2VzdChcImxpXCIpKSxuPXIuc2xpZGVDb3VudCVyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPTAsbz1uPzA6KHIuc2xpZGVDb3VudC1yLmN1cnJlbnRTbGlkZSklci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGUuZGF0YS5tZXNzYWdlKXtjYXNlXCJwcmV2aW91c1wiOnM9MD09PW8/ci5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOnIub3B0aW9ucy5zbGlkZXNUb1Nob3ctbyxyLnNsaWRlQ291bnQ+ci5vcHRpb25zLnNsaWRlc1RvU2hvdyYmci5zbGlkZUhhbmRsZXIoci5jdXJyZW50U2xpZGUtcywhMSx0KTticmVhaztjYXNlXCJuZXh0XCI6cz0wPT09bz9yLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6byxyLnNsaWRlQ291bnQ+ci5vcHRpb25zLnNsaWRlc1RvU2hvdyYmci5zbGlkZUhhbmRsZXIoci5jdXJyZW50U2xpZGUrcywhMSx0KTticmVhaztjYXNlXCJpbmRleFwiOnZhciBkPTA9PT1lLmRhdGEuaW5kZXg/MDplLmRhdGEuaW5kZXh8fGwuaW5kZXgoKSpyLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7ci5zbGlkZUhhbmRsZXIoci5jaGVja05hdmlnYWJsZShkKSwhMSx0KSxsLmNoaWxkcmVuKCkudHJpZ2dlcihcImZvY3VzXCIpO2JyZWFrO2RlZmF1bHQ6cmV0dXJufX0sZS5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGU9ZnVuY3Rpb24oaSl7dmFyIGUsdDtpZihlPXRoaXMuZ2V0TmF2aWdhYmxlSW5kZXhlcygpLHQ9MCxpPmVbZS5sZW5ndGgtMV0paT1lW2UubGVuZ3RoLTFdO2Vsc2UgZm9yKHZhciBvIGluIGUpe2lmKGk8ZVtvXSl7aT10O2JyZWFrfXQ9ZVtvXX1yZXR1cm4gaX0sZS5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5vcHRpb25zLmRvdHMmJm51bGwhPT1lLiRkb3RzJiYoaShcImxpXCIsZS4kZG90cykub2ZmKFwiY2xpY2suc2xpY2tcIixlLmNoYW5nZVNsaWRlKS5vZmYoXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSkub2ZmKFwibW91c2VsZWF2ZS5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMSkpLCEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuJGRvdHMub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpLGUuJHNsaWRlci5vZmYoXCJmb2N1cy5zbGljayBibHVyLnNsaWNrXCIpLCEwPT09ZS5vcHRpb25zLmFycm93cyYmZS5zbGlkZUNvdW50PmUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlLiRwcmV2QXJyb3cmJmUuJHByZXZBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiLGUuY2hhbmdlU2xpZGUpLGUuJG5leHRBcnJvdyYmZS4kbmV4dEFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jaGFuZ2VTbGlkZSksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmKGUuJHByZXZBcnJvdyYmZS4kcHJldkFycm93Lm9mZihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpLGUuJG5leHRBcnJvdyYmZS4kbmV4dEFycm93Lm9mZihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpKSksZS4kbGlzdC5vZmYoXCJ0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcInRvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2tcIixlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vZmYoXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIsZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub2ZmKFwidG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGlja1wiLGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9mZihcImNsaWNrLnNsaWNrXCIsZS5jbGlja0hhbmRsZXIpLGkoZG9jdW1lbnQpLm9mZihlLnZpc2liaWxpdHlDaGFuZ2UsZS52aXNpYmlsaXR5KSxlLmNsZWFuVXBTbGlkZUV2ZW50cygpLCEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHkmJmUuJGxpc3Qub2ZmKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlciksITA9PT1lLm9wdGlvbnMuZm9jdXNPblNlbGVjdCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZihcImNsaWNrLnNsaWNrXCIsZS5zZWxlY3RIYW5kbGVyKSxpKHdpbmRvdykub2ZmKFwib3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stXCIrZS5pbnN0YW5jZVVpZCxlLm9yaWVudGF0aW9uQ2hhbmdlKSxpKHdpbmRvdykub2ZmKFwicmVzaXplLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsZS5yZXNpemUpLGkoXCJbZHJhZ2dhYmxlIT10cnVlXVwiLGUuJHNsaWRlVHJhY2spLm9mZihcImRyYWdzdGFydFwiLGUucHJldmVudERlZmF1bHQpLGkod2luZG93KS5vZmYoXCJsb2FkLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsZS5zZXRQb3NpdGlvbil9LGUucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS4kbGlzdC5vZmYoXCJtb3VzZWVudGVyLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCEwKSksZS4kbGlzdC5vZmYoXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSl9LGUucHJvdG90eXBlLmNsZWFuVXBSb3dzPWZ1bmN0aW9uKCl7dmFyIGksZT10aGlzO2Uub3B0aW9ucy5yb3dzPjEmJigoaT1lLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpKS5yZW1vdmVBdHRyKFwic3R5bGVcIiksZS4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKGkpKX0sZS5wcm90b3R5cGUuY2xpY2tIYW5kbGVyPWZ1bmN0aW9uKGkpeyExPT09dGhpcy5zaG91bGRDbGljayYmKGkuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksaS5zdG9wUHJvcGFnYXRpb24oKSxpLnByZXZlbnREZWZhdWx0KCkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dC5hdXRvUGxheUNsZWFyKCksdC50b3VjaE9iamVjdD17fSx0LmNsZWFuVXBFdmVudHMoKSxpKFwiLnNsaWNrLWNsb25lZFwiLHQuJHNsaWRlcikuZGV0YWNoKCksdC4kZG90cyYmdC4kZG90cy5yZW1vdmUoKSx0LiRwcmV2QXJyb3cmJnQuJHByZXZBcnJvdy5sZW5ndGgmJih0LiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLHQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMucHJldkFycm93KSYmdC4kcHJldkFycm93LnJlbW92ZSgpKSx0LiRuZXh0QXJyb3cmJnQuJG5leHRBcnJvdy5sZW5ndGgmJih0LiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLHQuaHRtbEV4cHIudGVzdCh0Lm9wdGlvbnMubmV4dEFycm93KSYmdC4kbmV4dEFycm93LnJlbW92ZSgpKSx0LiRzbGlkZXMmJih0LiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW5cIikucmVtb3ZlQXR0cihcImRhdGEtc2xpY2staW5kZXhcIikuZWFjaChmdW5jdGlvbigpe2kodGhpcykuYXR0cihcInN0eWxlXCIsaSh0aGlzKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIpKX0pLHQuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSx0LiRzbGlkZVRyYWNrLmRldGFjaCgpLHQuJGxpc3QuZGV0YWNoKCksdC4kc2xpZGVyLmFwcGVuZCh0LiRzbGlkZXMpKSx0LmNsZWFuVXBSb3dzKCksdC4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGVyXCIpLHQuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLHQuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWRvdHRlZFwiKSx0LnVuc2xpY2tlZD0hMCxlfHx0LiRzbGlkZXIudHJpZ2dlcihcImRlc3Ryb3lcIixbdF0pfSxlLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbj1mdW5jdGlvbihpKXt2YXIgZT10aGlzLHQ9e307dFtlLnRyYW5zaXRpb25UeXBlXT1cIlwiLCExPT09ZS5vcHRpb25zLmZhZGU/ZS4kc2xpZGVUcmFjay5jc3ModCk6ZS4kc2xpZGVzLmVxKGkpLmNzcyh0KX0sZS5wcm90b3R5cGUuZmFkZVNsaWRlPWZ1bmN0aW9uKGksZSl7dmFyIHQ9dGhpczshMT09PXQuY3NzVHJhbnNpdGlvbnM/KHQuJHNsaWRlcy5lcShpKS5jc3Moe3pJbmRleDp0Lm9wdGlvbnMuekluZGV4fSksdC4kc2xpZGVzLmVxKGkpLmFuaW1hdGUoe29wYWNpdHk6MX0sdC5vcHRpb25zLnNwZWVkLHQub3B0aW9ucy5lYXNpbmcsZSkpOih0LmFwcGx5VHJhbnNpdGlvbihpKSx0LiRzbGlkZXMuZXEoaSkuY3NzKHtvcGFjaXR5OjEsekluZGV4OnQub3B0aW9ucy56SW5kZXh9KSxlJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dC5kaXNhYmxlVHJhbnNpdGlvbihpKSxlLmNhbGwoKX0sdC5vcHRpb25zLnNwZWVkKSl9LGUucHJvdG90eXBlLmZhZGVTbGlkZU91dD1mdW5jdGlvbihpKXt2YXIgZT10aGlzOyExPT09ZS5jc3NUcmFuc2l0aW9ucz9lLiRzbGlkZXMuZXEoaSkuYW5pbWF0ZSh7b3BhY2l0eTowLHpJbmRleDplLm9wdGlvbnMuekluZGV4LTJ9LGUub3B0aW9ucy5zcGVlZCxlLm9wdGlvbnMuZWFzaW5nKTooZS5hcHBseVRyYW5zaXRpb24oaSksZS4kc2xpZGVzLmVxKGkpLmNzcyh7b3BhY2l0eTowLHpJbmRleDplLm9wdGlvbnMuekluZGV4LTJ9KSl9LGUucHJvdG90eXBlLmZpbHRlclNsaWRlcz1lLnByb3RvdHlwZS5zbGlja0ZpbHRlcj1mdW5jdGlvbihpKXt2YXIgZT10aGlzO251bGwhPT1pJiYoZS4kc2xpZGVzQ2FjaGU9ZS4kc2xpZGVzLGUudW5sb2FkKCksZS4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGUuJHNsaWRlc0NhY2hlLmZpbHRlcihpKS5hcHBlbmRUbyhlLiRzbGlkZVRyYWNrKSxlLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKS5vbihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIixcIipcIixmdW5jdGlvbih0KXt0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO3ZhciBvPWkodGhpcyk7c2V0VGltZW91dChmdW5jdGlvbigpe2Uub3B0aW9ucy5wYXVzZU9uRm9jdXMmJihlLmZvY3Vzc2VkPW8uaXMoXCI6Zm9jdXNcIiksZS5hdXRvUGxheSgpKX0sMCl9KX0sZS5wcm90b3R5cGUuZ2V0Q3VycmVudD1lLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnJlbnRTbGlkZX0sZS5wcm90b3R5cGUuZ2V0RG90Q291bnQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9MCx0PTAsbz0wO2lmKCEwPT09aS5vcHRpb25zLmluZmluaXRlKWlmKGkuc2xpZGVDb3VudDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdykrK287ZWxzZSBmb3IoO2U8aS5zbGlkZUNvdW50OykrK28sZT10K2kub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCx0Kz1pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWkub3B0aW9ucy5zbGlkZXNUb1Nob3c/aS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmkub3B0aW9ucy5zbGlkZXNUb1Nob3c7ZWxzZSBpZighMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlKW89aS5zbGlkZUNvdW50O2Vsc2UgaWYoaS5vcHRpb25zLmFzTmF2Rm9yKWZvcig7ZTxpLnNsaWRlQ291bnQ7KSsrbyxlPXQraS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLHQrPWkub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9aS5vcHRpb25zLnNsaWRlc1RvU2hvdz9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6aS5vcHRpb25zLnNsaWRlc1RvU2hvdztlbHNlIG89MStNYXRoLmNlaWwoKGkuc2xpZGVDb3VudC1pLm9wdGlvbnMuc2xpZGVzVG9TaG93KS9pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO3JldHVybiBvLTF9LGUucHJvdG90eXBlLmdldExlZnQ9ZnVuY3Rpb24oaSl7dmFyIGUsdCxvLHMsbj10aGlzLHI9MDtyZXR1cm4gbi5zbGlkZU9mZnNldD0wLHQ9bi4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQoITApLCEwPT09bi5vcHRpb25zLmluZmluaXRlPyhuLnNsaWRlQ291bnQ+bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKG4uc2xpZGVPZmZzZXQ9bi5zbGlkZVdpZHRoKm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cqLTEscz0tMSwhMD09PW4ub3B0aW9ucy52ZXJ0aWNhbCYmITA9PT1uLm9wdGlvbnMuY2VudGVyTW9kZSYmKDI9PT1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P3M9LTEuNToxPT09bi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKHM9LTIpKSxyPXQqbi5vcHRpb25zLnNsaWRlc1RvU2hvdypzKSxuLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT0wJiZpK24ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbD5uLnNsaWRlQ291bnQmJm4uc2xpZGVDb3VudD5uLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaT5uLnNsaWRlQ291bnQ/KG4uc2xpZGVPZmZzZXQ9KG4ub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGktbi5zbGlkZUNvdW50KSkqbi5zbGlkZVdpZHRoKi0xLHI9KG4ub3B0aW9ucy5zbGlkZXNUb1Nob3ctKGktbi5zbGlkZUNvdW50KSkqdCotMSk6KG4uc2xpZGVPZmZzZXQ9bi5zbGlkZUNvdW50JW4ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCpuLnNsaWRlV2lkdGgqLTEscj1uLnNsaWRlQ291bnQlbi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKnQqLTEpKSk6aStuLm9wdGlvbnMuc2xpZGVzVG9TaG93Pm4uc2xpZGVDb3VudCYmKG4uc2xpZGVPZmZzZXQ9KGkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdy1uLnNsaWRlQ291bnQpKm4uc2xpZGVXaWR0aCxyPShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3ctbi5zbGlkZUNvdW50KSp0KSxuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihuLnNsaWRlT2Zmc2V0PTAscj0wKSwhMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiZuLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/bi5zbGlkZU9mZnNldD1uLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihuLm9wdGlvbnMuc2xpZGVzVG9TaG93KS8yLW4uc2xpZGVXaWR0aCpuLnNsaWRlQ291bnQvMjohMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYhMD09PW4ub3B0aW9ucy5pbmZpbml0ZT9uLnNsaWRlT2Zmc2V0Kz1uLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihuLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLW4uc2xpZGVXaWR0aDohMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlJiYobi5zbGlkZU9mZnNldD0wLG4uc2xpZGVPZmZzZXQrPW4uc2xpZGVXaWR0aCpNYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMikpLGU9ITE9PT1uLm9wdGlvbnMudmVydGljYWw/aSpuLnNsaWRlV2lkdGgqLTErbi5zbGlkZU9mZnNldDppKnQqLTErciwhMD09PW4ub3B0aW9ucy52YXJpYWJsZVdpZHRoJiYobz1uLnNsaWRlQ291bnQ8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3d8fCExPT09bi5vcHRpb25zLmluZmluaXRlP24uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaSk6bi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGU9ITA9PT1uLm9wdGlvbnMucnRsP29bMF0/LTEqKG4uJHNsaWRlVHJhY2sud2lkdGgoKS1vWzBdLm9mZnNldExlZnQtby53aWR0aCgpKTowOm9bMF0/LTEqb1swXS5vZmZzZXRMZWZ0OjAsITA9PT1uLm9wdGlvbnMuY2VudGVyTW9kZSYmKG89bi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93fHwhMT09PW4ub3B0aW9ucy5pbmZpbml0ZT9uLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGkpOm4uJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoaStuLm9wdGlvbnMuc2xpZGVzVG9TaG93KzEpLGU9ITA9PT1uLm9wdGlvbnMucnRsP29bMF0/LTEqKG4uJHNsaWRlVHJhY2sud2lkdGgoKS1vWzBdLm9mZnNldExlZnQtby53aWR0aCgpKTowOm9bMF0/LTEqb1swXS5vZmZzZXRMZWZ0OjAsZSs9KG4uJGxpc3Qud2lkdGgoKS1vLm91dGVyV2lkdGgoKSkvMikpLGV9LGUucHJvdG90eXBlLmdldE9wdGlvbj1lLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbj1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5vcHRpb25zW2ldfSxlLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzPWZ1bmN0aW9uKCl7dmFyIGksZT10aGlzLHQ9MCxvPTAscz1bXTtmb3IoITE9PT1lLm9wdGlvbnMuaW5maW5pdGU/aT1lLnNsaWRlQ291bnQ6KHQ9LTEqZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLG89LTEqZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGk9MiplLnNsaWRlQ291bnQpO3Q8aTspcy5wdXNoKHQpLHQ9bytlLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsbys9ZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1lLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDplLm9wdGlvbnMuc2xpZGVzVG9TaG93O3JldHVybiBzfSxlLnByb3RvdHlwZS5nZXRTbGljaz1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxlLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50PWZ1bmN0aW9uKCl7dmFyIGUsdCxvPXRoaXM7cmV0dXJuIHQ9ITA9PT1vLm9wdGlvbnMuY2VudGVyTW9kZT9vLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihvLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpOjAsITA9PT1vLm9wdGlvbnMuc3dpcGVUb1NsaWRlPyhvLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuZWFjaChmdW5jdGlvbihzLG4pe2lmKG4ub2Zmc2V0TGVmdC10K2kobikub3V0ZXJXaWR0aCgpLzI+LTEqby5zd2lwZUxlZnQpcmV0dXJuIGU9biwhMX0pLE1hdGguYWJzKGkoZSkuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIiktby5jdXJyZW50U2xpZGUpfHwxKTpvLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGx9LGUucHJvdG90eXBlLmdvVG89ZS5wcm90b3R5cGUuc2xpY2tHb1RvPWZ1bmN0aW9uKGksZSl7dGhpcy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcImluZGV4XCIsaW5kZXg6cGFyc2VJbnQoaSl9fSxlKX0sZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2kodC4kc2xpZGVyKS5oYXNDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpfHwoaSh0LiRzbGlkZXIpLmFkZENsYXNzKFwic2xpY2staW5pdGlhbGl6ZWRcIiksdC5idWlsZFJvd3MoKSx0LmJ1aWxkT3V0KCksdC5zZXRQcm9wcygpLHQuc3RhcnRMb2FkKCksdC5sb2FkU2xpZGVyKCksdC5pbml0aWFsaXplRXZlbnRzKCksdC51cGRhdGVBcnJvd3MoKSx0LnVwZGF0ZURvdHMoKSx0LmNoZWNrUmVzcG9uc2l2ZSghMCksdC5mb2N1c0hhbmRsZXIoKSksZSYmdC4kc2xpZGVyLnRyaWdnZXIoXCJpbml0XCIsW3RdKSwhMD09PXQub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZ0LmluaXRBREEoKSx0Lm9wdGlvbnMuYXV0b3BsYXkmJih0LnBhdXNlZD0hMSx0LmF1dG9QbGF5KCkpfSxlLnByb3RvdHlwZS5pbml0QURBPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PU1hdGguY2VpbChlLnNsaWRlQ291bnQvZS5vcHRpb25zLnNsaWRlc1RvU2hvdyksbz1lLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24oaSl7cmV0dXJuIGk+PTAmJmk8ZS5zbGlkZUNvdW50fSk7ZS4kc2xpZGVzLmFkZChlLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSkuZmluZChcImEsIGlucHV0LCBidXR0b24sIHNlbGVjdFwiKS5hdHRyKHt0YWJpbmRleDpcIi0xXCJ9KSxudWxsIT09ZS4kZG90cyYmKGUuJHNsaWRlcy5ub3QoZS4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKSkuZWFjaChmdW5jdGlvbih0KXt2YXIgcz1vLmluZGV4T2YodCk7aSh0aGlzKS5hdHRyKHtyb2xlOlwidGFicGFuZWxcIixpZDpcInNsaWNrLXNsaWRlXCIrZS5pbnN0YW5jZVVpZCt0LHRhYmluZGV4Oi0xfSksLTEhPT1zJiZpKHRoaXMpLmF0dHIoe1wiYXJpYS1kZXNjcmliZWRieVwiOlwic2xpY2stc2xpZGUtY29udHJvbFwiK2UuaW5zdGFuY2VVaWQrc30pfSksZS4kZG90cy5hdHRyKFwicm9sZVwiLFwidGFibGlzdFwiKS5maW5kKFwibGlcIikuZWFjaChmdW5jdGlvbihzKXt2YXIgbj1vW3NdO2kodGhpcykuYXR0cih7cm9sZTpcInByZXNlbnRhdGlvblwifSksaSh0aGlzKS5maW5kKFwiYnV0dG9uXCIpLmZpcnN0KCkuYXR0cih7cm9sZTpcInRhYlwiLGlkOlwic2xpY2stc2xpZGUtY29udHJvbFwiK2UuaW5zdGFuY2VVaWQrcyxcImFyaWEtY29udHJvbHNcIjpcInNsaWNrLXNsaWRlXCIrZS5pbnN0YW5jZVVpZCtuLFwiYXJpYS1sYWJlbFwiOnMrMStcIiBvZiBcIit0LFwiYXJpYS1zZWxlY3RlZFwiOm51bGwsdGFiaW5kZXg6XCItMVwifSl9KS5lcShlLmN1cnJlbnRTbGlkZSkuZmluZChcImJ1dHRvblwiKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcInRydWVcIix0YWJpbmRleDpcIjBcIn0pLmVuZCgpKTtmb3IodmFyIHM9ZS5jdXJyZW50U2xpZGUsbj1zK2Uub3B0aW9ucy5zbGlkZXNUb1Nob3c7czxuO3MrKyllLiRzbGlkZXMuZXEocykuYXR0cihcInRhYmluZGV4XCIsMCk7ZS5hY3RpdmF0ZUFEQSgpfSxlLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwicHJldmlvdXNcIn0saS5jaGFuZ2VTbGlkZSksaS4kbmV4dEFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcIm5leHRcIn0saS5jaGFuZ2VTbGlkZSksITA9PT1pLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmKGkuJHByZXZBcnJvdy5vbihcImtleWRvd24uc2xpY2tcIixpLmtleUhhbmRsZXIpLGkuJG5leHRBcnJvdy5vbihcImtleWRvd24uc2xpY2tcIixpLmtleUhhbmRsZXIpKSl9LGUucHJvdG90eXBlLmluaXREb3RFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyEwPT09ZS5vcHRpb25zLmRvdHMmJihpKFwibGlcIixlLiRkb3RzKS5vbihcImNsaWNrLnNsaWNrXCIse21lc3NhZ2U6XCJpbmRleFwifSxlLmNoYW5nZVNsaWRlKSwhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZlLiRkb3RzLm9uKFwia2V5ZG93bi5zbGlja1wiLGUua2V5SGFuZGxlcikpLCEwPT09ZS5vcHRpb25zLmRvdHMmJiEwPT09ZS5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXImJmkoXCJsaVwiLGUuJGRvdHMpLm9uKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLm9uKFwibW91c2VsZWF2ZS5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMSkpfSxlLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2Uub3B0aW9ucy5wYXVzZU9uSG92ZXImJihlLiRsaXN0Lm9uKFwibW91c2VlbnRlci5zbGlja1wiLGkucHJveHkoZS5pbnRlcnJ1cHQsZSwhMCkpLGUuJGxpc3Qub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsaS5wcm94eShlLmludGVycnVwdCxlLCExKSkpfSxlLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLmluaXRBcnJvd0V2ZW50cygpLGUuaW5pdERvdEV2ZW50cygpLGUuaW5pdFNsaWRlRXZlbnRzKCksZS4kbGlzdC5vbihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIse2FjdGlvbjpcInN0YXJ0XCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLHthY3Rpb246XCJtb3ZlXCJ9LGUuc3dpcGVIYW5kbGVyKSxlLiRsaXN0Lm9uKFwidG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGlja1wiLHthY3Rpb246XCJlbmRcIn0sZS5zd2lwZUhhbmRsZXIpLGUuJGxpc3Qub24oXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxlLnN3aXBlSGFuZGxlciksZS4kbGlzdC5vbihcImNsaWNrLnNsaWNrXCIsZS5jbGlja0hhbmRsZXIpLGkoZG9jdW1lbnQpLm9uKGUudmlzaWJpbGl0eUNoYW5nZSxpLnByb3h5KGUudmlzaWJpbGl0eSxlKSksITA9PT1lLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmZS4kbGlzdC5vbihcImtleWRvd24uc2xpY2tcIixlLmtleUhhbmRsZXIpLCEwPT09ZS5vcHRpb25zLmZvY3VzT25TZWxlY3QmJmkoZS4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbihcImNsaWNrLnNsaWNrXCIsZS5zZWxlY3RIYW5kbGVyKSxpKHdpbmRvdykub24oXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitlLmluc3RhbmNlVWlkLGkucHJveHkoZS5vcmllbnRhdGlvbkNoYW5nZSxlKSksaSh3aW5kb3cpLm9uKFwicmVzaXplLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsaS5wcm94eShlLnJlc2l6ZSxlKSksaShcIltkcmFnZ2FibGUhPXRydWVdXCIsZS4kc2xpZGVUcmFjaykub24oXCJkcmFnc3RhcnRcIixlLnByZXZlbnREZWZhdWx0KSxpKHdpbmRvdykub24oXCJsb2FkLnNsaWNrLnNsaWNrLVwiK2UuaW5zdGFuY2VVaWQsZS5zZXRQb3NpdGlvbiksaShlLnNldFBvc2l0aW9uKX0sZS5wcm90b3R5cGUuaW5pdFVJPWZ1bmN0aW9uKCl7dmFyIGk9dGhpczshMD09PWkub3B0aW9ucy5hcnJvd3MmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoaS4kcHJldkFycm93LnNob3coKSxpLiRuZXh0QXJyb3cuc2hvdygpKSwhMD09PWkub3B0aW9ucy5kb3RzJiZpLnNsaWRlQ291bnQ+aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmaS4kZG90cy5zaG93KCl9LGUucHJvdG90eXBlLmtleUhhbmRsZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztpLnRhcmdldC50YWdOYW1lLm1hdGNoKFwiVEVYVEFSRUF8SU5QVVR8U0VMRUNUXCIpfHwoMzc9PT1pLmtleUNvZGUmJiEwPT09ZS5vcHRpb25zLmFjY2Vzc2liaWxpdHk/ZS5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTohMD09PWUub3B0aW9ucy5ydGw/XCJuZXh0XCI6XCJwcmV2aW91c1wifX0pOjM5PT09aS5rZXlDb2RlJiYhMD09PWUub3B0aW9ucy5hY2Nlc3NpYmlsaXR5JiZlLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOiEwPT09ZS5vcHRpb25zLnJ0bD9cInByZXZpb3VzXCI6XCJuZXh0XCJ9fSkpfSxlLnByb3RvdHlwZS5sYXp5TG9hZD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7aShcImltZ1tkYXRhLWxhenldXCIsZSkuZWFjaChmdW5jdGlvbigpe3ZhciBlPWkodGhpcyksdD1pKHRoaXMpLmF0dHIoXCJkYXRhLWxhenlcIiksbz1pKHRoaXMpLmF0dHIoXCJkYXRhLXNyY3NldFwiKSxzPWkodGhpcykuYXR0cihcImRhdGEtc2l6ZXNcIil8fG4uJHNsaWRlci5hdHRyKFwiZGF0YS1zaXplc1wiKSxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7ci5vbmxvYWQ9ZnVuY3Rpb24oKXtlLmFuaW1hdGUoe29wYWNpdHk6MH0sMTAwLGZ1bmN0aW9uKCl7byYmKGUuYXR0cihcInNyY3NldFwiLG8pLHMmJmUuYXR0cihcInNpemVzXCIscykpLGUuYXR0cihcInNyY1wiLHQpLmFuaW1hdGUoe29wYWNpdHk6MX0sMjAwLGZ1bmN0aW9uKCl7ZS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXNcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSksbi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZGVkXCIsW24sZSx0XSl9KX0sci5vbmVycm9yPWZ1bmN0aW9uKCl7ZS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKS5hZGRDbGFzcyhcInNsaWNrLWxhenlsb2FkLWVycm9yXCIpLG4uJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRFcnJvclwiLFtuLGUsdF0pfSxyLnNyYz10fSl9dmFyIHQsbyxzLG49dGhpcztpZighMD09PW4ub3B0aW9ucy5jZW50ZXJNb2RlPyEwPT09bi5vcHRpb25zLmluZmluaXRlP3M9KG89bi5jdXJyZW50U2xpZGUrKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSkrbi5vcHRpb25zLnNsaWRlc1RvU2hvdysyOihvPU1hdGgubWF4KDAsbi5jdXJyZW50U2xpZGUtKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSkscz1uLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSsyK24uY3VycmVudFNsaWRlKToobz1uLm9wdGlvbnMuaW5maW5pdGU/bi5vcHRpb25zLnNsaWRlc1RvU2hvdytuLmN1cnJlbnRTbGlkZTpuLmN1cnJlbnRTbGlkZSxzPU1hdGguY2VpbChvK24ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLCEwPT09bi5vcHRpb25zLmZhZGUmJihvPjAmJm8tLSxzPD1uLnNsaWRlQ291bnQmJnMrKykpLHQ9bi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuc2xpY2UobyxzKSxcImFudGljaXBhdGVkXCI9PT1uLm9wdGlvbnMubGF6eUxvYWQpZm9yKHZhciByPW8tMSxsPXMsZD1uLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKSxhPTA7YTxuLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7YSsrKXI8MCYmKHI9bi5zbGlkZUNvdW50LTEpLHQ9KHQ9dC5hZGQoZC5lcShyKSkpLmFkZChkLmVxKGwpKSxyLS0sbCsrO2UodCksbi5zbGlkZUNvdW50PD1uLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Uobi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stc2xpZGVcIikpOm4uY3VycmVudFNsaWRlPj1uLnNsaWRlQ291bnQtbi5vcHRpb25zLnNsaWRlc1RvU2hvdz9lKG4uJHNsaWRlci5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5zbGljZSgwLG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKTowPT09bi5jdXJyZW50U2xpZGUmJmUobi4kc2xpZGVyLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpLnNsaWNlKC0xKm4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKX0sZS5wcm90b3R5cGUubG9hZFNsaWRlcj1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5zZXRQb3NpdGlvbigpLGkuJHNsaWRlVHJhY2suY3NzKHtvcGFjaXR5OjF9KSxpLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGkuaW5pdFVJKCksXCJwcm9ncmVzc2l2ZVwiPT09aS5vcHRpb25zLmxhenlMb2FkJiZpLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sZS5wcm90b3R5cGUubmV4dD1lLnByb3RvdHlwZS5zbGlja05leHQ9ZnVuY3Rpb24oKXt0aGlzLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwibmV4dFwifX0pfSxlLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5jaGVja1Jlc3BvbnNpdmUoKSxpLnNldFBvc2l0aW9uKCl9LGUucHJvdG90eXBlLnBhdXNlPWUucHJvdG90eXBlLnNsaWNrUGF1c2U9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuYXV0b1BsYXlDbGVhcigpLGkucGF1c2VkPSEwfSxlLnByb3RvdHlwZS5wbGF5PWUucHJvdG90eXBlLnNsaWNrUGxheT1mdW5jdGlvbigpe3ZhciBpPXRoaXM7aS5hdXRvUGxheSgpLGkub3B0aW9ucy5hdXRvcGxheT0hMCxpLnBhdXNlZD0hMSxpLmZvY3Vzc2VkPSExLGkuaW50ZXJydXB0ZWQ9ITF9LGUucHJvdG90eXBlLnBvc3RTbGlkZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3QudW5zbGlja2VkfHwodC4kc2xpZGVyLnRyaWdnZXIoXCJhZnRlckNoYW5nZVwiLFt0LGVdKSx0LmFuaW1hdGluZz0hMSx0LnNsaWRlQ291bnQ+dC5vcHRpb25zLnNsaWRlc1RvU2hvdyYmdC5zZXRQb3NpdGlvbigpLHQuc3dpcGVMZWZ0PW51bGwsdC5vcHRpb25zLmF1dG9wbGF5JiZ0LmF1dG9QbGF5KCksITA9PT10Lm9wdGlvbnMuYWNjZXNzaWJpbGl0eSYmKHQuaW5pdEFEQSgpLHQub3B0aW9ucy5mb2N1c09uQ2hhbmdlJiZpKHQuJHNsaWRlcy5nZXQodC5jdXJyZW50U2xpZGUpKS5hdHRyKFwidGFiaW5kZXhcIiwwKS5mb2N1cygpKSl9LGUucHJvdG90eXBlLnByZXY9ZS5wcm90b3R5cGUuc2xpY2tQcmV2PWZ1bmN0aW9uKCl7dGhpcy5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpcInByZXZpb3VzXCJ9fSl9LGUucHJvdG90eXBlLnByZXZlbnREZWZhdWx0PWZ1bmN0aW9uKGkpe2kucHJldmVudERlZmF1bHQoKX0sZS5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZD1mdW5jdGlvbihlKXtlPWV8fDE7dmFyIHQsbyxzLG4scixsPXRoaXMsZD1pKFwiaW1nW2RhdGEtbGF6eV1cIixsLiRzbGlkZXIpO2QubGVuZ3RoPyh0PWQuZmlyc3QoKSxvPXQuYXR0cihcImRhdGEtbGF6eVwiKSxzPXQuYXR0cihcImRhdGEtc3Jjc2V0XCIpLG49dC5hdHRyKFwiZGF0YS1zaXplc1wiKXx8bC4kc2xpZGVyLmF0dHIoXCJkYXRhLXNpemVzXCIpLChyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIikpLm9ubG9hZD1mdW5jdGlvbigpe3MmJih0LmF0dHIoXCJzcmNzZXRcIixzKSxuJiZ0LmF0dHIoXCJzaXplc1wiLG4pKSx0LmF0dHIoXCJzcmNcIixvKS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXNcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLCEwPT09bC5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0JiZsLnNldFBvc2l0aW9uKCksbC4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZGVkXCIsW2wsdCxvXSksbC5wcm9ncmVzc2l2ZUxhenlMb2FkKCl9LHIub25lcnJvcj1mdW5jdGlvbigpe2U8Mz9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5wcm9ncmVzc2l2ZUxhenlMb2FkKGUrMSl9LDUwMCk6KHQucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIikuYWRkQ2xhc3MoXCJzbGljay1sYXp5bG9hZC1lcnJvclwiKSxsLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkRXJyb3JcIixbbCx0LG9dKSxsLnByb2dyZXNzaXZlTGF6eUxvYWQoKSl9LHIuc3JjPW8pOmwuJHNsaWRlci50cmlnZ2VyKFwiYWxsSW1hZ2VzTG9hZGVkXCIsW2xdKX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbihlKXt2YXIgdCxvLHM9dGhpcztvPXMuc2xpZGVDb3VudC1zLm9wdGlvbnMuc2xpZGVzVG9TaG93LCFzLm9wdGlvbnMuaW5maW5pdGUmJnMuY3VycmVudFNsaWRlPm8mJihzLmN1cnJlbnRTbGlkZT1vKSxzLnNsaWRlQ291bnQ8PXMub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihzLmN1cnJlbnRTbGlkZT0wKSx0PXMuY3VycmVudFNsaWRlLHMuZGVzdHJveSghMCksaS5leHRlbmQocyxzLmluaXRpYWxzLHtjdXJyZW50U2xpZGU6dH0pLHMuaW5pdCgpLGV8fHMuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJpbmRleFwiLGluZGV4OnR9fSwhMSl9LGUucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHM9ZnVuY3Rpb24oKXt2YXIgZSx0LG8scz10aGlzLG49cy5vcHRpb25zLnJlc3BvbnNpdmV8fG51bGw7aWYoXCJhcnJheVwiPT09aS50eXBlKG4pJiZuLmxlbmd0aCl7cy5yZXNwb25kVG89cy5vcHRpb25zLnJlc3BvbmRUb3x8XCJ3aW5kb3dcIjtmb3IoZSBpbiBuKWlmKG89cy5icmVha3BvaW50cy5sZW5ndGgtMSxuLmhhc093blByb3BlcnR5KGUpKXtmb3IodD1uW2VdLmJyZWFrcG9pbnQ7bz49MDspcy5icmVha3BvaW50c1tvXSYmcy5icmVha3BvaW50c1tvXT09PXQmJnMuYnJlYWtwb2ludHMuc3BsaWNlKG8sMSksby0tO3MuYnJlYWtwb2ludHMucHVzaCh0KSxzLmJyZWFrcG9pbnRTZXR0aW5nc1t0XT1uW2VdLnNldHRpbmdzfXMuYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihpLGUpe3JldHVybiBzLm9wdGlvbnMubW9iaWxlRmlyc3Q/aS1lOmUtaX0pfX0sZS5wcm90b3R5cGUucmVpbml0PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLiRzbGlkZXM9ZS4kc2xpZGVUcmFjay5jaGlsZHJlbihlLm9wdGlvbnMuc2xpZGUpLmFkZENsYXNzKFwic2xpY2stc2xpZGVcIiksZS5zbGlkZUNvdW50PWUuJHNsaWRlcy5sZW5ndGgsZS5jdXJyZW50U2xpZGU+PWUuc2xpZGVDb3VudCYmMCE9PWUuY3VycmVudFNsaWRlJiYoZS5jdXJyZW50U2xpZGU9ZS5jdXJyZW50U2xpZGUtZS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSxlLnNsaWRlQ291bnQ8PWUub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihlLmN1cnJlbnRTbGlkZT0wKSxlLnJlZ2lzdGVyQnJlYWtwb2ludHMoKSxlLnNldFByb3BzKCksZS5zZXR1cEluZmluaXRlKCksZS5idWlsZEFycm93cygpLGUudXBkYXRlQXJyb3dzKCksZS5pbml0QXJyb3dFdmVudHMoKSxlLmJ1aWxkRG90cygpLGUudXBkYXRlRG90cygpLGUuaW5pdERvdEV2ZW50cygpLGUuY2xlYW5VcFNsaWRlRXZlbnRzKCksZS5pbml0U2xpZGVFdmVudHMoKSxlLmNoZWNrUmVzcG9uc2l2ZSghMSwhMCksITA9PT1lLm9wdGlvbnMuZm9jdXNPblNlbGVjdCYmaShlLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixlLnNlbGVjdEhhbmRsZXIpLGUuc2V0U2xpZGVDbGFzc2VzKFwibnVtYmVyXCI9PXR5cGVvZiBlLmN1cnJlbnRTbGlkZT9lLmN1cnJlbnRTbGlkZTowKSxlLnNldFBvc2l0aW9uKCksZS5mb2N1c0hhbmRsZXIoKSxlLnBhdXNlZD0hZS5vcHRpb25zLmF1dG9wbGF5LGUuYXV0b1BsYXkoKSxlLiRzbGlkZXIudHJpZ2dlcihcInJlSW5pdFwiLFtlXSl9LGUucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aSh3aW5kb3cpLndpZHRoKCkhPT1lLndpbmRvd1dpZHRoJiYoY2xlYXJUaW1lb3V0KGUud2luZG93RGVsYXkpLGUud2luZG93RGVsYXk9d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLndpbmRvd1dpZHRoPWkod2luZG93KS53aWR0aCgpLGUuY2hlY2tSZXNwb25zaXZlKCksZS51bnNsaWNrZWR8fGUuc2V0UG9zaXRpb24oKX0sNTApKX0sZS5wcm90b3R5cGUucmVtb3ZlU2xpZGU9ZS5wcm90b3R5cGUuc2xpY2tSZW1vdmU9ZnVuY3Rpb24oaSxlLHQpe3ZhciBvPXRoaXM7aWYoaT1cImJvb2xlYW5cIj09dHlwZW9mIGk/ITA9PT0oZT1pKT8wOm8uc2xpZGVDb3VudC0xOiEwPT09ZT8tLWk6aSxvLnNsaWRlQ291bnQ8MXx8aTwwfHxpPm8uc2xpZGVDb3VudC0xKXJldHVybiExO28udW5sb2FkKCksITA9PT10P28uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTpvLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZXEoaSkucmVtb3ZlKCksby4kc2xpZGVzPW8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxvLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksby4kc2xpZGVUcmFjay5hcHBlbmQoby4kc2xpZGVzKSxvLiRzbGlkZXNDYWNoZT1vLiRzbGlkZXMsby5yZWluaXQoKX0sZS5wcm90b3R5cGUuc2V0Q1NTPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbz10aGlzLHM9e307ITA9PT1vLm9wdGlvbnMucnRsJiYoaT0taSksZT1cImxlZnRcIj09by5wb3NpdGlvblByb3A/TWF0aC5jZWlsKGkpK1wicHhcIjpcIjBweFwiLHQ9XCJ0b3BcIj09by5wb3NpdGlvblByb3A/TWF0aC5jZWlsKGkpK1wicHhcIjpcIjBweFwiLHNbby5wb3NpdGlvblByb3BdPWksITE9PT1vLnRyYW5zZm9ybXNFbmFibGVkP28uJHNsaWRlVHJhY2suY3NzKHMpOihzPXt9LCExPT09by5jc3NUcmFuc2l0aW9ucz8oc1tvLmFuaW1UeXBlXT1cInRyYW5zbGF0ZShcIitlK1wiLCBcIit0K1wiKVwiLG8uJHNsaWRlVHJhY2suY3NzKHMpKTooc1tvLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2UrXCIsIFwiK3QrXCIsIDBweClcIixvLiRzbGlkZVRyYWNrLmNzcyhzKSkpfSxlLnByb3RvdHlwZS5zZXREaW1lbnNpb25zPWZ1bmN0aW9uKCl7dmFyIGk9dGhpczshMT09PWkub3B0aW9ucy52ZXJ0aWNhbD8hMD09PWkub3B0aW9ucy5jZW50ZXJNb2RlJiZpLiRsaXN0LmNzcyh7cGFkZGluZzpcIjBweCBcIitpLm9wdGlvbnMuY2VudGVyUGFkZGluZ30pOihpLiRsaXN0LmhlaWdodChpLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCkqaS5vcHRpb25zLnNsaWRlc1RvU2hvdyksITA9PT1pLm9wdGlvbnMuY2VudGVyTW9kZSYmaS4kbGlzdC5jc3Moe3BhZGRpbmc6aS5vcHRpb25zLmNlbnRlclBhZGRpbmcrXCIgMHB4XCJ9KSksaS5saXN0V2lkdGg9aS4kbGlzdC53aWR0aCgpLGkubGlzdEhlaWdodD1pLiRsaXN0LmhlaWdodCgpLCExPT09aS5vcHRpb25zLnZlcnRpY2FsJiYhMT09PWkub3B0aW9ucy52YXJpYWJsZVdpZHRoPyhpLnNsaWRlV2lkdGg9TWF0aC5jZWlsKGkubGlzdFdpZHRoL2kub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGkuJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKGkuc2xpZGVXaWR0aCppLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmxlbmd0aCkpKTohMD09PWkub3B0aW9ucy52YXJpYWJsZVdpZHRoP2kuJHNsaWRlVHJhY2sud2lkdGgoNWUzKmkuc2xpZGVDb3VudCk6KGkuc2xpZGVXaWR0aD1NYXRoLmNlaWwoaS5saXN0V2lkdGgpLGkuJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbChpLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCkqaS4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5sZW5ndGgpKSk7dmFyIGU9aS4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCghMCktaS4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTshMT09PWkub3B0aW9ucy52YXJpYWJsZVdpZHRoJiZpLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLndpZHRoKGkuc2xpZGVXaWR0aC1lKX0sZS5wcm90b3R5cGUuc2V0RmFkZT1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpczt0LiRzbGlkZXMuZWFjaChmdW5jdGlvbihvLHMpe2U9dC5zbGlkZVdpZHRoKm8qLTEsITA9PT10Lm9wdGlvbnMucnRsP2kocykuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIscmlnaHQ6ZSx0b3A6MCx6SW5kZXg6dC5vcHRpb25zLnpJbmRleC0yLG9wYWNpdHk6MH0pOmkocykuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCIsbGVmdDplLHRvcDowLHpJbmRleDp0Lm9wdGlvbnMuekluZGV4LTIsb3BhY2l0eTowfSl9KSx0LiRzbGlkZXMuZXEodC5jdXJyZW50U2xpZGUpLmNzcyh7ekluZGV4OnQub3B0aW9ucy56SW5kZXgtMSxvcGFjaXR5OjF9KX0sZS5wcm90b3R5cGUuc2V0SGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpZigxPT09aS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmITA9PT1pLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQmJiExPT09aS5vcHRpb25zLnZlcnRpY2FsKXt2YXIgZT1pLiRzbGlkZXMuZXEoaS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTtpLiRsaXN0LmNzcyhcImhlaWdodFwiLGUpfX0sZS5wcm90b3R5cGUuc2V0T3B0aW9uPWUucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uPWZ1bmN0aW9uKCl7dmFyIGUsdCxvLHMsbixyPXRoaXMsbD0hMTtpZihcIm9iamVjdFwiPT09aS50eXBlKGFyZ3VtZW50c1swXSk/KG89YXJndW1lbnRzWzBdLGw9YXJndW1lbnRzWzFdLG49XCJtdWx0aXBsZVwiKTpcInN0cmluZ1wiPT09aS50eXBlKGFyZ3VtZW50c1swXSkmJihvPWFyZ3VtZW50c1swXSxzPWFyZ3VtZW50c1sxXSxsPWFyZ3VtZW50c1syXSxcInJlc3BvbnNpdmVcIj09PWFyZ3VtZW50c1swXSYmXCJhcnJheVwiPT09aS50eXBlKGFyZ3VtZW50c1sxXSk/bj1cInJlc3BvbnNpdmVcIjp2b2lkIDAhPT1hcmd1bWVudHNbMV0mJihuPVwic2luZ2xlXCIpKSxcInNpbmdsZVwiPT09bilyLm9wdGlvbnNbb109cztlbHNlIGlmKFwibXVsdGlwbGVcIj09PW4paS5lYWNoKG8sZnVuY3Rpb24oaSxlKXtyLm9wdGlvbnNbaV09ZX0pO2Vsc2UgaWYoXCJyZXNwb25zaXZlXCI9PT1uKWZvcih0IGluIHMpaWYoXCJhcnJheVwiIT09aS50eXBlKHIub3B0aW9ucy5yZXNwb25zaXZlKSlyLm9wdGlvbnMucmVzcG9uc2l2ZT1bc1t0XV07ZWxzZXtmb3IoZT1yLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtlPj0wOylyLm9wdGlvbnMucmVzcG9uc2l2ZVtlXS5icmVha3BvaW50PT09c1t0XS5icmVha3BvaW50JiZyLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UoZSwxKSxlLS07ci5vcHRpb25zLnJlc3BvbnNpdmUucHVzaChzW3RdKX1sJiYoci51bmxvYWQoKSxyLnJlaW5pdCgpKX0sZS5wcm90b3R5cGUuc2V0UG9zaXRpb249ZnVuY3Rpb24oKXt2YXIgaT10aGlzO2kuc2V0RGltZW5zaW9ucygpLGkuc2V0SGVpZ2h0KCksITE9PT1pLm9wdGlvbnMuZmFkZT9pLnNldENTUyhpLmdldExlZnQoaS5jdXJyZW50U2xpZGUpKTppLnNldEZhZGUoKSxpLiRzbGlkZXIudHJpZ2dlcihcInNldFBvc2l0aW9uXCIsW2ldKX0sZS5wcm90b3R5cGUuc2V0UHJvcHM9ZnVuY3Rpb24oKXt2YXIgaT10aGlzLGU9ZG9jdW1lbnQuYm9keS5zdHlsZTtpLnBvc2l0aW9uUHJvcD0hMD09PWkub3B0aW9ucy52ZXJ0aWNhbD9cInRvcFwiOlwibGVmdFwiLFwidG9wXCI9PT1pLnBvc2l0aW9uUHJvcD9pLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKTppLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay12ZXJ0aWNhbFwiKSx2b2lkIDA9PT1lLldlYmtpdFRyYW5zaXRpb24mJnZvaWQgMD09PWUuTW96VHJhbnNpdGlvbiYmdm9pZCAwPT09ZS5tc1RyYW5zaXRpb258fCEwPT09aS5vcHRpb25zLnVzZUNTUyYmKGkuY3NzVHJhbnNpdGlvbnM9ITApLGkub3B0aW9ucy5mYWRlJiYoXCJudW1iZXJcIj09dHlwZW9mIGkub3B0aW9ucy56SW5kZXg/aS5vcHRpb25zLnpJbmRleDwzJiYoaS5vcHRpb25zLnpJbmRleD0zKTppLm9wdGlvbnMuekluZGV4PWkuZGVmYXVsdHMuekluZGV4KSx2b2lkIDAhPT1lLk9UcmFuc2Zvcm0mJihpLmFuaW1UeXBlPVwiT1RyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1vLXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJPVHJhbnNpdGlvblwiLHZvaWQgMD09PWUucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09ZS53ZWJraXRQZXJzcGVjdGl2ZSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLk1velRyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJNb3pUcmFuc2Zvcm1cIixpLnRyYW5zZm9ybVR5cGU9XCItbW96LXRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJNb3pUcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1lLk1velBlcnNwZWN0aXZlJiYoaS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWUud2Via2l0VHJhbnNmb3JtJiYoaS5hbmltVHlwZT1cIndlYmtpdFRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi13ZWJraXQtdHJhbnNmb3JtXCIsaS50cmFuc2l0aW9uVHlwZT1cIndlYmtpdFRyYW5zaXRpb25cIix2b2lkIDA9PT1lLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWUud2Via2l0UGVyc3BlY3RpdmUmJihpLmFuaW1UeXBlPSExKSksdm9pZCAwIT09ZS5tc1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9XCJtc1RyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cIi1tcy10cmFuc2Zvcm1cIixpLnRyYW5zaXRpb25UeXBlPVwibXNUcmFuc2l0aW9uXCIsdm9pZCAwPT09ZS5tc1RyYW5zZm9ybSYmKGkuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1lLnRyYW5zZm9ybSYmITEhPT1pLmFuaW1UeXBlJiYoaS5hbmltVHlwZT1cInRyYW5zZm9ybVwiLGkudHJhbnNmb3JtVHlwZT1cInRyYW5zZm9ybVwiLGkudHJhbnNpdGlvblR5cGU9XCJ0cmFuc2l0aW9uXCIpLGkudHJhbnNmb3Jtc0VuYWJsZWQ9aS5vcHRpb25zLnVzZVRyYW5zZm9ybSYmbnVsbCE9PWkuYW5pbVR5cGUmJiExIT09aS5hbmltVHlwZX0sZS5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzPWZ1bmN0aW9uKGkpe3ZhciBlLHQsbyxzLG49dGhpcztpZih0PW4uJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLnJlbW92ZUNsYXNzKFwic2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50XCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxuLiRzbGlkZXMuZXEoaSkuYWRkQ2xhc3MoXCJzbGljay1jdXJyZW50XCIpLCEwPT09bi5vcHRpb25zLmNlbnRlck1vZGUpe3ZhciByPW4ub3B0aW9ucy5zbGlkZXNUb1Nob3clMj09MD8xOjA7ZT1NYXRoLmZsb29yKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiksITA9PT1uLm9wdGlvbnMuaW5maW5pdGUmJihpPj1lJiZpPD1uLnNsaWRlQ291bnQtMS1lP24uJHNsaWRlcy5zbGljZShpLWUrcixpK2UrMSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKToobz1uLm9wdGlvbnMuc2xpZGVzVG9TaG93K2ksdC5zbGljZShvLWUrMStyLG8rZSsyKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSwwPT09aT90LmVxKHQubGVuZ3RoLTEtbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIik6aT09PW4uc2xpZGVDb3VudC0xJiZ0LmVxKG4ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpKSxuLiRzbGlkZXMuZXEoaSkuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIil9ZWxzZSBpPj0wJiZpPD1uLnNsaWRlQ291bnQtbi5vcHRpb25zLnNsaWRlc1RvU2hvdz9uLiRzbGlkZXMuc2xpY2UoaSxpK24ub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6dC5sZW5ndGg8PW4ub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpOihzPW4uc2xpZGVDb3VudCVuLm9wdGlvbnMuc2xpZGVzVG9TaG93LG89ITA9PT1uLm9wdGlvbnMuaW5maW5pdGU/bi5vcHRpb25zLnNsaWRlc1RvU2hvdytpOmksbi5vcHRpb25zLnNsaWRlc1RvU2hvdz09bi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsJiZuLnNsaWRlQ291bnQtaTxuLm9wdGlvbnMuc2xpZGVzVG9TaG93P3Quc2xpY2Uoby0obi5vcHRpb25zLnNsaWRlc1RvU2hvdy1zKSxvK3MpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6dC5zbGljZShvLG8rbi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSk7XCJvbmRlbWFuZFwiIT09bi5vcHRpb25zLmxhenlMb2FkJiZcImFudGljaXBhdGVkXCIhPT1uLm9wdGlvbnMubGF6eUxvYWR8fG4ubGF6eUxvYWQoKX0sZS5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZT1mdW5jdGlvbigpe3ZhciBlLHQsbyxzPXRoaXM7aWYoITA9PT1zLm9wdGlvbnMuZmFkZSYmKHMub3B0aW9ucy5jZW50ZXJNb2RlPSExKSwhMD09PXMub3B0aW9ucy5pbmZpbml0ZSYmITE9PT1zLm9wdGlvbnMuZmFkZSYmKHQ9bnVsbCxzLnNsaWRlQ291bnQ+cy5vcHRpb25zLnNsaWRlc1RvU2hvdykpe2ZvcihvPSEwPT09cy5vcHRpb25zLmNlbnRlck1vZGU/cy5vcHRpb25zLnNsaWRlc1RvU2hvdysxOnMub3B0aW9ucy5zbGlkZXNUb1Nob3csZT1zLnNsaWRlQ291bnQ7ZT5zLnNsaWRlQ291bnQtbztlLT0xKXQ9ZS0xLGkocy4kc2xpZGVzW3RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIix0LXMuc2xpZGVDb3VudCkucHJlcGVuZFRvKHMuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO2ZvcihlPTA7ZTxvK3Muc2xpZGVDb3VudDtlKz0xKXQ9ZSxpKHMuJHNsaWRlc1t0XSkuY2xvbmUoITApLmF0dHIoXCJpZFwiLFwiXCIpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsdCtzLnNsaWRlQ291bnQpLmFwcGVuZFRvKHMuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO3MuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1jbG9uZWRcIikuZmluZChcIltpZF1cIikuZWFjaChmdW5jdGlvbigpe2kodGhpcykuYXR0cihcImlkXCIsXCJcIil9KX19LGUucHJvdG90eXBlLmludGVycnVwdD1mdW5jdGlvbihpKXt2YXIgZT10aGlzO2l8fGUuYXV0b1BsYXkoKSxlLmludGVycnVwdGVkPWl9LGUucHJvdG90eXBlLnNlbGVjdEhhbmRsZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxvPWkoZS50YXJnZXQpLmlzKFwiLnNsaWNrLXNsaWRlXCIpP2koZS50YXJnZXQpOmkoZS50YXJnZXQpLnBhcmVudHMoXCIuc2xpY2stc2xpZGVcIikscz1wYXJzZUludChvLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIpKTtzfHwocz0wKSx0LnNsaWRlQ291bnQ8PXQub3B0aW9ucy5zbGlkZXNUb1Nob3c/dC5zbGlkZUhhbmRsZXIocywhMSwhMCk6dC5zbGlkZUhhbmRsZXIocyl9LGUucHJvdG90eXBlLnNsaWRlSGFuZGxlcj1mdW5jdGlvbihpLGUsdCl7dmFyIG8scyxuLHIsbCxkPW51bGwsYT10aGlzO2lmKGU9ZXx8ITEsISghMD09PWEuYW5pbWF0aW5nJiYhMD09PWEub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZXx8ITA9PT1hLm9wdGlvbnMuZmFkZSYmYS5jdXJyZW50U2xpZGU9PT1pKSlpZighMT09PWUmJmEuYXNOYXZGb3IoaSksbz1pLGQ9YS5nZXRMZWZ0KG8pLHI9YS5nZXRMZWZ0KGEuY3VycmVudFNsaWRlKSxhLmN1cnJlbnRMZWZ0PW51bGw9PT1hLnN3aXBlTGVmdD9yOmEuc3dpcGVMZWZ0LCExPT09YS5vcHRpb25zLmluZmluaXRlJiYhMT09PWEub3B0aW9ucy5jZW50ZXJNb2RlJiYoaTwwfHxpPmEuZ2V0RG90Q291bnQoKSphLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSExPT09YS5vcHRpb25zLmZhZGUmJihvPWEuY3VycmVudFNsaWRlLCEwIT09dD9hLmFuaW1hdGVTbGlkZShyLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUobyl9KTphLnBvc3RTbGlkZShvKSk7ZWxzZSBpZighMT09PWEub3B0aW9ucy5pbmZpbml0ZSYmITA9PT1hLm9wdGlvbnMuY2VudGVyTW9kZSYmKGk8MHx8aT5hLnNsaWRlQ291bnQtYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkhMT09PWEub3B0aW9ucy5mYWRlJiYobz1hLmN1cnJlbnRTbGlkZSwhMCE9PXQ/YS5hbmltYXRlU2xpZGUocixmdW5jdGlvbigpe2EucG9zdFNsaWRlKG8pfSk6YS5wb3N0U2xpZGUobykpO2Vsc2V7aWYoYS5vcHRpb25zLmF1dG9wbGF5JiZjbGVhckludGVydmFsKGEuYXV0b1BsYXlUaW1lcikscz1vPDA/YS5zbGlkZUNvdW50JWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9MD9hLnNsaWRlQ291bnQtYS5zbGlkZUNvdW50JWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDphLnNsaWRlQ291bnQrbzpvPj1hLnNsaWRlQ291bnQ/YS5zbGlkZUNvdW50JWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9MD8wOm8tYS5zbGlkZUNvdW50Om8sYS5hbmltYXRpbmc9ITAsYS4kc2xpZGVyLnRyaWdnZXIoXCJiZWZvcmVDaGFuZ2VcIixbYSxhLmN1cnJlbnRTbGlkZSxzXSksbj1hLmN1cnJlbnRTbGlkZSxhLmN1cnJlbnRTbGlkZT1zLGEuc2V0U2xpZGVDbGFzc2VzKGEuY3VycmVudFNsaWRlKSxhLm9wdGlvbnMuYXNOYXZGb3ImJihsPShsPWEuZ2V0TmF2VGFyZ2V0KCkpLnNsaWNrKFwiZ2V0U2xpY2tcIikpLnNsaWRlQ291bnQ8PWwub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmwuc2V0U2xpZGVDbGFzc2VzKGEuY3VycmVudFNsaWRlKSxhLnVwZGF0ZURvdHMoKSxhLnVwZGF0ZUFycm93cygpLCEwPT09YS5vcHRpb25zLmZhZGUpcmV0dXJuITAhPT10PyhhLmZhZGVTbGlkZU91dChuKSxhLmZhZGVTbGlkZShzLGZ1bmN0aW9uKCl7YS5wb3N0U2xpZGUocyl9KSk6YS5wb3N0U2xpZGUocyksdm9pZCBhLmFuaW1hdGVIZWlnaHQoKTshMCE9PXQ/YS5hbmltYXRlU2xpZGUoZCxmdW5jdGlvbigpe2EucG9zdFNsaWRlKHMpfSk6YS5wb3N0U2xpZGUocyl9fSxlLnByb3RvdHlwZS5zdGFydExvYWQ9ZnVuY3Rpb24oKXt2YXIgaT10aGlzOyEwPT09aS5vcHRpb25zLmFycm93cyYmaS5zbGlkZUNvdW50Pmkub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihpLiRwcmV2QXJyb3cuaGlkZSgpLGkuJG5leHRBcnJvdy5oaWRlKCkpLCEwPT09aS5vcHRpb25zLmRvdHMmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZpLiRkb3RzLmhpZGUoKSxpLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpfSxlLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbj1mdW5jdGlvbigpe3ZhciBpLGUsdCxvLHM9dGhpcztyZXR1cm4gaT1zLnRvdWNoT2JqZWN0LnN0YXJ0WC1zLnRvdWNoT2JqZWN0LmN1clgsZT1zLnRvdWNoT2JqZWN0LnN0YXJ0WS1zLnRvdWNoT2JqZWN0LmN1clksdD1NYXRoLmF0YW4yKGUsaSksKG89TWF0aC5yb3VuZCgxODAqdC9NYXRoLlBJKSk8MCYmKG89MzYwLU1hdGguYWJzKG8pKSxvPD00NSYmbz49MD8hMT09PXMub3B0aW9ucy5ydGw/XCJsZWZ0XCI6XCJyaWdodFwiOm88PTM2MCYmbz49MzE1PyExPT09cy5vcHRpb25zLnJ0bD9cImxlZnRcIjpcInJpZ2h0XCI6bz49MTM1JiZvPD0yMjU/ITE9PT1zLm9wdGlvbnMucnRsP1wicmlnaHRcIjpcImxlZnRcIjohMD09PXMub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc/bz49MzUmJm88PTEzNT9cImRvd25cIjpcInVwXCI6XCJ2ZXJ0aWNhbFwifSxlLnByb3RvdHlwZS5zd2lwZUVuZD1mdW5jdGlvbihpKXt2YXIgZSx0LG89dGhpcztpZihvLmRyYWdnaW5nPSExLG8uc3dpcGluZz0hMSxvLnNjcm9sbGluZylyZXR1cm4gby5zY3JvbGxpbmc9ITEsITE7aWYoby5pbnRlcnJ1cHRlZD0hMSxvLnNob3VsZENsaWNrPSEoby50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD4xMCksdm9pZCAwPT09by50b3VjaE9iamVjdC5jdXJYKXJldHVybiExO2lmKCEwPT09by50b3VjaE9iamVjdC5lZGdlSGl0JiZvLiRzbGlkZXIudHJpZ2dlcihcImVkZ2VcIixbbyxvLnN3aXBlRGlyZWN0aW9uKCldKSxvLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPj1vLnRvdWNoT2JqZWN0Lm1pblN3aXBlKXtzd2l0Y2godD1vLnN3aXBlRGlyZWN0aW9uKCkpe2Nhc2VcImxlZnRcIjpjYXNlXCJkb3duXCI6ZT1vLm9wdGlvbnMuc3dpcGVUb1NsaWRlP28uY2hlY2tOYXZpZ2FibGUoby5jdXJyZW50U2xpZGUrby5nZXRTbGlkZUNvdW50KCkpOm8uY3VycmVudFNsaWRlK28uZ2V0U2xpZGVDb3VudCgpLG8uY3VycmVudERpcmVjdGlvbj0wO2JyZWFrO2Nhc2VcInJpZ2h0XCI6Y2FzZVwidXBcIjplPW8ub3B0aW9ucy5zd2lwZVRvU2xpZGU/by5jaGVja05hdmlnYWJsZShvLmN1cnJlbnRTbGlkZS1vLmdldFNsaWRlQ291bnQoKSk6by5jdXJyZW50U2xpZGUtby5nZXRTbGlkZUNvdW50KCksby5jdXJyZW50RGlyZWN0aW9uPTF9XCJ2ZXJ0aWNhbFwiIT10JiYoby5zbGlkZUhhbmRsZXIoZSksby50b3VjaE9iamVjdD17fSxvLiRzbGlkZXIudHJpZ2dlcihcInN3aXBlXCIsW28sdF0pKX1lbHNlIG8udG91Y2hPYmplY3Quc3RhcnRYIT09by50b3VjaE9iamVjdC5jdXJYJiYoby5zbGlkZUhhbmRsZXIoby5jdXJyZW50U2xpZGUpLG8udG91Y2hPYmplY3Q9e30pfSxlLnByb3RvdHlwZS5zd2lwZUhhbmRsZXI9ZnVuY3Rpb24oaSl7dmFyIGU9dGhpcztpZighKCExPT09ZS5vcHRpb25zLnN3aXBlfHxcIm9udG91Y2hlbmRcImluIGRvY3VtZW50JiYhMT09PWUub3B0aW9ucy5zd2lwZXx8ITE9PT1lLm9wdGlvbnMuZHJhZ2dhYmxlJiYtMSE9PWkudHlwZS5pbmRleE9mKFwibW91c2VcIikpKXN3aXRjaChlLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50PWkub3JpZ2luYWxFdmVudCYmdm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM/aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoOjEsZS50b3VjaE9iamVjdC5taW5Td2lwZT1lLmxpc3RXaWR0aC9lLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQsITA9PT1lLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYoZS50b3VjaE9iamVjdC5taW5Td2lwZT1lLmxpc3RIZWlnaHQvZS5vcHRpb25zLnRvdWNoVGhyZXNob2xkKSxpLmRhdGEuYWN0aW9uKXtjYXNlXCJzdGFydFwiOmUuc3dpcGVTdGFydChpKTticmVhaztjYXNlXCJtb3ZlXCI6ZS5zd2lwZU1vdmUoaSk7YnJlYWs7Y2FzZVwiZW5kXCI6ZS5zd2lwZUVuZChpKX19LGUucHJvdG90eXBlLnN3aXBlTW92ZT1mdW5jdGlvbihpKXt2YXIgZSx0LG8scyxuLHIsbD10aGlzO3JldHVybiBuPXZvaWQgMCE9PWkub3JpZ2luYWxFdmVudD9pLm9yaWdpbmFsRXZlbnQudG91Y2hlczpudWxsLCEoIWwuZHJhZ2dpbmd8fGwuc2Nyb2xsaW5nfHxuJiYxIT09bi5sZW5ndGgpJiYoZT1sLmdldExlZnQobC5jdXJyZW50U2xpZGUpLGwudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1uP25bMF0ucGFnZVg6aS5jbGllbnRYLGwudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1uP25bMF0ucGFnZVk6aS5jbGllbnRZLGwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg9TWF0aC5yb3VuZChNYXRoLnNxcnQoTWF0aC5wb3cobC50b3VjaE9iamVjdC5jdXJYLWwudG91Y2hPYmplY3Quc3RhcnRYLDIpKSkscj1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhsLnRvdWNoT2JqZWN0LmN1clktbC50b3VjaE9iamVjdC5zdGFydFksMikpKSwhbC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmIWwuc3dpcGluZyYmcj40PyhsLnNjcm9sbGluZz0hMCwhMSk6KCEwPT09bC5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyYmKGwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg9ciksdD1sLnN3aXBlRGlyZWN0aW9uKCksdm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50JiZsLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPjQmJihsLnN3aXBpbmc9ITAsaS5wcmV2ZW50RGVmYXVsdCgpKSxzPSghMT09PWwub3B0aW9ucy5ydGw/MTotMSkqKGwudG91Y2hPYmplY3QuY3VyWD5sLnRvdWNoT2JqZWN0LnN0YXJ0WD8xOi0xKSwhMD09PWwub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcmJihzPWwudG91Y2hPYmplY3QuY3VyWT5sLnRvdWNoT2JqZWN0LnN0YXJ0WT8xOi0xKSxvPWwudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgsbC50b3VjaE9iamVjdC5lZGdlSGl0PSExLCExPT09bC5vcHRpb25zLmluZmluaXRlJiYoMD09PWwuY3VycmVudFNsaWRlJiZcInJpZ2h0XCI9PT10fHxsLmN1cnJlbnRTbGlkZT49bC5nZXREb3RDb3VudCgpJiZcImxlZnRcIj09PXQpJiYobz1sLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoKmwub3B0aW9ucy5lZGdlRnJpY3Rpb24sbC50b3VjaE9iamVjdC5lZGdlSGl0PSEwKSwhMT09PWwub3B0aW9ucy52ZXJ0aWNhbD9sLnN3aXBlTGVmdD1lK28qczpsLnN3aXBlTGVmdD1lK28qKGwuJGxpc3QuaGVpZ2h0KCkvbC5saXN0V2lkdGgpKnMsITA9PT1sLm9wdGlvbnMudmVydGljYWxTd2lwaW5nJiYobC5zd2lwZUxlZnQ9ZStvKnMpLCEwIT09bC5vcHRpb25zLmZhZGUmJiExIT09bC5vcHRpb25zLnRvdWNoTW92ZSYmKCEwPT09bC5hbmltYXRpbmc/KGwuc3dpcGVMZWZ0PW51bGwsITEpOnZvaWQgbC5zZXRDU1MobC5zd2lwZUxlZnQpKSkpfSxlLnByb3RvdHlwZS5zd2lwZVN0YXJ0PWZ1bmN0aW9uKGkpe3ZhciBlLHQ9dGhpcztpZih0LmludGVycnVwdGVkPSEwLDEhPT10LnRvdWNoT2JqZWN0LmZpbmdlckNvdW50fHx0LnNsaWRlQ291bnQ8PXQub3B0aW9ucy5zbGlkZXNUb1Nob3cpcmV0dXJuIHQudG91Y2hPYmplY3Q9e30sITE7dm9pZCAwIT09aS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1pLm9yaWdpbmFsRXZlbnQudG91Y2hlcyYmKGU9aS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0pLHQudG91Y2hPYmplY3Quc3RhcnRYPXQudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1lP2UucGFnZVg6aS5jbGllbnRYLHQudG91Y2hPYmplY3Quc3RhcnRZPXQudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1lP2UucGFnZVk6aS5jbGllbnRZLHQuZHJhZ2dpbmc9ITB9LGUucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzPWUucHJvdG90eXBlLnNsaWNrVW5maWx0ZXI9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO251bGwhPT1pLiRzbGlkZXNDYWNoZSYmKGkudW5sb2FkKCksaS4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGkuJHNsaWRlc0NhY2hlLmFwcGVuZFRvKGkuJHNsaWRlVHJhY2spLGkucmVpbml0KCkpfSxlLnByb3RvdHlwZS51bmxvYWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2koXCIuc2xpY2stY2xvbmVkXCIsZS4kc2xpZGVyKS5yZW1vdmUoKSxlLiRkb3RzJiZlLiRkb3RzLnJlbW92ZSgpLGUuJHByZXZBcnJvdyYmZS5odG1sRXhwci50ZXN0KGUub3B0aW9ucy5wcmV2QXJyb3cpJiZlLiRwcmV2QXJyb3cucmVtb3ZlKCksZS4kbmV4dEFycm93JiZlLmh0bWxFeHByLnRlc3QoZS5vcHRpb25zLm5leHRBcnJvdykmJmUuJG5leHRBcnJvdy5yZW1vdmUoKSxlLiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50XCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKS5jc3MoXCJ3aWR0aFwiLFwiXCIpfSxlLnByb3RvdHlwZS51bnNsaWNrPWZ1bmN0aW9uKGkpe3ZhciBlPXRoaXM7ZS4kc2xpZGVyLnRyaWdnZXIoXCJ1bnNsaWNrXCIsW2UsaV0pLGUuZGVzdHJveSgpfSxlLnByb3RvdHlwZS51cGRhdGVBcnJvd3M9ZnVuY3Rpb24oKXt2YXIgaT10aGlzO01hdGguZmxvb3IoaS5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSwhMD09PWkub3B0aW9ucy5hcnJvd3MmJmkuc2xpZGVDb3VudD5pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhaS5vcHRpb25zLmluZmluaXRlJiYoaS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLGkuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSwwPT09aS5jdXJyZW50U2xpZGU/KGkuJHByZXZBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGkuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6aS5jdXJyZW50U2xpZGU+PWkuc2xpZGVDb3VudC1pLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYhMT09PWkub3B0aW9ucy5jZW50ZXJNb2RlPyhpLiRuZXh0QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxpLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIikpOmkuY3VycmVudFNsaWRlPj1pLnNsaWRlQ291bnQtMSYmITA9PT1pLm9wdGlvbnMuY2VudGVyTW9kZSYmKGkuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGkuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSkpfSxlLnByb3RvdHlwZS51cGRhdGVEb3RzPWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztudWxsIT09aS4kZG90cyYmKGkuJGRvdHMuZmluZChcImxpXCIpLnJlbW92ZUNsYXNzKFwic2xpY2stYWN0aXZlXCIpLmVuZCgpLGkuJGRvdHMuZmluZChcImxpXCIpLmVxKE1hdGguZmxvb3IoaS5jdXJyZW50U2xpZGUvaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikpfSxlLnByb3RvdHlwZS52aXNpYmlsaXR5PWZ1bmN0aW9uKCl7dmFyIGk9dGhpcztpLm9wdGlvbnMuYXV0b3BsYXkmJihkb2N1bWVudFtpLmhpZGRlbl0/aS5pbnRlcnJ1cHRlZD0hMDppLmludGVycnVwdGVkPSExKX0saS5mbi5zbGljaz1mdW5jdGlvbigpe3ZhciBpLHQsbz10aGlzLHM9YXJndW1lbnRzWzBdLG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLHI9by5sZW5ndGg7Zm9yKGk9MDtpPHI7aSsrKWlmKFwib2JqZWN0XCI9PXR5cGVvZiBzfHx2b2lkIDA9PT1zP29baV0uc2xpY2s9bmV3IGUob1tpXSxzKTp0PW9baV0uc2xpY2tbc10uYXBwbHkob1tpXS5zbGljayxuKSx2b2lkIDAhPT10KXJldHVybiB0O3JldHVybiBvfX0pO1xuIl0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdmQyVmlabTl1ZEd4dllXUmxjaTkzWldKbWIyNTBiRzloWkdWeUxtcHpJaXdpYzNKakwzTmpjbWx3ZEhNdllYQndMbXB6SWl3aWMzSmpMM05qY21sd2RITXZaMlZ1WlhKaGJDOWhZMk52ZFc1MExtcHpJaXdpYzNKakwzTmpjbWx3ZEhNdloyVnVaWEpoYkM5bWIyNTBjeTVxY3lJc0luTnlZeTl6WTNKcGNIUnpMMmRsYm1WeVlXd3ZhVzVrWlhndWFuTWlMQ0p6Y21NdmMyTnlhWEIwY3k5blpXNWxjbUZzTDJweGRXVnllUzVxY3lJc0luTnlZeTl6WTNKcGNIUnpMMmRsYm1WeVlXd3ZiV0Z3TG1weklpd2ljM0pqTDNOamNtbHdkSE12WjJWdVpYSmhiQzl0YjJSaGJDNXFjeUlzSW5OeVl5OXpZM0pwY0hSekwyZGxibVZ5WVd3dmNISnZaSFZqZEY5dFlYQXVhbk1pTENKemNtTXZjMk55YVhCMGN5OW5aVzVsY21Gc0wzTnNhV05yTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRGFFSkJPenRCUVVWQkxFbEJRVTBzVTBGQlV5eERRVUZGTEUxQlFVWXNSVUZCVlN4TFFVRldMRVZCUVdsQ0xFMUJRV3BDTEVOQlFXWXNReXhEUVVoQk96dEJRVWxCTEVsQlFVMHNWMEZCVnl4RFFVRkRMRTFCUVVRc1JVRkJVeXhSUVVGVUxFTkJRV3BDT3p0QlFVVkJPMEZCUTBFc1NVRkJUU3g1UWtGQmIwSXNUVUZCY0VJc1IwRkJORUlzVVVGQk5VSXNSVUZCVGp0QlFVTkJMR0ZCUVdFc1IwRkJZaXhEUVVGcFFqdEJRVUZCTEZOQlFVc3NVVUZCVVN4SFFVRlNMRU5CUVZrc1EwRkJXaXhEUVVGTU8wRkJRVUVzUTBGQmFrSTdPenM3TzBGRFVrRTdPenM3T3p0QlFVVkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhkRVFTeHpRa0ZCUlN4cFFrRkJSaXhGUVVGeFFpeE5RVUZ5UWl4RFFVRTBRaXhWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVU51UXl4TlFVRkZMR05CUVVZN08wRkJSVUVzVVVGQlNTeGhRVUZoTEhOQ1FVRkZMR0ZCUVVZc1JVRkJhVUlzUjBGQmFrSXNSMEZCZFVJc1NVRkJka0lzUlVGQmFrSTdRVUZEUVN3d1FrRkJSU3hoUVVGR0xFVkJRV2xDTEVkQlFXcENMRU5CUVhGQ0xGVkJRWEpDTzBGQlEwRXNVVUZCU1N4WlFVRlpMSE5DUVVGRkxGbEJRVVlzUlVGQlowSXNSMEZCYUVJc1IwRkJjMElzU1VGQmRFSXNSVUZCYUVJN1FVRkRRU3d3UWtGQlJTeFpRVUZHTEVWQlFXZENMRWRCUVdoQ0xFTkJRVzlDTEZOQlFYQkNPMEZCUTBFc1VVRkJTU3hSUVVGUkxITkNRVUZGTEZGQlFVWXNSVUZCV1N4SFFVRmFMRWRCUVd0Q0xFbEJRV3hDTEVWQlFWbzdRVUZEUVN3d1FrRkJSU3hSUVVGR0xFVkJRVmtzUjBGQldpeERRVUZuUWl4TFFVRm9RanRCUVVOQkxGRkJRVWNzWTBGQll5eEZRVUZxUWl4RlFVRnhRanRCUVVOcVFpdzRRa0ZCUlN4aFFVRkdMRVZCUVdsQ0xFdEJRV3BDTzBGQlEwRXNaVUZCVHl4TFFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSExHRkJRV0VzUlVGQmFFSXNSVUZCYjBJN1FVRkRhRUlzT0VKQlFVVXNXVUZCUml4RlFVRm5RaXhMUVVGb1FqdEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBRc1VVRkJSeXhUUVVGVExFVkJRVm9zUlVGQlowSTdRVUZEV2l3NFFrRkJSU3hSUVVGR0xFVkJRVmtzUzBGQldqdEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGRkJRVWtzVVVGQlVUdEJRVU5TTEc5Q1FVRlpPMEZCUTFJc2EwSkJRVTBzYzBKQlFVVXNZMEZCUml4RlFVRnJRaXhIUVVGc1FpeEZRVVJGTzBGQlJWSXNNRUpCUVdNc1ZVRkdUanRCUVVkU0xIbENRVUZoTEZOQlNFdzdRVUZKVWl4eFFrRkJVenRCUVVwRU8wRkJSRW9zUzBGQldqczdRVUZUUVN4UlFVRkpMRTFCUVUwc2MwSkJRVVVzU1VGQlJpeEZRVUZSTEVsQlFWSXNRMEZCWVN4UlFVRmlMRU5CUVZZN08wRkJSMEVzVVVGQlNTeFJRVUZSTEVsQlFVa3NZMEZCU2l4RlFVRmFPMEZCUTBFc1ZVRkJUU3hyUWtGQlRpeEhRVUV5UWl4WlFVRlhPMEZCUTJ4RExGbEJRVWtzUzBGQlN5eFZRVUZNTEVsQlFXMUNMRU5CUVc1Q0xFbEJRWGRDTEV0QlFVc3NUVUZCVEN4SlFVRmxMRWRCUVRORExFVkJRV2RFTzBGQlF6VkRMRzFDUVVGUExGRkJRVkFzUTBGQlowSXNTVUZCYUVJc1IwRkJkVUlzVlVGQmRrSTdRVUZEU0R0QlFVTktMRXRCU2tRN1FVRkxRU3hWUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUZZTEVWQlFXdENMRWRCUVd4Q0xFVkJRWFZDTEVsQlFYWkNPMEZCUTBFc1ZVRkJUU3huUWtGQlRpeERRVUYxUWl4alFVRjJRaXhGUVVGMVF5eHJRa0ZCZGtNN1FVRkRRU3hWUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUZMTEZOQlFVd3NRMEZCWlN4TFFVRm1MRU5CUVZnN1FVRkRTQ3hEUVRORFJEczdRVUUyUTBFc2MwSkJRVVVzYTBKQlFVWXNSVUZCYzBJc1RVRkJkRUlzUTBGQk5rSXNWVUZCVXl4RFFVRlVMRVZCUVZjN1FVRkRjRU1zVFVGQlJTeGpRVUZHTzBGQlEwRXNVVUZCU1N4TlFVRk5MSE5DUVVGRkxHOUNRVUZHTEVWQlFYZENMRWRCUVhoQ0xFVkJRVlk3UVVGRFFTeFJRVUZKTEZOQlFWTXNjMEpCUVVVc05FSkJRVVlzUlVGQlowTXNSMEZCYUVNc1JVRkJZanRCUVVOQkxGRkJRVWNzVDBGQlR5eEZRVUZXTEVWQlFXTTdRVUZEVml3NFFrRkJSU3h2UWtGQlJpeEZRVUYzUWl4TFFVRjRRanRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRkZCUVVjc1QwRkJUeXhOUVVGV0xFVkJRV3RDTzBGQlEyUXNPRUpCUVVVc05FSkJRVVlzUlVGQlowTXNTMEZCYUVNN1FVRkRRU3hsUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpMRkZCUVZFN1FVRkRVaXh2UWtGQldUdEJRVU5TTEd0Q1FVRk5MSE5DUVVGRkxHTkJRVVlzUlVGQmEwSXNSMEZCYkVJc1JVRkVSVHRCUVVWU0xIZENRVUZaTEVkQlJrbzdRVUZIVWl4eFEwRkJlVUk3UVVGSWFrSTdRVUZFU2l4TFFVRmFPenRCUVZGQkxGRkJRVWtzVFVGQlRTeHpRa0ZCUlN4SlFVRkdMRVZCUVZFc1NVRkJVaXhEUVVGaExGRkJRV0lzUTBGQlZqczdRVUZIUVN4UlFVRkpMRkZCUVZFc1NVRkJTU3hqUVVGS0xFVkJRVm83UVVGRFFTeFZRVUZOTEd0Q1FVRk9MRWRCUVRKQ0xGbEJRVmM3UVVGRGJFTXNXVUZCU1N4TFFVRkxMRlZCUVV3c1NVRkJiVUlzUTBGQmJrSXNTVUZCZDBJc1MwRkJTeXhOUVVGTUxFbEJRV1VzUjBGQk0wTXNSVUZCWjBRN1FVRkROVU1zYlVKQlFVOHNVVUZCVUN4RFFVRm5RaXhKUVVGb1FpeEhRVUYxUWl4VlFVRjJRanRCUVVOSU8wRkJRMG9zUzBGS1JEdEJRVXRCTEZWQlFVMHNTVUZCVGl4RFFVRlhMRXRCUVZnc1JVRkJhMElzUjBGQmJFSXNSVUZCZFVJc1NVRkJka0k3UVVGRFFTeFZRVUZOTEdkQ1FVRk9MRU5CUVhWQ0xHTkJRWFpDTEVWQlFYVkRMR3RDUVVGMlF6dEJRVU5CTEZWQlFVMHNTVUZCVGl4RFFVRlhMRXRCUVVzc1UwRkJUQ3hEUVVGbExFdEJRV1lzUTBGQldEdEJRVU5JTEVOQmJFTkVPenRCUVc5RFFUdEJRVU5CTEVsQlFVY3NjMEpCUVVVc1owSkJRVVlzUlVGQmIwSXNUVUZCZGtJc1JVRkJLMEk3UVVGQlFTeFJRWEZKYkVJc1UwRnlTV3RDTEVkQmNVa3pRaXhUUVVGVExGTkJRVlFzUjBGQmNVSTdRVUZEYWtJc09FSkJRVVVzTWtKQlFVWXNSVUZCSzBJc1NVRkJMMElzUTBGQmIwTXNXVUZCVlR0QlFVTXhReXhuUWtGQlJ5eERRVUZETEhOQ1FVRkZMRWxCUVVZc1JVRkJVU3hSUVVGU0xFTkJRV2xDTEdWQlFXcENMRU5CUVVvc1JVRkJkVU03UVVGRGJrTXNjME5CUVVVc1NVRkJSaXhGUVVGUkxFMUJRVkk3UVVGRFNEdEJRVU5LTEZOQlNrUTdPMEZCVFVFc1dVRkJTU3hWUVVGVkxFVkJRV1E3UVVGRFFTeFpRVUZKTEZWQlFWVXNSVUZCWkR0QlFVTkJMR1ZCUVU4c1QwRkJVQ3hEUVVGbExGVkJRVk1zU1VGQlZDeEZRVUZsTzBGQlF6RkNMSE5DUVVGVkxFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NWMEZCYUVJc1JVRkJOa0lzVVVGQk4wSXNSVUZCVmpzN1FVRkZRU3h6UWtGQlZTeExRVU5HTEd0RFFVUkZMRWRCUTIxRExFdEJRVXNzUlVGRWVFTXNSMEZETmtNc2EwSkJSRGRETEVkQlEydEZMRTlCUkd4RkxFZEJRelJGTEdWQlJEVkZMRWRCUXpoR0xFdEJRVXNzVVVGRWJrY3NSMEZET0Vjc1NVRkVPVWNzUjBGRlJTeHRRa0ZHUml4SFFVZE5MRmxCU0U0c1IwRkhjVUlzVDBGQlR5eFpRVWcxUWl4SFFVY3lReXhOUVVnelF5eEhRVWxOTEV0QlNrNHNSMEZKWXl4TFFVRkxMRkZCU201Q0xFZEJTVGhDTEUxQlNqbENMRWRCUzAwc09FSkJURTRzUjBGTlRTdzRRa0ZPVGl4SFFVOU5MR2REUVZCT0xFZEJVVlVzVDBGU1ZpeEhRVk5qTEdsRlFWUmtMRWRCVldNc2RVVkJWbVFzUjBGWFZTeFJRVmhXTEVkQldVMHNVVUZhVGl4SFFXRkRMRkZCWWtRc1IwRmpSaXhSUVdSU096dEJRV2RDUVN4clEwRkJSU3cwUWtGQlJpeEZRVUZuUXl4TlFVRm9ReXhEUVVGMVF5eFBRVUYyUXp0QlFVTklMRk5CY0VKRU8wRkJjVUpJTEV0QmJrc3dRanM3UVVGRk0wSTdRVUZEUVN4UlFVRkpMRlZCUVZVc2VVTkJRV1E3UVVGRFFTeFJRVUZKTEdGQlFXRXNTMEZCU3l4SlFVRk1MRU5CUVZVc1ZVRkJNMEk3UVVGRFFTeFJRVUZKTEUxQlFVbzdRVUZEUVN4UlFVRkpMR05CUVdNN1FVRkRaQ3haUVVGSkxFTkJRVU1zUTBGRVV6dEJRVVZrTEd0Q1FVRlZMRVZCUmtrN1FVRkhaQ3h4UWtGQllUdEJRVWhETEV0QlFXeENPenRCUVUxQkxIRkNRVUZGTEU5QlFVWXNRMEZCVnl4VlFVRlZMRmxCUVZZc1IwRkJlVUlzVlVGQmNFTXNSVUZCWjBRc1ZVRkJWU3hSUVVGV0xFVkJRWEZDTzBGQlEycEZMRmxCUVVjc1EwRkJReXhUUVVGVExFdEJRV0lzUlVGQmIwSTdRVUZEYUVJc2NVSkJRVk1zVTBGQlV5eEpRVUZzUWpzN1FVRkZRU3huUWtGQlNTeFZRVUZWTEVWQlFXUTdRVUZEUVN4blFrRkJTU3hWUVVGVkxFVkJRV1E3UVVGRFFTeHRRa0ZCVHl4UFFVRlFMRU5CUVdVc1ZVRkJVeXhKUVVGVUxFVkJRV1U3UVVGRE1VSXNNRUpCUVZVc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eFhRVUZvUWl4RlFVRTJRaXhSUVVFM1FpeEZRVUZXT3p0QlFVVkJMREJDUVVGVkxFdEJRMFlzYTBOQlJFVXNSMEZEYlVNc1MwRkJTeXhGUVVSNFF5eEhRVU0yUXl4clFrRkVOME1zUjBGRGEwVXNUMEZFYkVVc1IwRkRORVVzWlVGRU5VVXNSMEZET0VZc1MwRkJTeXhSUVVSdVJ5eEhRVU00Unl4SlFVUTVSeXhIUVVWRkxHMUNRVVpHTEVkQlIwMHNXVUZJVGl4SFFVZHhRaXhQUVVGUExGbEJTRFZDTEVkQlJ6SkRMRTFCU0RORExFZEJTVTBzUzBGS1RpeEhRVWxqTEV0QlFVc3NVVUZLYmtJc1IwRkpPRUlzVFVGS09VSXNSMEZMVFN3NFFrRk1UaXhIUVUxTkxEaENRVTVPTEVkQlQwMHNaME5CVUU0c1IwRlJWU3hQUVZKV0xFZEJVMk1zYVVWQlZHUXNSMEZWWXl4MVJVRldaQ3hIUVZkVkxGRkJXRllzUjBGWlRTeFJRVnBPTEVkQllVTXNVVUZpUkN4SFFXTkdMRkZCWkZJN08wRkJaMEpCTEhORFFVRkZMRFJDUVVGR0xFVkJRV2RETEUxQlFXaERMRU5CUVhWRExFOUJRWFpETzBGQlEwZ3NZVUZ3UWtRN1FVRnpRa2dzVTBFelFrUXNUVUV5UWs4c1EwRkZUanM3UVVGRlJDeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc1VVRkJXanRCUVVOSUxFdEJha05FT3p0QlFXMURRVHRCUVVOQkxEQkNRVUZGTEdkQ1FVRkdMRVZCUVc5Q0xFVkJRWEJDTEVOQlFYVkNMRTlCUVhaQ0xFVkJRV2RETEdkQ1FVRm9ReXhGUVVGclJDeFZRVUZUTEVOQlFWUXNSVUZCVnp0QlFVTjZSQ3haUVVGSkxGTkJRVk1zUTBGQlF5eERRVUZrTzBGQlEwRXNXVUZCU1N4WFFVRlhMRVZCUVdZN1FVRkRRU3haUVVGSkxHTkJRV01zUlVGQmJFSTdPMEZCUlVFc2MwSkJRV003UVVGRFZpeG5Ra0ZCU1N4TlFVUk5PMEZCUlZZc2MwSkJRVlVzVVVGR1FUdEJRVWRXTEhsQ1FVRmhPMEZCU0Vnc1UwRkJaRHM3UVVGTlFTdzRRa0ZCUlN4WFFVRkdMRVZCUVdVc1IwRkJaaXhEUVVGdlFpeFpRVUZaTEZGQlFXaERPenRCUVVWQkxEaENRVUZGTEhOQ1FVRkdMRVZCUVRCQ0xFdEJRVEZDTEVOQlFXZERPMEZCUXpWQ0xEQkNRVUZqTEVkQlJHTTdRVUZGTlVJc2RVSkJRVmNzUjBGR2FVSTdRVUZITlVJc2QwSkJRVmtzWVVGSVowSTdRVUZKTlVJc2RVSkJRVmNzUjBGS2FVSTdRVUZMTlVJc2VVSkJRV0VzUzBGTVpUdEJRVTAxUWl4M1FrRkJXVHRCUVU1blFpeFRRVUZvUXpzN1FVRlRRU3c0UWtGQlJTdzRRa0ZCUml4RlFVRnJReXhYUVVGc1F5eERRVUU0UXl4bFFVRTVReXhGUVVFclJDeFJRVUV2UkN4RFFVRjNSU3hyUWtGQmVFVTdRVUZEU0N4TFFYWkNSRHM3UVVGNVFrRTdRVUZEUVN3d1FrRkJSU3huUWtGQlJpeEZRVUZ2UWl4RlFVRndRaXhEUVVGMVFpeFBRVUYyUWl4RlFVRm5ReXhsUVVGb1F5eEZRVUZwUkN4VlFVRlRMRU5CUVZRc1JVRkJWenRCUVVONFJDeFpRVUZKTEZOQlFWTXNjMEpCUVVVc1NVRkJSaXhGUVVGUkxFOUJRVklzUTBGQlowSXNXVUZCYUVJc1EwRkJZanRCUVVOQkxGbEJRVWtzVTBGQlV5eHpRa0ZCUlN4TlFVRkdMRVZCUVZVc1NVRkJWaXhEUVVGbExFbEJRV1lzUTBGQllqdEJRVU5CTEZsQlFVa3NWMEZCVnl4elFrRkJSU3hOUVVGR0xFVkJRVlVzU1VGQlZpeERRVUZsTEUxQlFXWXNRMEZCWmp0QlFVTkJMRmxCUVVrc1kwRkJZeXh6UWtGQlJTeE5RVUZHTEVWQlFWVXNTVUZCVml4RFFVRmxMRk5CUVdZc1NVRkJNa0lzYzBKQlFVVXNUVUZCUml4RlFVRlZMRWxCUVZZc1EwRkJaU3hUUVVGbUxFVkJRVEJDTEV0QlFURkNMRU5CUVdkRExFZEJRV2hETEVOQlFUTkNMRWRCUVdsRkxFVkJRVzVHT3p0QlFVVkJMSE5DUVVGak8wRkJRMVlzWjBKQlFVa3NUVUZFVFR0QlFVVldMSE5DUVVGVkxGRkJSa0U3UVVGSFZpeDVRa0ZCWVR0QlFVaElMRk5CUVdRN1FVRkxRU3huUWtGQlVTeEhRVUZTTEVOQlFWa3NWMEZCV2p0QlFVTkJMRGhDUVVGRkxGZEJRVVlzUlVGQlpTeEhRVUZtTEVOQlFXOUNMRmxCUVZrc1VVRkJhRU03TzBGQlJVRXNPRUpCUVVVc2MwSkJRVVlzUlVGQk1FSXNTMEZCTVVJc1EwRkJaME03UVVGRE5VSXNNRUpCUVdNc1IwRkVZenRCUVVVMVFpeDFRa0ZCVnl4SFFVWnBRanRCUVVjMVFpeDNRa0ZCV1N4aFFVaG5RanRCUVVrMVFpeDFRa0ZCVnl4SFFVcHBRanRCUVVzMVFpeDVRa0ZCWVN4TFFVeGxPMEZCVFRWQ0xIZENRVUZaTzBGQlRtZENMRk5CUVdoRE96dEJRVk5CTERoQ1FVRkZMRGhDUVVGR0xFVkJRV3RETEZkQlFXeERMRU5CUVRoRExHdENRVUU1UXl4RlFVRnJSU3hSUVVGc1JTeERRVUV5UlN4bFFVRXpSVHRCUVVWSUxFdEJla0pFT3p0QlFUSkNRU3d3UWtGQlJTeHpRa0ZCUml4RlFVRXdRaXhGUVVFeFFpeERRVUUyUWl4cFFrRkJSU3hMUVVGR0xFTkJRVkVzU1VGQmNrTXNSVUZCTWtNc1ZVRkJVeXhMUVVGVUxFVkJRV2RDTEV0QlFXaENMRVZCUVhWQ08wRkJRemxFTEcxQ1FVRlhMRmxCUVZVN1FVRkRha0k3UVVGRFFTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc1IwRkJXanRCUVVOQkxHbENRVUZOTEVsQlFVa3NRMEZCVml4SlFVRmxMRWxCUVVrc1dVRkJTaXhEUVVGcFFpeExRVUZvUXl4RlFVRjNRenRCUVVOd1F5eHZRa0ZCU1N4UFFVRlBMRWxCUVVrc1dVRkJTaXhEUVVGcFFpeExRVUZxUWl4RFFVRjNRaXhEUVVGNFFpeERRVUZZTzBGQlEwRXNiMEpCUVVzc1MwRkJTeXhqUVVGV0xFVkJRVEpDTzBGQlEzWkNMSGxDUVVGTExHTkJRVXdzUjBGQmMwSXNTMEZCZEVJN08wRkJSVUU3UVVGRFFTeDVRa0ZCU3l4UlFVRk1PMEZCUTBnN1FVRkRTanM3UVVGRlJDeDNRa0ZCV1N4RlFVRmFPenRCUVVWQkxHbENRVUZMTEVsQlFVa3NTMEZCUlN4RFFVRllMRVZCUVdNc1MwRkJSU3haUVVGWkxGZEJRVm9zUTBGQmQwSXNUVUZCZUVNc1JVRkJaMFFzU1VGQmFFUXNSVUZCY1VRN1FVRkRha1FzYjBKQlFVa3NUMEZCVHl4SlFVRkpMR0ZCUVVvc1EwRkJhMElzV1VGQldTeFhRVUZhTEVOQlFYZENMRVZCUVhoQ0xFTkJRV3hDTEVOQlFWZzdRVUZEUVN4M1FrRkJVU3hIUVVGU0xFTkJRVmtzVTBGQldqdEJRVU5CTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3hKUVVGYU8wRkJRMEVzY1VKQlFVc3NZMEZCVEN4SFFVRnpRaXhKUVVGMFFqczdRVUZGUVR0QlFVTkJMSEZDUVVGTExGRkJRVXc3TzBGQlJVRXNNRUpCUVZVc1NVRkJWaXhEUVVGblFpeExRVUZMTEVWQlFYSkNPMEZCUTBnN08wRkJSVVFzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRk5CUVZvN1FVRkRTQ3hUUVRWQ1JDeEZRVFJDUnl4SFFUVkNTRHRCUVRaQ1NDeExRVGxDUkRzN1FVRm5SVUVzTUVKQlFVVXNOa0pCUVVZc1JVRkJhVU1zUzBGQmFrTXNRMEZCZFVNc1ZVRkJVeXhEUVVGVUxFVkJRVmM3UVVGRE9VTXNXVUZCUnl4elFrRkJSU3hKUVVGR0xFVkJRVkVzVVVGQlVpeERRVUZwUWl4clFrRkJha0lzUTBGQlNDeEZRVUY1UXp0QlFVTnlReXh0UWtGQlR5eExRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJSU3hqUVVGR096dEJRVVZCTEZsQlFVa3NWMEZCVnl4cFFrRkJSU3hKUVVGR0xFTkJRVThzYzBKQlFVVXNWMEZCUml4RlFVRmxMRWRCUVdZc1JVRkJVQ3hEUVVGbU8wRkJRMEVzV1VGQlJ5eFpRVUZaTEVWQlFXWXNSVUZCYlVJN1FVRkRaaXhyUTBGQlJTeFhRVUZHTEVWQlFXVXNTMEZCWmp0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN3NFFrRkJSU3gzUWtGQlJpeEZRVUUwUWl4WFFVRTFRaXhEUVVGM1F5eGxRVUY0UXl4RlFVRjVSQ3hSUVVGNlJDeERRVUZyUlN4clFrRkJiRVU3TzBGQlJVRXNXVUZCU1N4UFFVRlBMRXRCUVVzc1UwRkJUQ3hEUVVGbExGTkJRV1lzUTBGQldEdEJRVU5CTEZsQlFVa3NVMEZCVXp0QlFVTlVMR2xDUVVGTE8wRkJRMFFzYjBKQlFVa3NXVUZCV1N4RlFVUm1PMEZCUlVRc2MwSkJRVTBzVVVGR1REdEJRVWRFTEhsQ1FVRlRPMEZCU0ZJc1lVRkVTVHRCUVUxVUxIbENRVUZoTEV0QlFVc3NTVUZCVEN4RFFVRlZPMEZCVG1Rc1UwRkJZanM3UVVGVFFTeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc1RVRkJXanM3UVVGRlFTeDVRa0ZCUlN4SlFVRkdMRU5CUVU4N1FVRkRTQ3hyUWtGQlRTeE5RVVJJTzBGQlJVZ3NhVUpCUVVzc1ZVRkJWU3hYUVVaYU8wRkJSMGdzYTBKQlFVMHNUVUZJU0R0QlFVbElMSEZDUVVGVExHbENRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRlRUlzZVVKQlFWTXNVMEZCVXl4SlFVRnNRanM3UVVGRlFTeHpRMEZCUlN4M1FrRkJSaXhGUVVFMFFpeFhRVUUxUWl4RFFVRjNReXhyUWtGQmVFTXNSVUZCTkVRc1VVRkJOVVFzUTBGQmNVVXNaVUZCY2tVN1FVRkRRU3h6UTBGQlJTeFhRVUZHTEVWQlFXVXNSMEZCWml4RFFVRnRRaXhGUVVGdVFqczdRVUZGUVN4elEwRkJSU3h2UTBGQlJpeEZRVUY1UXl4UFFVRjZReXhEUVVGclJDeFBRVUZzUkRzN1FVRkZRVHRCUVVOSUxHRkJZa1U3UVVGalNDeHpRa0ZCVlR0QlFXUlFMRk5CUVZBN1FVRm5Ra2dzUzBFelEwUTdPMEZCTmtOQk96dEJRVVZCTzBGQlEwRXNNRUpCUVVVc1owSkJRVVlzUlVGQmIwSXNSVUZCY0VJc1EwRkJkVUlzVDBGQmRrSXNSVUZCWjBNc2FVSkJRV2hETEVWQlFXMUVMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRekZFTEZsQlFVa3NVMEZCVXl4elFrRkJSU3hKUVVGR0xFVkJRVkVzVDBGQlVpeERRVUZuUWl4WlFVRm9RaXhEUVVGaU8wRkJRMEVzV1VGQlNTeFRRVUZUTEhOQ1FVRkZMRTFCUVVZc1JVRkJWU3hKUVVGV0xFTkJRV1VzU1VGQlppeERRVUZpTzBGQlEwRXNXVUZCU1N4WFFVRlhMSE5DUVVGRkxFMUJRVVlzUlVGQlZTeEpRVUZXTEVOQlFXVXNUVUZCWml4RFFVRm1PMEZCUTBFc1dVRkJTU3hqUVVGakxITkNRVUZGTEUxQlFVWXNSVUZCVlN4SlFVRldMRU5CUVdVc1UwRkJaaXhKUVVFeVFpeHpRa0ZCUlN4TlFVRkdMRVZCUVZVc1NVRkJWaXhEUVVGbExGTkJRV1lzUlVGQk1FSXNTMEZCTVVJc1EwRkJaME1zUjBGQmFFTXNRMEZCTTBJc1IwRkJhVVVzUlVGQmJrWTdPMEZCUlVFc2MwSkJRV003UVVGRFZpeG5Ra0ZCU1N4TlFVUk5PMEZCUlZZc2MwSkJRVlVzVVVGR1FUdEJRVWRXTEhsQ1FVRmhPMEZCU0Vnc1UwRkJaRHM3UVVGTlFTdzRRa0ZCUlN4M1EwRkJSaXhGUVVFMFF5eEpRVUUxUXl4RFFVRnBSQ3hSUVVGcVJEczdRVUZGUVN3NFFrRkJSU3cyUWtGQlJpeEZRVUZwUXl4TFFVRnFReXhEUVVGMVF6dEJRVU51UXl3d1FrRkJZeXhIUVVSeFFqdEJRVVZ1UXl4MVFrRkJWeXhIUVVaM1FqdEJRVWR1UXl4M1FrRkJXU3hoUVVoMVFqdEJRVWx1UXl4MVFrRkJWeXhIUVVwM1FqdEJRVXR1UXl4NVFrRkJZU3hMUVV4elFqdEJRVTF1UXl4M1FrRkJXVHRCUVU1MVFpeFRRVUYyUXp0QlFWTklMRXRCZGtKRU96dEJRWGxDUVN3d1FrRkJSU3huUWtGQlJpeEZRVUZ2UWl4TFFVRndRaXhEUVVFd1FpeFpRVUZWTzBGQlEyaERMRGhDUVVGRkxITkNRVUZHTEVWQlFUSkNMRTlCUVROQ0xFTkJRVzlETEU5QlFYQkRPMEZCUTBnc1MwRkdSRHM3UVVGSlFTd3dRa0ZCUlN3clFrRkJSaXhGUVVGdFF5eExRVUZ1UXl4RFFVRjVReXhWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVU5vUkN4WlFVRkhMSE5DUVVGRkxFbEJRVVlzUlVGQlVTeFJRVUZTTEVOQlFXbENMR3RDUVVGcVFpeERRVUZJTEVWQlFYbERPMEZCUTNKRExHMUNRVUZQTEV0QlFWQTdRVUZEU0RzN1FVRkZSQ3hWUVVGRkxHTkJRVVk3TzBGQlJVRXNPRUpCUVVVc01FSkJRVVlzUlVGQk9FSXNWMEZCT1VJc1EwRkJNRU1zWlVGQk1VTXNSVUZCTWtRc1VVRkJNMFFzUTBGQmIwVXNhMEpCUVhCRk96dEJRVVZCTEZsQlFVa3NUMEZCVHl4TFFVRkxMRk5CUVV3c1EwRkJaU3hUUVVGbUxFTkJRVmc3UVVGRFFTeFpRVUZKTEZOQlFWTTdRVUZEVkN4cFFrRkJTenRCUVVORUxHOUNRVUZKTEZsQlFWazdRVUZFWml4aFFVUkpPMEZCU1ZRc2VVSkJRV0VzUzBGQlN5eEpRVUZNTEVOQlFWVTdRVUZLWkN4VFFVRmlPenRCUVU5QkxHZENRVUZSTEVkQlFWSXNRMEZCV1N4UlFVRmFPMEZCUTBFc1owSkJRVkVzUjBGQlVpeERRVUZaTEUxQlFWbzdPMEZCUlVFc2VVSkJRVVVzU1VGQlJpeERRVUZQTzBGQlEwZ3NhMEpCUVUwc1RVRkVTRHRCUVVWSUxHbENRVUZMTEZWQlFWVXNZVUZHV2p0QlFVZElMR3RDUVVGTkxFMUJTRWc3UVVGSlNDeHhRa0ZCVXl4cFFrRkJVeXhSUVVGVUxFVkJRVzFDTzBGQlEzaENMSGxDUVVGVExGTkJRVk1zU1VGQmJFSTdPMEZCUlVFc2MwTkJRVVVzZDBKQlFVWXNSVUZCTkVJc1YwRkJOVUlzUTBGQmQwTXNhMEpCUVhoRExFVkJRVFJFTEZGQlFUVkVMRU5CUVhGRkxHVkJRWEpGT3p0QlFVVkJMSE5EUVVGRkxESkRRVUZHTEVWQlFXZEVMRTlCUVdoRUxFTkJRWGxFTEU5QlFYcEVPenRCUVVWQk8wRkJRMGdzWVVGYVJUdEJRV0ZJTEhOQ1FVRlZPMEZCWWxBc1UwRkJVRHRCUVdWSUxFdEJia05FTzBGQmIwTklPenM3T3p0QlEyeGhSRHM3T3pzN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhkQ1FVRlJMRWxCUVZJc1EwRkJZVHRCUVVOWUxGVkJRVkU3UVVGRFRpeGpRVUZWTEVOQlFVTXNWMEZCUkR0QlFVUktPMEZCUkVjc1EwRkJZanM3T3pzN1FVTktRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGSFFTeEZRVUZGTEZGQlFVWXNSVUZCV1N4TFFVRmFMRU5CUVd0Q0xGbEJRVmM3TzBGQlJYcENPMEZCUTBFc1RVRkJSU3hoUVVGR0xFVkJRV2xDTEV0QlFXcENMRU5CUVhWQ0xGbEJRVlU3UVVGRE4wSXNXVUZCUnl4RlFVRkZMRWxCUVVZc1JVRkJVU3hGUVVGU0xFTkJRVmNzVlVGQldDeERRVUZJTEVWQlFUSkNPMEZCUTNaQ0xHTkJRVVVzWlVGQlJpeEZRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeFhRVUYyUWl4RlFVRnZReXhwUWtGQmNFTTdRVUZEUVN4alFVRkZMRlZCUVVZc1JVRkJZeXhIUVVGa0xFTkJRV3RDTEZkQlFXeENMRVZCUVN0Q0xHbENRVUV2UWp0QlFVTklMRk5CU0VRc1RVRkhUenRCUVVOSUxHTkJRVVVzWlVGQlJpeEZRVUZ0UWl4SFFVRnVRaXhEUVVGMVFpeFhRVUYyUWl4RlFVRnZReXhsUVVGd1F6dEJRVU5CTEdOQlFVVXNWVUZCUml4RlFVRmpMRWRCUVdRc1EwRkJhMElzVjBGQmJFSXNSVUZCSzBJc1pVRkJMMEk3UVVGRFNEdEJRVU5FTEZWQlFVVXNXVUZCUml4RlFVRm5RaXhYUVVGb1FpeERRVUUwUWl4cFFrRkJOVUk3UVVGRFFTeFZRVUZGTEZOQlFVWXNSVUZCWVN4WFFVRmlMRU5CUVhsQ0xGZEJRWHBDTzBGQlEwZ3NTMEZXUkRzN1FVRlpRU3hOUVVGRkxGTkJRVVlzUlVGQllTeExRVUZpTEVOQlFXMUNMRmxCUVZjN1FVRkRNVUlzVlVGQlJTeFZRVUZHTEVWQlFXTXNUMEZCWkN4RFFVRnpRaXhOUVVGMFFqdEJRVU5CTEZWQlFVVXNTVUZCUml4RlFVRlJMRmRCUVZJc1EwRkJiMElzVjBGQmNFSTdRVUZEUVN4VlFVRkZMR0ZCUVVZc1JVRkJhVUlzU1VGQmFrSXNRMEZCYzBJc1UwRkJkRUlzUlVGQmFVTXNTMEZCYWtNN1FVRkRRU3hWUVVGRkxHVkJRVVlzUlVGQmJVSXNSMEZCYmtJc1EwRkJkVUlzVjBGQmRrSXNSVUZCYjBNc1pVRkJjRU03UVVGRFFTeFZRVUZGTEZWQlFVWXNSVUZCWXl4SFFVRmtMRU5CUVd0Q0xGZEJRV3hDTEVWQlFTdENMR1ZCUVM5Q08wRkJRMGdzUzBGT1JEczdRVUZSUVN4TlFVRkZMR3REUVVGR0xFVkJRWE5ETEV0QlFYUkRMRU5CUVRSRExGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlEyNUVMR2RDUVVGUkxFZEJRVklzUTBGQldTeEZRVUZGTEUxQlFVWXNSVUZCVlN4TFFVRldMRVZCUVZvN1FVRkRRU3haUVVGSExFVkJRVVVzVFVGQlJpeEZRVUZWTEV0QlFWWXNTMEZCYjBJc1IwRkJjRUlzU1VGQk1rSXNUMEZCVHl4TFFVRkxMRWxCUVV3c1EwRkJWU3hWUVVGcVFpeEpRVUVyUWl4WFFVRTNSQ3hGUVVFd1JUdEJRVU4wUlN4alFVRkZMR05CUVVZN1FVRkRRU3hqUVVGRkxIRkNRVUZHTEVWQlFYbENMRWxCUVhwQ08wRkJRMEVzWTBGQlJTdzRRa0ZCUml4RlFVRnJReXhKUVVGc1F6dEJRVU5JTzBGQlEwb3NTMEZRUkRzN1FVRlRRU3hOUVVGRkxESkVRVUZHTEVWQlFTdEVMRXRCUVM5RUxFTkJRWEZGTEZWQlFWTXNRMEZCVkN4RlFVRlhPMEZCUXpWRkxGVkJRVVVzWTBGQlJqdEJRVU5CTEZWQlFVVXNjVUpCUVVZc1JVRkJlVUlzU1VGQmVrSTdRVUZEUVN4VlFVRkZMRGhDUVVGR0xFVkJRV3RETEVsQlFXeERPMEZCUTBnc1MwRktSRHM3UVVGTlJqdEJRVU5GTEUxQlFVVXNUVUZCUml4RlFVRlZMRTFCUVZZc1EwRkJhVUlzV1VGQlZ6dEJRVU40UWl4WlFVRkpMRVZCUVVVc1RVRkJSaXhGUVVGVkxFdEJRVllzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRGVrSXNZMEZCUlN4VlFVRkdMRVZCUVdNc1QwRkJaQ3hEUVVGelFpeE5RVUYwUWp0QlFVTkJMR05CUVVVc1UwRkJSaXhGUVVGaExGZEJRV0lzUTBGQmVVSXNWMEZCZWtJN1FVRkRRU3hqUVVGRkxHRkJRVVlzUlVGQmFVSXNTVUZCYWtJc1EwRkJjMElzVTBGQmRFSXNSVUZCYVVNc1MwRkJha003UVVGRFFTeGpRVUZGTEdWQlFVWXNSVUZCYlVJc1IwRkJia0lzUTBGQmRVSXNWMEZCZGtJc1JVRkJiME1zWlVGQmNFTTdRVUZEUVN4alFVRkZMRlZCUVVZc1JVRkJZeXhIUVVGa0xFTkJRV3RDTEZkQlFXeENMRVZCUVN0Q0xHVkJRUzlDTzBGQlEwZzdRVUZEU2l4TFFWSkVPenRCUVZWQk96dEJRVVZCTEV0QlFVTXNXVUZCVnp0QlFVTlNMRlZCUVVVc2FVSkJRVVlzUlVGQmNVSXNTMEZCY2tJc1IwRkJOa0lzV1VGQk4wSXNRMEZCTUVNc1JVRkJSU3gxUWtGQlJpeERRVUV4UXp0QlFVTklMRXRCUmtRN08wRkJTVUVzUzBGQlF5eFpRVUZYTzBGQlExSXNWVUZCUlN4eFFrRkJSaXhGUVVGNVFpeExRVUY2UWl4RFFVRXJRanRCUVVNelFpd3dRa0ZCWXl4RFFVUmhPMEZCUlROQ0xEUkNRVUZuUWl4RFFVWlhPMEZCUnpOQ0xEUkNRVUZuUWl4SlFVaFhPMEZCU1ROQ0xITkNRVUZWTEhGQ1FVcHBRanRCUVVzelFpeHZRa0ZCVVN4SlFVeHRRanRCUVUwelFpeHJRa0ZCVFR0QlFVNXhRaXhUUVVFdlFqdEJRVkZCTEZWQlFVVXNjVUpCUVVZc1JVRkJlVUlzUzBGQmVrSXNRMEZCSzBJN1FVRkRNMElzTUVKQlFXTXNRMEZFWVR0QlFVVXpRaXcwUWtGQlowSXNRMEZHVnp0QlFVY3pRaXh6UWtGQlZTeHhRa0ZJYVVJN1FVRkpNMElzYjBKQlFWRXNTMEZLYlVJN1FVRkxNMElzTWtKQlFXVXNTVUZNV1R0QlFVMHpRaXcwUWtGQlowSXNTVUZPVnp0QlFVOHpRaXh6UWtGQlZTeExRVkJwUWp0QlFWRXpRaXhyUWtGQlRTeExRVkp4UWp0QlFWTXpRaXd5UWtGQlpUdEJRVlJaTEZOQlFTOUNPMEZCVjBnc1MwRndRa1E3TzBGQmMwSkJMRTFCUVVVc1ZVRkJSaXhGUVVGakxFVkJRV1FzUTBGQmFVSXNUMEZCYWtJc1JVRkJNRUlzYVVKQlFURkNMRVZCUVRaRExGVkJRVk1zUTBGQlZDeEZRVUZaTzBGQlEzSkVMRlZCUVVVc1NVRkJSaXhGUVVGUkxFOUJRVklzUTBGQlowSXNWMEZCYUVJc1JVRkJOa0lzU1VGQk4wSXNRMEZCYTBNc2JVSkJRV3hETEVWQlFYVkVMRmRCUVhaRUxFTkJRVzFGTEdWQlFXNUZPMEZCUTBFc1ZVRkJSU3hKUVVGR0xFVkJRVkVzVVVGQlVpeERRVUZwUWl4bFFVRnFRanM3UVVGRlFTeFpRVUZKTEdWQlFXVXNSVUZCUlN4SlFVRkdMRVZCUVZFc1NVRkJVaXhEUVVGaExFOUJRV0lzUTBGQmJrSTdRVUZEUVN4VlFVRkZMRWxCUVVZc1JVRkJVU3hQUVVGU0xFTkJRV2RDTEZkQlFXaENMRVZCUVRaQ0xFbEJRVGRDTEVOQlFXdERMRFJDUVVGc1F5eEZRVUZuUlN4SlFVRm9SU3hEUVVGeFJTeFpRVUZ5UlRzN1FVRkZRU3haUVVGSkxHVkJRV1VzUlVGQlJTeEpRVUZHTEVWQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1EwRkJia0k3TzBGQlJVRXNWVUZCUlN3MFFrRkJORUlzV1VGQk9VSXNSVUZCTkVNc1IwRkJOVU1zUTBGQlowUXNXVUZCYUVRc1JVRkJPRVFzVDBGQk9VUXNRMEZCYzBVc1VVRkJkRVU3UVVGRFNDeExRVlpFT3p0QlFWbEJPenRCUVVWQk96dEJRVVZCTEUxQlFVVXNhVUpCUVVZc1JVRkJjVUlzUzBGQmNrSXNRMEZCTWtJc1ZVRkJVeXhEUVVGVUxFVkJRVms3UVVGRGJrTXNWVUZCUlN4SlFVRkdMRVZCUVZFc1VVRkJVaXhEUVVGcFFpeHJRa0ZCYWtJc1JVRkJjVU1zU1VGQmNrTXNRMEZCTUVNc1YwRkJNVU03UVVGRFFTeFZRVUZGTEd0Q1FVRkdMRVZCUVhOQ0xGZEJRWFJDTEVOQlFXdERMR3RDUVVGc1F5eEZRVUZ6UkN4UlFVRjBSQ3hEUVVFclJDeGxRVUV2UkR0QlFVTkRMRlZCUVVVc1pVRkJSanRCUVVOS0xFdEJTa1E3TzBGQlRVRXNZVUZCVXl4elFrRkJWQ3hEUVVGblF5eFJRVUZvUXl4RlFVRXdRenRCUVVOMFF5eFpRVUZKTEUxQlFVMHNVMEZCVXl4TFFVRlVMRU5CUVdVc1IwRkJaaXhEUVVGV08wRkJRMEVzWlVGQlR5eEpRVUZKTEVOQlFVb3NRMEZCVUR0QlFVTklPenRCUVVWRUxFMUJRVVVzYVVKQlFVWXNSVUZCY1VJc1JVRkJja0lzUTBGQmQwSXNVVUZCZUVJc1JVRkJhME1zV1VGQldUdEJRVU14UXl4WlFVRkpMRk5CUVZNc1UwRkJVeXhGUVVGRkxFbEJRVVlzUlVGQlVTeEpRVUZTTEVOQlFXRXNVVUZCWWl4RFFVRlVMRU5CUVdJN1FVRkRRU3haUVVGSkxFMUJRVTBzVTBGQlV5eEZRVUZGTEVsQlFVWXNSVUZCVVN4SFFVRlNMRVZCUVZRc1EwRkJWanRCUVVOQkxGbEJRVWtzV1VGQldTeFRRVUZUTEVWQlFVVXNTVUZCUml4RlFVRlJMRWxCUVZJc1EwRkJZU3hYUVVGaUxFTkJRVlFzUTBGQmFFSTdPMEZCUlVFc1ZVRkJSU3hKUVVGR0xFTkJRVTg3UVVGRFNDeHBRa0ZCU3l4cFFrRkVSanRCUVVWSUxITkNRVUZWTEUxQlJsQTdRVUZIU0N4clFrRkJUU3hOUVVoSU8wRkJTVWdzYTBKQlFVMHNSVUZCUXl4VlFVRlZMRWRCUVZnc1JVRkJaMElzU1VGQlNTeE5RVUZ3UWl4RlFVcElPMEZCUzBnc2NVSkJRVk1zYVVKQlFWTXNVVUZCVkN4RlFVRnRRanRCUVVONFFpeDNRa0ZCVVN4SFFVRlNMRU5CUVZrc1VVRkJXanM3UVVGRlFTeHhRa0ZCU1N4SlFVRkpMRWxCUVVVc1EwRkJWaXhGUVVGWkxFbEJRVVVzVTBGQlV5eExRVUZVTEVOQlFXVXNUVUZCTjBJc1JVRkJiME1zUjBGQmNFTXNSVUZCZVVNN1FVRkRja01zZDBKQlFVa3NUMEZCVHl4VFFVRlRMRXRCUVZRc1EwRkJaU3hEUVVGbUxFTkJRVmc3UVVGRFFTeDNRa0ZCUnl4TFFVRkxMRVZCUVV3c1NVRkJWeXhOUVVGWUxFbEJRWEZDTEV0QlFVc3NVMEZCTjBJc1JVRkJkME03UVVGRGNFTXNNRUpCUVVVc0swSkJRU3RDTEV0QlFVc3NSVUZCY0VNc1IwRkJkME1zUjBGQmVFTXNSMEZCT0VNc1UwRkJhRVFzUlVGQk1rUXNTVUZCTTBRc1EwRkJaMFVzZFVKQlFYVkNMRkZCUVZFc1YwRkJVaXhEUVVGdlFpeExRVUZMTEZWQlFYcENMRVZCUVhGRExFOUJRVThzTUVKQlFUVkRMRU5CUVhaQ0xFTkJRV2hGTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hyUWtGQlJTeDFRa0ZCUml4RlFVRXlRaXhKUVVFelFpeERRVUZuUXl4MVFrRkJkVUlzVVVGQlVTeFhRVUZTTEVOQlFXOUNMRk5CUVZNc2IwSkJRVGRDTEVWQlFXMUVMRTlCUVU4c01FSkJRVEZFTEVOQlFYWkNMRU5CUVdoRE8wRkJRMEVzYTBKQlFVVXNiMEpCUVVZc1JVRkJkMElzU1VGQmVFSXNRMEZCTmtJc2RVSkJRWFZDTEZGQlFWRXNWMEZCVWl4RFFVRnZRaXhUUVVGVExGZEJRVGRDTEVWQlFUQkRMRTlCUVU4c01FSkJRV3BFTEVOQlFYWkNMRU5CUVRkQ08wRkJRMEVzYTBKQlFVVXNZVUZCUml4RlFVRnBRaXhKUVVGcVFpeERRVUZ6UWl4VFFVRlRMRlZCUVM5Q08wRkJRMGc3UVVGc1FrVXNVMEZCVUR0QlFXOUNTQ3hMUVhwQ1JEczdRVUV5UWtFN08wRkJSVUU3UVVGRFFTeE5RVUZGTEdWQlFVWXNSVUZCYlVJc1MwRkJia0lzUTBGQmVVSXNXVUZCVnp0QlFVTm9ReXhWUVVGRkxGVkJRVVlzUlVGQll5eEhRVUZrTEVOQlFXdENMRk5CUVd4Q0xFVkJRVFpDTEUxQlFUZENPMEZCUTBnc1MwRkdSRHRCUVVkQk8wRkJRMGdzUTBFeFNVUTdPenM3T3p0QlExUkJPenM3T3pzN1FVRkZRVHRCUVVOQkxFOUJRVThzUTBGQlVDeEhRVUZYTEU5QlFVOHNUVUZCVUN4dFFrRkJXRHM3T3pzN096dEJRMGhCT3pzN096czdRVUZGUVN4elFrRkJSU3hSUVVGR0xFVkJRVmtzUzBGQldpeERRVUZyUWl4WlFVRlhPenRCUVVWNlFpeFJRVUZKTEZWQlFWVXNlVU5CUVdRN08wRkJSVVk3TzBGQlJVRXNVVUZCUnl4elFrRkJSU3hYUVVGR0xFVkJRV1VzVFVGQmJFSXNSVUZCTUVJN1FVRkRjRUlzV1VGQlNTeE5RVUZLTzBGQlEwRXNXVUZCU1N4VlFVRktPMEZCUTBFc1dVRkJTU3hqUVVGak8wRkJRMlFzWjBKQlFVa3NRMEZCUXl4RFFVUlRPMEZCUldRc2MwSkJRVlVzUlVGR1NUdEJRVWRrTEhsQ1FVRmhPMEZCU0VNc1UwRkJiRUk3TzBGQlRVRXNXVUZCUnl4UFFVRlBMRXRCUVVzc1NVRkJUQ3hEUVVGVkxGVkJRV3BDTEVsQlFTdENMRmRCUVd4RExFVkJRU3RETzBGQlF6TkRMSGxDUVVGaExFTkJRV0k3UVVGRFFTeHJRMEZCUlN4bFFVRkdMRVZCUVcxQ0xFdEJRVzVDTEVOQlFYbENPMEZCUTNKQ0xEaENRVUZqTEVkQlJFODdRVUZGY2tJc01rSkJRVmNzU1VGR1ZUdEJRVWR5UWl3MFFrRkJXU3hoUVVoVE8wRkJTWEpDTERKQ1FVRlhMRWRCU2xVN1FVRkxja0lzTmtKQlFXRXNTMEZNVVR0QlFVMXlRaXcwUWtGQldUdEJRVTVUTEdGQlFYcENPMEZCVTBnc1UwRllSQ3hOUVZkUE8wRkJRMGdzZVVKQlFXRXNTMEZCU3l4SlFVRk1MRU5CUVZVc1ZVRkJka0k3UVVGRFFTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc1ZVRkJXanRCUVVOQkxEWkNRVUZGTEU5QlFVWXNRMEZCVnl4VlFVRlZMRmxCUVZZc1IwRkJlVUlzVlVGQmNFTXNSVUZCWjBRc1ZVRkJWU3hSUVVGV0xFVkJRWEZDTzBGQlEycEZMRzlDUVVGSExFTkJRVU1zVTBGQlV5eExRVUZpTEVWQlFXOUNPMEZCUTJoQ0xEQkRRVUZGTEhGQ1FVRkdMRVZCUVhsQ0xGZEJRWHBDTEVOQlFYRkRMR3RDUVVGeVF5eEZRVUY1UkN4UlFVRjZSQ3hEUVVGclJTeGxRVUZzUlR0QlFVTkJMRFpDUVVGVExGTkJRVk1zU1VGQmJFSTdRVUZEU0N4cFFrRklSQ3hOUVVkUExFTkJSVTQ3TzBGQlJVUXNkMEpCUVZFc1IwRkJVaXhEUVVGWkxGRkJRVm83UVVGRFNDeGhRVlJFTzBGQlZVZzdPMEZCUlVRc09FSkJRVVVzY1VKQlFVWXNSVUZCZVVJc1MwRkJla0lzUTBGQkswSXNXVUZCVlRzN1FVRkZka01zWjBKQlFVY3NjMEpCUVVVc1NVRkJSaXhGUVVGUkxGRkJRVklzUTBGQmFVSXNaVUZCYWtJc1EwRkJTQ3hGUVVGelF6czdRVUZGY0VNN1FVRkRRU3h2UWtGQlNTeFBRVUZQTEhOQ1FVRkZMSE5DUVVGR0xFVkJRVEJDTEUxQlFYSkRPMEZCUTBFc2NVSkJRVWtzU1VGQlNTeEpRVUZGTEU5QlFVc3NRMEZCWml4RlFVRnJRaXhKUVVGRkxFTkJRWEJDTEVWQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTzBGQlEzaENMSGRDUVVGSExFOUJRVThzYzBKQlFVVXNjMEpCUVVZc1JVRkJNRUlzUTBGQk1VSXNRMEZCVUN4SlFVRjFReXhYUVVFeFF5eEZRVUYxUkR0QlFVTnVSQ3c0UTBGQlJTeHpRa0ZCUml4RlFVRXdRaXhEUVVFeFFpeEZRVUUyUWl4TlFVRTNRanRCUVVOSU8wRkJRMFFzTkVKQlFWRXNSMEZCVWl4RFFVRlpMRU5CUVZvN1FVRkRTRHM3UVVGRlJDeHZRa0ZCU1N4VlFVRlZMRVZCUVdRN1FVRkRRU3h2UWtGQlNTeFZRVUZWTEVWQlFXUTdRVUZEUVN4MVFrRkJUeXhQUVVGUUxFTkJRV1VzVlVGQlV5eEpRVUZVTEVWQlFXVTdRVUZETVVJc09FSkJRVlVzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4WFFVRm9RaXhGUVVFMlFpeFJRVUUzUWl4RlFVRldPMEZCUTBFc09FSkJRVlVzWjBOQlFXZERMRXRCUVVzc1JVRkJja01zUjBGQk1FTXNhMEpCUVRGRExFZEJRU3RFTEU5QlFTOUVMRWRCUVhsRkxHVkJRWHBGTEVkQlFUSkdMRXRCUVVzc1VVRkJhRWNzUjBGQk1rY3NTVUZCTTBjc1IwRkRSaXhsUVVSRkxFZEJRMmRDTEU5QlFVOHNXVUZFZGtJc1IwRkRjME1zVFVGRWRFTXNSMEZGUml4eFFrRkdSU3hIUVVWelFpeExRVUZMTEZGQlJqTkNMRWRCUlhORExGRkJSbWhFT3p0QlFVbEJMREJEUVVGRkxHZENRVUZHTEVWQlFXOUNMRXRCUVhCQ0xFTkJRVEJDTEZWQlFURkNMRVZCUVhGRExFOUJRWEpETzBGQlEwZ3NhVUpCVUVRN08wRkJVMEVzYzBOQlFVVXNjVUpCUVVZc1JVRkJlVUlzU1VGQmVrSTdRVUZEUVN4elEwRkJSU3hoUVVGR0xFVkJRV2xDTEU5QlFXcENMRU5CUVhsQ0xFVkJRVU1zVVVGQlVTeExRVUZVTEVWQlFYcENMRVZCUVRCRExFZEJRVEZETzBGQlEwUTdRVUZEUml4VFFUTkNSRHM3UVVFNFFrRXNPRUpCUVVVc2QwSkJRVVlzUlVGQk5FSXNTMEZCTlVJc1EwRkJhME1zV1VGQlZUdEJRVU40UXl4blFrRkJSeXh6UWtGQlJTeDNRa0ZCUml4RlFVRTBRaXhSUVVFMVFpeERRVUZ4UXl4clFrRkJja01zUTBGQlNDeEZRVUUyUkR0QlFVTjZSQ3gxUWtGQlR5eExRVUZRTzBGQlEwZzdPMEZCUlVRc2EwTkJRVVVzZDBKQlFVWXNSVUZCTkVJc1YwRkJOVUlzUTBGQmQwTXNaVUZCZUVNc1JVRkJlVVFzVVVGQmVrUXNRMEZCYTBVc2EwSkJRV3hGT3p0QlFVVkJMR3REUVVGRkxHbENRVUZHTEVWQlFYRkNMRWxCUVhKQ0xFTkJRVEJDTEUxQlFURkNMRVZCUVd0RExGbEJRVmM3UVVGRGVrTXNiMEpCUVVrc1UwRkJVeXh6UWtGQlJTeHBRa0ZCUml4RlFVRnhRaXhOUVVGeVFpeEZRVUZpT3p0QlFVVkJMSE5EUVVGRkxGbEJRVVlzUlVGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlJTeFhRVUZYTEU5QlFVOHNSMEZCY0VJc1JVRkJlRUlzUlVGQmJVUXNUVUZCYmtRN1FVRkRTQ3hoUVVwRU8wRkJTMGdzVTBGYVJEczdRVUZqUVN3NFFrRkJSU3h4UWtGQlJpeEZRVUY1UWl4TFFVRjZRaXhEUVVFclFpeFZRVUZUTEV0QlFWUXNSVUZCWlR0QlFVTTFReXhyUWtGQlRTeGpRVUZPTzBGQlEwRXNaMEpCUVVjc2MwSkJRVVVzU1VGQlJpeEZRVUZSTEZGQlFWSXNRMEZCYVVJc1pVRkJha0lzUTBGQlNDeEZRVUZ6UXpzN1FVRkZjRU1zYzBOQlFVVXNWMEZCUml4RlFVRmxMRWRCUVdZc1EwRkJiMElzV1VGQldTeFJRVUZvUXpzN1FVRkZRU3h6UTBGQlJTeGxRVUZHTEVWQlFXMUNMRXRCUVc1Q0xFTkJRWGxDTzBGQlEzSkNMR3REUVVGakxFZEJSRTg3UVVGRmNrSXNLMEpCUVZjc1NVRkdWVHRCUVVkeVFpeG5RMEZCV1N4aFFVaFRPMEZCU1hKQ0xDdENRVUZYTEVkQlNsVTdRVUZMY2tJc2FVTkJRV0VzUzBGTVVUdEJRVTF5UWl4blEwRkJXVHRCUVU1VExHbENRVUY2UWp0QlFWTkVPMEZCUTBZc1UwRm9Ra1E3TzBGQmEwSkJMRGhDUVVGRkxHZENRVUZHTEVWQlFXOUNMRXRCUVhCQ0xFTkJRVEJDTzBGQlEzUkNMSE5DUVVGVkxFdEJSRms3UVVGRmRFSXNNRUpCUVdNc1EwRkdVVHRCUVVkMFFpdzBRa0ZCWjBJc1EwRklUVHRCUVVsMFFpeDNRa0ZCV1N4RFFVTlNPMEZCUTBrc05FSkJRVmtzU1VGRWFFSTdRVUZGU1N3d1FrRkJWVHRCUVVOT0xHdERRVUZqTEVOQlJGSTdRVUZGVGl4dlEwRkJaMEk3UVVGR1ZqdEJRVVprTEdGQlJGRXNSVUZSVWp0QlFVTkpMRFJDUVVGWkxFbEJSR2hDTzBGQlJVa3NNRUpCUVZVN1FVRkRUaXhyUTBGQll5eERRVVJTTzBGQlJVNHNiME5CUVdkQ08wRkJSbFk3UVVGR1pDeGhRVkpSTEVWQlpWSTdRVUZEUVN3MFFrRkJXU3hIUVVSYU8wRkJSVWtzTUVKQlFWVTdRVUZEVGl4clEwRkJZeXhEUVVSU08wRkJSVTRzYjBOQlFXZENPMEZCUmxZN1FVRkdaQ3hoUVdaUkxFVkJjMEpTTzBGQlEwRXNORUpCUVZrc1IwRkVXanRCUVVWSkxEQkNRVUZWTzBGQlEwNHNhME5CUVdNc1EwRkVVanRCUVVWT0xHOURRVUZuUWp0QlFVWldPMEZCUzJRN1FVRkRRVHRCUVVOQk8wRkJWRUVzWVVGMFFsRTdRVUZLVlN4VFFVRXhRanM3UVVGMVEwRXNPRUpCUVVVc2VVSkJRVVlzUlVGQk5rSXNTMEZCTjBJc1EwRkJiVU03UVVGREwwSXNjMEpCUVZVc1MwRkVjVUk3UVVGRkwwSXNNRUpCUVdNc1EwRkdhVUk3UVVGSEwwSXNORUpCUVdkQ0xFTkJTR1U3UVVGSkwwSXNkMEpCUVZrc1EwRkRVanRCUVVOSkxEUkNRVUZaTEVsQlJHaENPMEZCUlVrc01FSkJRVlU3UVVGRFRpeHJRMEZCWXl4RFFVUlNPMEZCUlU0c2IwTkJRV2RDTzBGQlJsWTdRVUZHWkN4aFFVUlJMRVZCVVZJN1FVRkRRU3cwUWtGQldTeEhRVVJhTzBGQlJVa3NNRUpCUVZVN1FVRkRUaXhyUTBGQll5eERRVVJTTzBGQlJVNHNiME5CUVdkQ08wRkJSbFk3UVVGR1pDeGhRVkpSTEVWQlpWSTdRVUZEUVN3MFFrRkJXU3hIUVVSYU8wRkJSVWtzTUVKQlFWVTdRVUZEVGl4clEwRkJZeXhEUVVSU08wRkJSVTRzYjBOQlFXZENPMEZCUmxZN1FVRkdaQ3hoUVdaUkxFVkJjMEpTTzBGQlEwRXNORUpCUVZrc1IwRkVXanRCUVVWSkxEQkNRVUZWTzBGQlEwNHNhME5CUVdNc1EwRkVVanRCUVVWT0xHOURRVUZuUWp0QlFVWldPMEZCUzJRN1FVRkRRVHRCUVVOQk8wRkJWRUVzWVVGMFFsRTdRVUZLYlVJc1UwRkJia003TzBGQmRVTkJMRGhDUVVGRkxHMUNRVUZHTEVWQlFYVkNMRXRCUVhaQ0xFTkJRVFpDTEZWQlFWTXNRMEZCVkN4RlFVRlhPMEZCUTNCRExHdERRVUZGTEhGQ1FVRkdMRVZCUVhsQ0xFbEJRWHBDTzBGQlEwRXNhME5CUVVVc1lVRkJSaXhGUVVGcFFpeFBRVUZxUWl4RFFVRjVRaXhGUVVGRExGRkJRVkVzVTBGQlZDeEZRVUY2UWl4RlFVRTRReXhIUVVFNVF6dEJRVU5JTEZOQlNFUTdPMEZCUzBFc09FSkJRVVVzWjBKQlFVWXNSVUZCYjBJc1JVRkJjRUlzUTBGQmRVSXNUMEZCZGtJc1JVRkJaME1zVDBGQmFFTXNSVUZCZVVNc1ZVRkJVeXhEUVVGVUxFVkJRVmM3UVVGRGFFUXNaMEpCUVVrc1UwRkJVeXh6UWtGQlJTeEpRVUZHTEVWQlFWRXNTVUZCVWl4RFFVRmhMRWxCUVdJc1EwRkJZanRCUVVOQkxHZENRVUZKTEZkQlFWY3NjMEpCUVVVc1NVRkJSaXhGUVVGUkxFbEJRVklzUTBGQllTeE5RVUZpTEVOQlFXWTdRVUZEUVN4blFrRkJTU3hqUVVGakxITkNRVUZGTEVsQlFVWXNSVUZCVVN4SlFVRlNMRU5CUVdFc1UwRkJZaXhKUVVGNVFpeHpRa0ZCUlN4SlFVRkdMRVZCUVZFc1NVRkJVaXhEUVVGaExGTkJRV0lzUlVGQmQwSXNTMEZCZUVJc1EwRkJPRUlzUjBGQk9VSXNRMEZCZWtJc1IwRkJOa1FzUlVGQkwwVTdPMEZCUjBFc2FVSkJRVXNzU1VGQlNTeExRVUZGTEVOQlFWZ3NSVUZCWXl4TFFVRkZMRlZCUVZVc1RVRkJNVUlzUlVGQmEwTXNTVUZCYkVNc1JVRkJkVU03UVVGRGJrTXNiMEpCUVVrc1QwRkJUeXhKUVVGSkxHRkJRVW9zUTBGQmEwSXNWVUZCVlN4RlFVRldMRU5CUVd4Q0xFTkJRVmc3UVVGRFFTeHhRa0ZCU3l4alFVRk1MRWRCUVhOQ0xFdEJRWFJDT3p0QlFVVkJPMEZCUTBFc2NVSkJRVXNzVVVGQlREdEJRVU5JT3p0QlFVVkVMSGRDUVVGWkxFVkJRVm83TzBGQlIwRXNhVUpCUVVzc1NVRkJTU3hOUVVGRkxFTkJRVmdzUlVGQll5eE5RVUZGTEZsQlFWa3NUVUZCTlVJc1JVRkJiME1zUzBGQmNFTXNSVUZCZVVNN08wRkJSWEpETEc5Q1FVRkpMRTlCUVU4c1NVRkJTU3hoUVVGS0xFTkJRV3RDTEZsQlFWa3NSMEZCV2l4RFFVRnNRaXhEUVVGWU8wRkJRMEVzY1VKQlFVc3NZMEZCVEN4SFFVRnpRaXhKUVVGMFFqczdRVUZGUVR0QlFVTkJMSEZDUVVGTExGRkJRVXc3TzBGQlJVRXNNRUpCUVZVc1NVRkJWaXhEUVVGblFpeExRVUZMTEVWQlFYSkNPMEZCUTBnN08wRkJSVVFzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRk5CUVZvN08wRkJSVUVzTUVKQlFXTTdRVUZEVml4dlFrRkJTU3hOUVVSTk8wRkJSVllzTUVKQlFWVXNVVUZHUVR0QlFVZFdMRFpDUVVGaE8wRkJTRWdzWVVGQlpEczdRVUZOUVN4clEwRkJSU3h0UWtGQlJpeEZRVUYxUWl4UFFVRjJRaXhEUVVFclFpeFBRVUV2UWpzN1FVRkZRU3h2UWtGQlVTeEhRVUZTTEVOQlFWa3NWMEZCV2pzN1FVRkZRU3hyUTBGQlJTeHhRa0ZCUml4RlFVRjVRaXhYUVVGNlFpeERRVUZ4UXl4bFFVRnlReXhGUVVGelJDeFJRVUYwUkN4RFFVRXJSQ3hyUWtGQkwwUTdRVUZEUVN4blFrRkJSeXh6UWtGQlJTeDNRa0ZCUml4RlFVRTBRaXhSUVVFMVFpeERRVUZ4UXl4clFrRkJja01zUTBGQlNDeEZRVUUyUkR0QlFVTjZSQ3h6UTBGQlJTeDNRa0ZCUml4RlFVRTBRaXhYUVVFMVFpeERRVUYzUXl4clFrRkJlRU1zUlVGQk5FUXNVVUZCTlVRc1EwRkJjVVVzWlVGQmNrVTdRVUZEU0RzN1FVRkZSQ3hyUTBGQlJTeFpRVUZHTEVWQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEVWQlFVVXNWMEZCVnl4RFFVRmlMRVZCUVhoQ0xFVkJRVEJETEUxQlFURkRPMEZCUTBnc1UwRTVRMFE3TzBGQlowUkJMR0ZCUVVrc1NVRkJTU3hKUVVGRkxFTkJRVllzUlVGQllTeEpRVUZGTEU5QlFVOHNZVUZCVUN4RFFVRnhRaXhOUVVGeVFpeEhRVUUwUWl4RFFVRXpReXhGUVVFMlF5eEhRVUUzUXl4RlFVRnJSRHRCUVVNNVF5eG5Ra0ZCU1N4alFVRmpMRTlCUVU4c1lVRkJVQ3hEUVVGeFFpeERRVUZ5UWl4RFFVRnNRanRCUVVOQkxHZENRVUZITEZsQlFWa3NTVUZCWml4RlFVRnhRanM3UVVGRmFrSXNiMEpCUVVrc1YwRkJWeXhaUVVGWkxFbEJRVm9zUTBGQmFVSXNUMEZCYWtJc1EwRkJlVUlzUjBGQmVrSXNSVUZCT0VJc1JVRkJPVUlzUTBGQlpqdEJRVU5CTEhORFFVRkZMR0ZCUVdFc1VVRkJaaXhGUVVGNVFpeE5RVUY2UWl4RFFVRm5ReXh2UWtGQmIwSXNXVUZCV1N4SlFVRm9ReXhIUVVGMVF5eGxRVUYyUXl4SFFVRjVSQ3haUVVGWkxFbEJRWEpGTEVkQlFUUkZMR1ZCUVRWRkxFZEJRVGhHTEZsQlFWa3NTVUZCTVVjc1IwRkJhVWdzYjBOQlFXcElMRWRCUVhkS0xGbEJRVmtzU1VGQmNFc3NSMEZCTWtzc1pVRkJNMDA3UVVGRFNEdEJRVU5LT3p0QlFVVkVPenRCUVVWQk8wRkJRMEVzT0VKQlFVVXNLMEpCUVVZc1JVRkJiVU1zVFVGQmJrTXNRMEZCTWtNc1ZVRkJVeXhEUVVGVUxFVkJRVmM3TzBGQlJXeEVMR2RDUVVGSExITkNRVUZGTEhsQ1FVRkdMRVZCUVRaQ0xGRkJRVGRDTEVOQlFYTkRMR3RDUVVGMFF5eERRVUZJTEVWQlFUaEVPMEZCUXpGRUxIVkNRVUZQTEV0QlFWQTdRVUZEU0RzN1FVRkZSQ3hqUVVGRkxHTkJRVVk3UVVGRFFTeG5Ra0ZCU1N4VlFVRlZMRXRCUVVzc1MwRkJUQ3hEUVVGWExFdEJRVXNzVFVGQlRDeExRVUZqTEVsQlFYcENMRU5CUVdRN08wRkJSVUVzWjBKQlFVa3NhVUpCUVdsQ0xHbENRVUZGTEVsQlFVWXNRMEZCVHl4elFrRkJSU3hwUWtGQlJpeEZRVUZ4UWl4SFFVRnlRaXhGUVVGUUxFTkJRWEpDTzBGQlEwRXNaMEpCUVVrc2IwSkJRVzlDTEdsQ1FVRkZMRWxCUVVZc1EwRkJUeXh6UWtGQlJTeHZRa0ZCUml4RlFVRjNRaXhIUVVGNFFpeEZRVUZRTEVOQlFYaENPMEZCUTBFc1owSkJRVWNzYTBKQlFXdENMRVZCUVhKQ0xFVkJRWGxDTzBGQlEzSkNMSE5EUVVGRkxHbENRVUZHTEVWQlFYRkNMRXRCUVhKQ08wRkJRMEVzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBRc1owSkJRVWNzY1VKQlFYRkNMRVZCUVhoQ0xFVkJRVFJDTzBGQlEzaENMSE5EUVVGRkxHOUNRVUZHTEVWQlFYZENMRXRCUVhoQ08wRkJRMEVzZFVKQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxHdERRVUZGTEhsQ1FVRkdMRVZCUVRaQ0xGZEJRVGRDTEVOQlFYbERMR1ZCUVhwRExFVkJRVEJFTEZGQlFURkVMRU5CUVcxRkxHdENRVUZ1UlRzN1FVRkZRU3cyUWtGQlJTeEpRVUZHTEVOQlFVODdRVUZEU0N4elFrRkJUU3hOUVVSSU8wRkJSVWdzY1VKQlFVc3NaMEpCUmtZN1FVRkhTQ3gxUWtGQlR5eExRVWhLTzBGQlNVZ3NjMEpCUVUwc2MwSkJRVVVzYVVKQlFVWXNSVUZCY1VJc1UwRkJja0lzUzBGQmJVTXNWVUZCYmtNc1IwRkJaMFFzVDBGS2JrUTdRVUZMU0N4NVFrRkJVeXhwUWtGQlV5eEpRVUZVTEVWQlFXTTdPMEZCUlc1Q0xIZENRVUZKTEZOQlFWTXNjMEpCUVVVc1NVRkJSaXhGUVVGUkxFbEJRVklzUTBGQllTeHJRa0ZCWWl4RlFVRnBReXhKUVVGcVF5eEZRVUZpT3p0QlFVVkJMREJEUVVGRkxIbENRVUZHTEVWQlFUWkNMRmRCUVRkQ0xFTkJRWGxETEd0Q1FVRjZReXhGUVVFMlJDeFJRVUUzUkN4RFFVRnpSU3hsUVVGMFJUczdRVUZGUVN4M1FrRkJTU3hQUVVGUExFMUJRVkFzU1VGQmFVSXNWMEZCY2tJc1JVRkJhVU03UVVGRE4wSXNPRU5CUVVVc2VVSkJRVVlzUlVGQk5rSXNTVUZCTjBJc1EwRkJhME1zT0VOQlFXeERPMEZCUTBFc09FTkJRVVVzZVVKQlFVWXNSVUZCTmtJc1UwRkJOMElzUTBGQmRVTXNUVUZCZGtNN1FVRkRTQ3h4UWtGSVJDeE5RVWRMTzBGQlEwUXNLMEpCUVU4c1VVRkJVQ3hEUVVGblFpeE5RVUZvUWl4RFFVRjFRaXhKUVVGMlFqdEJRVU5JT3p0QlFVVkVMRFJDUVVGUkxFZEJRVklzUTBGQldTeEpRVUZhTzBGQlJVZzdRVUZ3UWtVc1lVRkJVRHRCUVhWQ1NDeFRRVGREUkRzN1FVRXJRMEU3UVVGRFFTdzRRa0ZCUlN4elEwRkJSaXhGUVVFd1F5eE5RVUV4UXl4RFFVRnBSQ3hWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVU40UkN4blFrRkJSeXh6UWtGQlJTeG5RMEZCUml4RlFVRnZReXhSUVVGd1F5eERRVUUyUXl4clFrRkJOME1zUTBGQlNDeEZRVUZ4UlR0QlFVTnFSU3gxUWtGQlR5eExRVUZRTzBGQlEwZzdPMEZCUlVRc1kwRkJSU3hqUVVGR08wRkJRMEVzWjBKQlFVa3NWVUZCVlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFMUJRVXdzUzBGQll5eEpRVUY2UWl4RFFVRmtPenRCUVVWQkxHZENRVUZKTEdkQ1FVRm5RaXhwUWtGQlJTeEpRVUZHTEVOQlFVOHNjMEpCUVVVc1owSkJRVVlzUlVGQmIwSXNSMEZCY0VJc1JVRkJVQ3hEUVVGd1FqdEJRVU5CTEdkQ1FVRkhMR2xDUVVGcFFpeEZRVUZ3UWl4RlFVRjNRanRCUVVOd1FpeHpRMEZCUlN4blFrRkJSaXhGUVVGdlFpeExRVUZ3UWp0QlFVTkJMSFZDUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4clEwRkJSU3huUTBGQlJpeEZRVUZ2UXl4WFFVRndReXhEUVVGblJDeGxRVUZvUkN4RlFVRnBSU3hSUVVGcVJTeERRVUV3UlN4clFrRkJNVVU3TzBGQlJVRXNOa0pCUVVVc1NVRkJSaXhEUVVGUE8wRkJRMGdzYzBKQlFVMHNUVUZFU0R0QlFVVklMSEZDUVVGTExHdENRVVpHTzBGQlIwZ3NkVUpCUVU4c1MwRklTanRCUVVsSUxITkNRVUZOTEhOQ1FVRkZMSGRDUVVGR0xFVkJRVFJDTEZOQlFUVkNMRXRCUVRCRExGVkJRVEZETEVkQlFYVkVMRTlCU2pGRU8wRkJTMGdzZVVKQlFWTXNhVUpCUVZNc1NVRkJWQ3hGUVVGak96dEJRVVZ1UWl4M1FrRkJTU3hUUVVGVExITkNRVUZGTEVsQlFVWXNSVUZCVVN4SlFVRlNMRU5CUVdFc1owTkJRV0lzUlVGQkswTXNTVUZCTDBNc1JVRkJZanM3UVVGRlFTd3dRMEZCUlN4blEwRkJSaXhGUVVGdlF5eFhRVUZ3UXl4RFFVRm5SQ3hyUWtGQmFFUXNSVUZCYjBVc1VVRkJjRVVzUTBGQk5rVXNaVUZCTjBVN08wRkJSVUVzZDBKQlFVa3NUMEZCVHl4TlFVRlFMRWxCUVdsQ0xGZEJRWEpDTEVWQlFXbERPMEZCUXpkQ0xEaERRVUZGTEdkQ1FVRkdMRVZCUVc5Q0xFZEJRWEJDTEVOQlFYZENMRVZCUVhoQ096dEJRVVZCTERoRFFVRkZMRzFDUVVGR0xFVkJRWFZDTEU5QlFYWkNMRU5CUVN0Q08wRkJRek5DTEhGRFFVRlRPMEZCUkd0Q0xIbENRVUV2UWl4RlFVVkhMRWRCUmtnc1JVRkZVU3hSUVVaU0xFVkJSV3RDTEZsQlFWYzdRVUZEZWtJc2EwUkJRVVVzZVVKQlFVWXNSVUZCTmtJc1NVRkJOMElzUTBGQmEwTXNSVUZCYkVNc1JVRkJjME1zU1VGQmRFTTdRVUZEUVN4clJFRkJSU3hYUVVGR0xFVkJRV1VzVFVGQlpqdEJRVU5JTEhsQ1FVeEVPMEZCVFVnc2NVSkJWRVFzVFVGVFN6dEJRVU5FTERoRFFVRkZMR2REUVVGR0xFVkJRVzlETEVsQlFYQkRMRU5CUVhsRExFMUJRWHBETzBGQlEwRXNPRU5CUVVVc1owTkJRVVlzUlVGQmIwTXNVMEZCY0VNc1EwRkJPRU1zVFVGQk9VTTdRVUZEU0R0QlFVTktPMEZCZUVKRkxHRkJRVkE3UVVFd1FrZ3NVMEV4UTBRN08wRkJORU5CTERoQ1FVRkZMRFpDUVVGR0xFVkJRV2xETEV0QlFXcERMRU5CUVhWRExGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlF6bERMR2RDUVVGSExITkNRVUZGTEVsQlFVWXNSVUZCVVN4UlFVRlNMRU5CUVdsQ0xHdENRVUZxUWl4RFFVRklMRVZCUVhsRE8wRkJRM0pETEhWQ1FVRlBMRXRCUVZBN1FVRkRTRHM3UVVGRlJDeGpRVUZGTEdOQlFVWTdPMEZCUlVFc1owSkJRVWtzVjBGQlZ5eHBRa0ZCUlN4SlFVRkdMRU5CUVU4c2MwSkJRVVVzVjBGQlJpeEZRVUZsTEVkQlFXWXNSVUZCVUN4RFFVRm1PMEZCUTBFc1owSkJRVWNzV1VGQldTeEZRVUZtTEVWQlFXMUNPMEZCUTJZc2MwTkJRVVVzVjBGQlJpeEZRVUZsTEV0QlFXWTdRVUZEUVN4MVFrRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNhME5CUVVVc2QwSkJRVVlzUlVGQk5FSXNWMEZCTlVJc1EwRkJkME1zWlVGQmVFTXNSVUZCZVVRc1VVRkJla1FzUTBGQmEwVXNhMEpCUVd4Rk96dEJRVVZCTEdkQ1FVRkpMRTlCUVU4c1MwRkJTeXhUUVVGTUxFTkJRV1VzVTBGQlppeERRVUZZTzBGQlEwRXNaMEpCUVVrc1UwRkJVenRCUVVOVUxIRkNRVUZMTzBGQlEwUXNkMEpCUVVrc1dVRkJXU3hGUVVSbU8wRkJSVVFzTUVKQlFVMHNVVUZHVER0QlFVZEVMRFpDUVVGVE8wRkJTRklzYVVKQlJFazdRVUZOVkN3MlFrRkJZU3hMUVVGTExFbEJRVXdzUTBGQlZUdEJRVTVrTEdGQlFXSTdPMEZCVTBFc2QwSkJRVmtzVVVGQldpeEhRVUYxUWl4UlFVRjJRaXhGUVVOQkxGbEJRVmtzVjBGQldpeEhRVUV3UWl4VFFVUXhRanM3UVVGSFFTdzJRa0ZCUlN4SlFVRkdMRU5CUVU4N1FVRkRTQ3h6UWtGQlRTeE5RVVJJTzBGQlJVZ3NjVUpCUVVzc1ZVRkJWU3hYUVVaYU8wRkJSMGdzYzBKQlFVMHNUVUZJU0R0QlFVbElMSGxDUVVGVExHbENRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRlRUlzTmtKQlFWTXNVMEZCVXl4SlFVRnNRanM3UVVGRlFTeDNRa0ZCUnl4WlFVRlpMRVZCUVZvc1NVRkJhMElzUTBGQlF5eERRVUYwUWl4RlFVRjVRanRCUVVOeVFpeHZRMEZCV1N4RlFVRmFMRWRCUVdsQ0xFOUJRVThzVDBGQlR5eE5RVUZRTEVkQlFXTXNRMEZCY2tJc1JVRkJkMElzUlVGQmVrTTdRVUZEU0RzN1FVRkZSQ3d3UTBGQlJTeDNRa0ZCUml4RlFVRTBRaXhYUVVFMVFpeERRVUYzUXl4clFrRkJlRU1zUlVGQk5FUXNVVUZCTlVRc1EwRkJjVVVzWlVGQmNrVTdRVUZEUVN3d1EwRkJSU3hYUVVGR0xFVkJRV1VzUjBGQlppeERRVUZ0UWl4RlFVRnVRanM3UVVGRlFTeDNRa0ZCUnl4elFrRkJSU3h4UWtGQlJpeEZRVUY1UWl4UlFVRjZRaXhEUVVGclF5eHJRa0ZCYkVNc1EwRkJTQ3hGUVVFd1JEdEJRVU4wUkN3NFEwRkJSU3h4UWtGQlJpeEZRVUY1UWl4WFFVRjZRaXhEUVVGeFF5eHJRa0ZCY2tNc1JVRkJlVVFzVVVGQmVrUXNRMEZCYTBVc1pVRkJiRVU3UVVGRFNEczdRVUZGUkN3d1EwRkJSU3h4UWtGQlJpeEZRVUY1UWl4WFFVRjZRaXhEUVVGeFF5eGxRVUZ5UXl4RlFVRnpSQ3hSUVVGMFJDeERRVUVyUkN4clFrRkJMMFE3UVVGRFFTd3dRMEZCUlN4M1FrRkJSaXhGUVVFMFFpeFhRVUUxUWl4RFFVRjNReXhyUWtGQmVFTXNSVUZCTkVRc1VVRkJOVVFzUTBGQmNVVXNaVUZCY2tVN08wRkJSVUVzTUVOQlFVY3NOa0pCUVVnc1JVRkJiVU1zVDBGQmJrTXNRMEZCTkVNc1QwRkJOVU03UVVGRFNDeHBRa0YwUWtVN1FVRjFRa2dzTUVKQlFWVTdRVUYyUWxBc1lVRkJVRHRCUVhsQ1NDeFRRWEpFUkRzN1FVRjNSRUVzT0VKQlFVVXNiVUpCUVVZc1JVRkJkVUlzUzBGQmRrSXNRMEZCTmtJc1dVRkJWVHRCUVVOdVF5eHJRMEZCUlN4WFFVRkdMRVZCUVdVc1QwRkJaaXhEUVVGMVFqdEJRVU51UWl4NVFrRkJVenRCUVVSVkxHRkJRWFpDTEVWQlJVY3NSMEZHU0N4RlFVVlJMRkZCUmxJc1JVRkZhMElzV1VGQlZ6dEJRVU42UWl4elEwRkJSU3hyUWtGQlJpeEZRVUZ6UWl4TlFVRjBRanRCUVVOSUxHRkJTa1E3UVVGTFNDeFRRVTVFT3p0QlFWRkJMRGhDUVVGRkxHZENRVUZHTEVWQlFXOUNMRXRCUVhCQ0xFTkJRVEJDTEZsQlFWVTdRVUZEYUVNc2EwTkJRVVVzYTBKQlFVWXNSVUZCYzBJc1QwRkJkRUlzUTBGQk9FSTdRVUZETVVJc2VVSkJRVk03UVVGRWFVSXNZVUZCT1VJc1JVRkZSeXhIUVVaSUxFVkJSVkVzVVVGR1VpeEZRVVZyUWl4WlFVRlhPMEZCUTNwQ0xITkRRVUZGTEZkQlFVWXNSVUZCWlN4TlFVRm1PMEZCUTBnc1lVRktSRHRCUVV0SUxGTkJUa1E3TzBGQlVVRXNPRUpCUVVVc2EwSkJRVVlzUlVGQmMwSXNTMEZCZEVJc1EwRkJORUlzV1VGQlZUdEJRVU5zUXl4clEwRkJSU3hYUVVGR0xFVkJRV1VzVDBGQlppeERRVUYxUWp0QlFVTnVRaXg1UWtGQlV6dEJRVVJWTEdGQlFYWkNMRVZCUlVjc1IwRkdTQ3hGUVVWUkxGRkJSbElzUlVGRmEwSXNXVUZCVnp0QlFVTjZRaXh6UTBGQlJTeHRRa0ZCUml4RlFVRjFRaXhOUVVGMlFqdEJRVU5JTEdGQlNrUTdRVUZMU0N4VFFVNUVPenRCUVZGQkxEaENRVUZGTEdkQ1FVRkdMRVZCUVc5Q0xFdEJRWEJDTEVOQlFUQkNMRmxCUVZVN1FVRkRhRU1zYTBOQlFVVXNiVUpCUVVZc1JVRkJkVUlzVDBGQmRrSXNRMEZCSzBJN1FVRkRNMElzZVVKQlFWTTdRVUZFYTBJc1lVRkJMMElzUlVGRlJ5eEhRVVpJTEVWQlJWRXNVVUZHVWl4RlFVVnJRaXhaUVVGWE8wRkJRM3BDTEhORFFVRkZMRmRCUVVZc1JVRkJaU3hOUVVGbU8wRkJRMGdzWVVGS1JEdEJRVXRJTEZOQlRrUTdRVUZQUVRzN1FVRkZRVHM3UVVGRlFTdzRRa0ZCUlN4NVFrRkJSaXhGUVVFMlFpeExRVUUzUWl4RFFVRnRReXhaUVVGVk8wRkJRM3BETEdkQ1FVRkpMRTFCUVUwc2MwSkJRVVVzU1VGQlJpeEZRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRmlMRU5CUVZZN08wRkJSVUVzYTBOQlFVVXNkVUpCUVVZc1JVRkJNa0lzU1VGQk0wSTdRVUZEUVN4clEwRkJSU3huUTBGQlowTXNSMEZCYkVNc1JVRkJkVU1zU1VGQmRrTTdRVUZEU0N4VFFVeEVPenRCUVU5QkxEaENRVUZGTERaQ1FVRkdMRVZCUVdsRExFdEJRV3BETEVOQlFYVkRMRmxCUVZVN1FVRkROME1zWjBKQlFVa3NWVUZCVlN4elFrRkJSU3hKUVVGR0xFVkJRVkVzU1VGQlVpeERRVUZoTEU5QlFXSXNSVUZCYzBJc1NVRkJkRUlzUTBGQk1rSXNVMEZCTTBJc1EwRkJaRHM3UVVGRlFTeG5Ra0ZCU1N4VFFVRlRMSE5DUVVGRkxFbEJRVVlzUlVGQlVTeE5RVUZTTEVkQlFXbENMRWxCUVdwQ0xFTkJRWE5DTEUxQlFYUkNMRU5CUVdJN1FVRkRRU3huUWtGQlNTeFBRVUZQTEVsQlFVa3NZVUZCU2l4RFFVRnJRaXhOUVVGc1FpeERRVUZZTzBGQlEwRXNaMEpCUVVjc1QwRkJTQ3hGUVVGWk8wRkJRMUlzY1VKQlFVc3NZMEZCVEN4SFFVRnpRaXhKUVVGMFFqdEJRVU5CTEc5Q1FVRkpMRkZCUVZFc1ZVRkJWU3hQUVVGV0xFTkJRV3RDTEV0QlFVc3NSVUZCZGtJc1EwRkJXanRCUVVOQkxHOUNRVUZKTEZOQlFWTXNRMEZCUXl4RFFVRmtMRVZCUVdsQ08wRkJRMklzT0VKQlFWVXNTVUZCVml4RFFVRm5RaXhMUVVGTExFVkJRWEpDTzBGQlEwZzdRVUZGU2l4aFFWQkVMRTFCVDA4N1FVRkRTQ3h4UWtGQlN5eGpRVUZNTEVkQlFYTkNMRXRCUVhSQ08wRkJRMEVzYjBKQlFVa3NVVUZCVVN4VlFVRlZMRTlCUVZZc1EwRkJhMElzUzBGQlN5eEZRVUYyUWl4RFFVRmFPMEZCUTBFc2IwSkJRVWtzVVVGQlVTeERRVUZETEVOQlFXSXNSVUZCWjBJN1FVRkRXaXc0UWtGQlZTeE5RVUZXTEVOQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEVOQlFYaENPMEZCUTBnN1FVRkRTanM3UVVGRlJEdEJRVU5CTEdsQ1FVRkxMRkZCUVV3N08wRkJSVUVzWjBKQlFVY3NWVUZCVlN4TlFVRmlMRVZCUVhGQ08wRkJRMnBDTEhORFFVRkZMSEZDUVVGR0xFVkJRWGxDTEZkQlFYcENMRU5CUVhGRExHdENRVUZ5UXl4RlFVRjVSQ3hSUVVGNlJDeERRVUZyUlN4bFFVRnNSVHRCUVVOSUxHRkJSa1FzVFVGRlR6dEJRVU5JTEhORFFVRkZMSEZDUVVGR0xFVkJRWGxDTEZkQlFYcENMRU5CUVhGRExHVkJRWEpETEVWQlFYTkVMRkZCUVhSRUxFTkJRU3RFTEd0Q1FVRXZSRHRCUVVOSU96dEJRVVZFTEdkQ1FVRkhMSE5DUVVGRkxIZENRVUZHTEVWQlFUUkNMRkZCUVRWQ0xFTkJRWEZETEdWQlFYSkRMRU5CUVVnc1JVRkJNRVE3UVVGRGRFUXNjME5CUVVVc2QwSkJRVVlzUlVGQk5FSXNWMEZCTlVJc1EwRkJkME1zWlVGQmVFTXNSVUZCZVVRc1VVRkJla1FzUTBGQmEwVXNhMEpCUVd4Rk8wRkJRMGc3UVVGRFNpeFRRV2hEUkRzN1FVRnJRMEU3UVVGRFFTdzRRa0ZCUlN4MVEwRkJSaXhGUVVFeVF5eExRVUV6UXl4RFFVRnBSQ3haUVVGVk8wRkJRM1pFTEdkQ1FVRkpMR0ZCUVdFc2MwSkJRVVVzU1VGQlJpeEZRVUZSTEVsQlFWSXNRMEZCWVN4SlFVRmlMRU5CUVdwQ08wRkJRMEVzWjBKQlFVa3NZMEZCWXl4elFrRkJSU3hKUVVGR0xFVkJRVkVzU1VGQlVpeERRVUZoTEV0QlFXSXNRMEZCYkVJN08wRkJSVUVzYTBOQlFVVXNiVUpCUVVZc1JVRkJkVUlzU1VGQmRrSXNRMEZCTkVJc1RVRkJOVUlzUlVGQmIwTXNXVUZCVnp0QlFVTXpReXh2UWtGQlNTeFRRVUZUTEhOQ1FVRkZMRzFDUVVGR0xFVkJRWFZDTEUxQlFYWkNMRVZCUVdJN08wRkJSVUVzYzBOQlFVVXNXVUZCUml4RlFVRm5RaXhQUVVGb1FpeERRVUYzUWl4RlFVRkZMRmRCUVZjc1QwRkJUeXhIUVVGd1FpeEZRVUY0UWl4RlFVRnRSQ3hOUVVGdVJEdEJRVU5JTEdGQlNrUTdPMEZCVFVFc05rSkJRVVVzU1VGQlJpeERRVUZQTzBGQlEwZ3NjMEpCUVUwc1MwRkVTRHRCUVVWSUxIRkNRVUZMTEZkQlJrWTdRVUZIU0N4MVFrRkJUeXhMUVVoS08wRkJTVWdzZVVKQlFWTXNhVUpCUVZNc1NVRkJWQ3hGUVVGak96dEJRVVZ1UWl4M1FrRkJTU3hUUVVGVExITkNRVUZGTEVsQlFVWXNSVUZCVVN4SlFVRlNMRU5CUVdFc2FVSkJRV0lzUlVGQlowTXNTVUZCYUVNc1JVRkJZanM3UVVGRlFTd3dRMEZCUlN4eFFrRkJSaXhGUVVGNVFpeEpRVUY2UWl4RFFVRTRRaXhOUVVFNVFqczdRVUZGUVR0QlFVTkJMREJEUVVGRkxEWkVRVUZHTEVWQlFXbEZMRTFCUVdwRk96dEJRVVZCTEhkQ1FVRkpMR2RDUVVGblFpeEZRVUZ3UWp0QlFVTkJMR2REUVVGWkxGZEJRVm9zUTBGQmQwSXNUMEZCZUVJc1EwRkJaME1zVlVGQlV5eEpRVUZVTEVWQlFXTTdRVUZETVVNc05rSkJRVWtzU1VGQlNTeEpRVUZGTEVOQlFWWXNSVUZCV1N4SlFVRkZMRTlCUVU4c1lVRkJVQ3hEUVVGeFFpeE5RVUZ5UWl4SFFVRTBRaXhEUVVFeFF5eEZRVUUwUXl4SFFVRTFReXhGUVVGcFJEdEJRVU0zUXl4blEwRkJSeXhSUVVGUkxFOUJRVThzWVVGQlVDeERRVUZ4UWl4RFFVRnlRaXhGUVVGM1FpeEpRVUZ1UXl4RlFVRjVRenRCUVVOeVF5eHBSRUZCYVVJc1QwRkJUeXhoUVVGUUxFTkJRWEZDTEVOQlFYSkNMRVZCUVhkQ0xFbEJRWGhDTEVkQlFTdENMRWxCUVdoRU8wRkJRMGc3UVVGRFNqdEJRVU5LTEhGQ1FVNUVPenRCUVZGQkxIZENRVUZITEdGQlFVZ3NSVUZCYTBJN1FVRkRaQ3huUTBGQlVTeEhRVUZTTEVOQlFWa3NZVUZCV2p0QlFVTkJMSGREUVVGblFpeGpRVUZqTEZOQlFXUXNRMEZCZDBJc1EwRkJlRUlzUlVGQk1rSXNZMEZCWXl4TlFVRmtMRWRCUVhWQ0xFTkJRV3hFTEVOQlFXaENPenRCUVVWQkxEaERRVUZGTEc5Q1FVRkdMRVZCUVhkQ0xFZEJRWGhDTEVOQlFUUkNMRmxCUVZrc1VVRkJlRU03UVVGRFFTdzRRMEZCUlN4NVFrRkJSaXhGUVVFMlFpeEhRVUUzUWl4RFFVRnBReXhoUVVGcVF6czdRVUZGUVN3NFEwRkJSU3gzUWtGQlJpeEZRVUUwUWl4SlFVRTFRaXhEUVVGcFF5eGhRVUZxUXp0QlFVTkJMRGhEUVVGRkxITkNRVUZHTEVWQlFUQkNMRWxCUVRGQ08wRkJRMEU3UVVGRFFTdzRRMEZCUlN3eVEwRkJSaXhGUVVFclF5eFBRVUV2UXl4RFFVRjFSQ3hQUVVGMlJEczdRVUZGUVN3NFEwRkJSU3hqUVVGR0xFVkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xHdENRVUU1UWl4RlFVRnJSQ3hSUVVGc1JDeERRVUV5UkN4bFFVRXpSRHRCUVVOSU96dEJRVVZFT3p0QlFVVkJMREJEUVVGRkxHbENRVUZHTEVWQlFYRkNMRXRCUVhKQ0xFZEJRVFpDTEZsQlFUZENMRU5CUVRCRExITkNRVUZGTEhWQ1FVRkdMRU5CUVRGRE96dEJRVVZCTERCRFFVRkZMSEZDUVVGR0xFVkJRWGxDTEV0QlFYcENMRU5CUVN0Q08wRkJRek5DTEhORFFVRmpMRU5CUkdFN1FVRkZNMElzZDBOQlFXZENMRU5CUmxjN1FVRkhNMElzZDBOQlFXZENMRWxCU0ZjN1FVRkpNMElzYTBOQlFWVXNjVUpCU21sQ08wRkJTek5DTEdkRFFVRlJMRWxCVEcxQ08wRkJUVE5DTERoQ1FVRk5PMEZCVG5GQ0xIRkNRVUV2UWpzN1FVRlRRU3d3UTBGQlJTeHhRa0ZCUml4RlFVRjVRaXhMUVVGNlFpeERRVUVyUWp0QlFVTXpRaXh6UTBGQll5eERRVVJoTzBGQlJUTkNMSGREUVVGblFpeERRVVpYTzBGQlJ6TkNMR3REUVVGVkxIRkNRVWhwUWp0QlFVa3pRaXhuUTBGQlVTeExRVXB0UWp0QlFVc3pRaXgxUTBGQlpTeEpRVXhaTzBGQlRUTkNMR3REUVVGVkxFdEJUbWxDTzBGQlR6TkNMRGhDUVVGTkxFdEJVSEZDTzBGQlVUTkNMSFZEUVVGbE8wRkJVbGtzY1VKQlFTOUNPenRCUVZkQk96dEJRVVZCTEhkQ1FVRkpMRkZCUVZFc1pVRkJXaXhEUVVFMFFpeG5Ra0ZCTlVJc1JVRkJPRU1zUlVGQlJTeFRRVUZUTEU5QlFVOHNXVUZCYkVJc1JVRkJaME1zYlVKQlFXMUNMR05CUVc1RUxFVkJRVGxETzBGQlJVZzdRVUZxUlVVc1lVRkJVRHRCUVcxRlNDeFRRVGRGUkR0QlFTdEZTRHRCUVVOS0xFTkJkbWxDUkRzN096czdPenRCUTBaQk96czdPenRCUVV0RExGZEJRVlVzVDBGQlZpeEZRVUZ0UWp0QlFVTnNRanRCUVVOQk8wRkJRMEVzVFVGQlJ5eFJRVUZQTEUxQlFWQXNlVU5CUVU4c1RVRkJVQ3hQUVVGclFpeFJRVUZzUWl4SlFVRTRRaXhSUVVGUExFOUJRVThzVDBGQlpDeE5RVUV3UWl4UlFVRXpSQ3hGUVVGeFJUdEJRVU51UlN4WlFVRlJMRkZCUVZFc1VVRkJVaXhEUVVGU0xFVkJRVEpDTEUxQlFUTkNMRVZCUVcxRExGRkJRVzVETzBGQlEwUXNSMEZHUkN4TlFVZExPMEZCUTBnc1dVRkJVU3hOUVVGU0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xGRkJRWGhDTzBGQlEwUTdRVUZEUml4RFFWUkJMRVZCVTBNc1ZVRkJVeXhEUVVGVUxFVkJRVmtzVFVGQldpeEZRVUZ2UWl4UlFVRndRaXhGUVVFNFFpeFRRVUU1UWl4RlFVRjVRenM3UVVGRmVrTXNUVUZCU1N4VFFVRlRMRVZCUVdJN1FVRkJRU3hOUVVOSkxHRkJRV0VzVTBGQllpeFZRVUZoTEVkQlFWYzdRVUZEZEVJc1YwRkJUeXhQUVVGUExFMUJRVkFzUjBGQlowSXNUMEZCVHl4UFFVRlBMRTFCUVZBc1IwRkJaMElzUTBGQmRrSXNRMEZCYUVJc1IwRkJORU1zU1VGQmJrUTdRVUZEUkN4SFFVaE1PMEZCUVVFc1RVRkpTU3huUWtGQlowSXNVMEZCYUVJc1lVRkJaMElzUjBGQlZ6dEJRVU42UWl4UlFVRkpMRU5CUVVvN1FVRkJRU3hSUVVOSkxGZEJRVmNzUzBGRVpqdEJRVVZCTEZOQlFVc3NTVUZCUlN4UFFVRlBMRTFCUVZBc1IwRkJZeXhEUVVGeVFpeEZRVUYzUWl4TFFVRkhMRU5CUVROQ0xFVkJRVGhDTEVkQlFUbENMRVZCUVcxRE8wRkJRMnBETEZWQlFVa3NUMEZCVHl4RFFVRlFMRVZCUVZVc1VVRkJaQ3hGUVVGM1FqdEJRVU4wUWl4bFFVRlBMRU5CUVZBc1JVRkJWU3hSUVVGV0xFTkJRVzFDTEZkQlFXNUNMRU5CUVN0Q0xGTkJRUzlDTEVWQlFYbERMRU5CUVVNc1VVRkJNVU1zUlVGQmIwUXNWMEZCY0VRc1EwRkJaMFVzVVVGQmFFVXNSVUZCZVVVc1VVRkJla1U3UVVGRFFTeHRRa0ZCVnl4SlFVRllPMEZCUTBRN1FVRkRSanRCUVVOR0xFZEJZa3c3TzBGQlpVRXNTVUZCUlN4TFFVRkdMRWRCUVZVc1ZVRkJVeXhGUVVGVUxFVkJRV0VzVDBGQllpeEZRVUZ6UWp0QlFVTTVRaXhSUVVGSkxFMUJRVW9zUlVGQldTeE5RVUZhTzBGQlEwRXNVMEZCU3l4TFFVRk1MRWRCUVdFc1JVRkJSU3hOUVVGR0xFTkJRV0k3UVVGRFFTeFRRVUZMTEU5QlFVd3NSMEZCWlN4RlFVRkZMRTFCUVVZc1EwRkJVeXhGUVVGVUxFVkJRV0VzUlVGQlJTeExRVUZHTEVOQlFWRXNVVUZCY2tJc1JVRkJLMElzVDBGQkwwSXNRMEZCWmp0QlFVTkJMRk5CUVVzc1QwRkJUQ3hEUVVGaExFMUJRV0lzUjBGQmMwSXNRMEZCUXl4TlFVRk5MRk5CUVZNc1MwRkJTeXhQUVVGTUxFTkJRV0VzV1VGQmRFSXNSVUZCYjBNc1JVRkJjRU1zUTBGQlRpeERRVUYyUWp0QlFVTkJMRk5CUVVzc1VVRkJUQ3hIUVVGblFpeEpRVUZvUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzWVVGQmFrSXNSVUZEUlN4UFFVRlBMRVZCUVVVc1MwRkJSaXhEUVVGUkxGRkJRVklzUlVGQlVEdEJRVU5GTEZGQlFVVXNTMEZCUml4RFFVRlJMRXRCUVZJN1FVRkVSaXhMUVZBMFFpeERRVkZVTzBGQlEzSkNMRmRCUVU4c1NVRkJVQ3hEUVVGWkxFbEJRVm83UVVGRFFTeFJRVUZKTEVkQlFVY3NSVUZCU0N4RFFVRk5MRWRCUVU0c1EwRkJTaXhGUVVGblFqdEJRVU5rTEdWQlFWTXNSMEZCUnl4SlFVRklMRU5CUVZFc1RVRkJVaXhEUVVGVU8wRkJRMEVzVjBGQlN5eE5RVUZNTEVkQlFXTXNSVUZCWkR0QlFVTkJPMEZCUTBFc1ZVRkJTU3hMUVVGTExFbEJRVXdzUTBGQlZTeE5RVUZXTEVOQlFVb3NSVUZCZFVJN1FVRkRja0lzWVVGQlN5eEpRVUZNTEVkQlFWa3NSVUZCUlN4TlFVRkdMRU5CUVZvN1FVRkRRU3haUVVGSkxFdEJRVXNzU1VGQlRDeERRVUZWTEUxQlFWWXNTMEZCY1VJc1EwRkJla0lzUlVGQk5FSXNUMEZCVHl4SlFVRlFPMEZCUXpWQ0xHRkJRVXNzUzBGQlRDeERRVUZYTEUxQlFWZ3NRMEZCYTBJc1MwRkJTeXhKUVVGMlFqdEJRVU5CTEdGQlFVc3NTVUZCVER0QlFVTkdPMEZCUTBNc1QwRk9SQ3hOUVUxUE8wRkJRMHdzWVVGQlN5eEpRVUZNTEVkQlFWa3NSVUZCUlN4UFFVRkdMRU5CUVZvN1FVRkRRU3hoUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUZZTEVOQlFXdENMRXRCUVVzc1NVRkJka0k3UVVGRFFTeHBRa0ZCVXl4blFrRkJVeXhMUVVGVUxFVkJRV2RDTEV0QlFXaENMRVZCUVhWQ08wRkJRVVVzWjBKQlFVMHNSMEZCVGl4RFFVRlZMRTFCUVZZN1FVRkJjVUlzVTBGQmRrUTdRVUZEUVN4aFFVRkxMRmRCUVV3N1FVRkRRU3hYUVVGSExFOUJRVWdzUTBGQlZ5eEZRVUZGTEV0QlFVWXNRMEZCVVN4VFFVRnVRanRCUVVOQkxGVkJRVVVzUjBGQlJpeERRVUZOTEUxQlFVNHNSVUZCWXl4SlFVRmtMRU5CUVcxQ0xGVkJRVk1zU1VGQlZDeEZRVUZsTzBGQlEyaERMR05CUVVrc1EwRkJReXhGUVVGRkxFdEJRVVlzUTBGQlVTeFJRVUZTTEVWQlFVd3NSVUZCZVVJN1FVRkRla0lzWVVGQlJ5eFBRVUZJTEVOQlFWY3NSVUZCUlN4TFFVRkdMRU5CUVZFc1dVRkJia0k3UVVGRFFTeGpRVUZKTEZWQlFWVXNXVUZCWkR0QlFVTkJMR3RDUVVGUkxFbEJRVklzUTBGQllTeExRVUZpTEVkQlFYRkNMRTFCUVhKQ0xFTkJRVFJDTEVsQlFUVkNMRVZCUVd0RExFVkJRV3hETEVOQlFYRkRMRVZCUVVVc1MwRkJSaXhEUVVGUkxFdEJRVGRETEVWQlFXOUVMRTFCUVhCRU8wRkJRMEVzYTBKQlFWRXNWMEZCVWp0QlFVTkJMR3RDUVVGUkxFbEJRVkk3UVVGRFFTeGhRVUZITEU5QlFVZ3NRMEZCVnl4RlFVRkZMRXRCUVVZc1EwRkJVU3hoUVVGdVFqdEJRVU5FTEZOQlVrUXNSVUZSUnl4SlFWSklMRU5CVVZFc1dVRkJWenRCUVVOcVFpeGhRVUZITEU5QlFVZ3NRMEZCVnl4RlFVRkZMRXRCUVVZc1EwRkJVU3hUUVVGdVFqdEJRVU5CTEdOQlFVa3NWVUZCVlN4WlFVRmtPMEZCUTBFc2EwSkJRVkVzVjBGQlVqdEJRVU5CTEdsQ1FVRlBMRWRCUVZBc1IwRkthVUlzUTBGSlNEdEJRVU5rTEdGQlFVY3NUMEZCU0N4RFFVRlhMRVZCUVVVc1MwRkJSaXhEUVVGUkxHRkJRVzVDTzBGQlEwUXNVMEZrUkR0QlFXVkVPMEZCUTBZc1MwRm9RMFFzVFVGblEwODdRVUZEVEN4WFFVRkxMRWxCUVV3c1IwRkJXU3hGUVVGYU8wRkJRMEVzVjBGQlN5eExRVUZNTEVOQlFWY3NUVUZCV0N4RFFVRnJRaXhMUVVGTExFbEJRWFpDTzBGQlEwRXNWMEZCU3l4SlFVRk1PMEZCUTBRN1FVRkRSaXhIUVM5RFJEczdRVUZwUkVFc1NVRkJSU3hMUVVGR0xFTkJRVkVzVTBGQlVpeEhRVUZ2UWp0QlFVTnNRaXhwUWtGQllTeEZRVUZGTEV0QlJFYzdPMEZCUjJ4Q0xGVkJRVTBzWjBKQlFWYzdRVUZEWml4VlFVRkpMRWxCUVVrc1NVRkJVanRCUVVOQkxGZEJRVXNzUzBGQlREdEJRVU5CTzBGQlEwRXNWVUZCUnl4TFFVRkxMRTlCUVV3c1EwRkJZU3hOUVVGb1FpeEZRVUYzUWp0QlFVTjBRaXh0UWtGQlZ5eFpRVUZYTzBGQlEzQkNMRmxCUVVVc1NVRkJSanRCUVVORUxGTkJSa1FzUlVGRlJ5eExRVUZMTEU5QlFVd3NRMEZCWVN4WlFVRmlMRWRCUVRSQ0xFdEJRVXNzVDBGQlRDeERRVUZoTEZOQlJqVkRPMEZCUjBRc1QwRktSQ3hOUVVsUE8wRkJRMHdzWVVGQlN5eEpRVUZNTzBGQlEwUTdRVUZEUkN4UlFVRkZMRkZCUVVZc1JVRkJXU3hIUVVGYUxFTkJRV2RDTEdWQlFXaENMRVZCUVdsRExFVkJRV3BETEVOQlFXOURMR1ZCUVhCRExFVkJRWEZFTEZWQlFWTXNTMEZCVkN4RlFVRm5RanRCUVVOdVJTeFpRVUZKTEZWQlFWVXNXVUZCWkR0QlFVTkJMRmxCUVVrc1RVRkJUU3hMUVVGT0xFdEJRV2RDTEVWQlFXaENMRWxCUVhOQ0xGRkJRVkVzVDBGQlVpeERRVUZuUWl4WFFVRXhReXhGUVVGMVJDeFJRVUZSTEV0QlFWSTdRVUZEZUVRc1QwRklSRHRCUVVsQkxGVkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNWVUZCYWtJc1JVRkRSU3hMUVVGTExGRkJRVXdzUTBGQll5eExRVUZrTEVOQlFXOUNMRlZCUVZNc1EwRkJWQ3hGUVVGWk8wRkJRemxDTEZsQlFVa3NSVUZCUlN4TlFVRkdMRXRCUVdFc1NVRkJha0lzUlVGRFJTeEZRVUZGTEV0QlFVWXNRMEZCVVN4TFFVRlNPMEZCUTBnc1QwRklSRHRCUVVsSUxFdEJka0pwUWpzN1FVRjVRbXhDTEZkQlFVOHNhVUpCUVZjN1FVRkRhRUlzWVVGQlR5eEhRVUZRTzBGQlEwRXNWMEZCU3l4UFFVRk1PMEZCUTBFc1YwRkJTeXhKUVVGTU8wRkJRMEVzVlVGQlNTeERRVUZETEVWQlFVVXNTMEZCUml4RFFVRlJMRkZCUVZJc1JVRkJUQ3hGUVVORkxFVkJRVVVzVVVGQlJpeEZRVUZaTEVkQlFWb3NRMEZCWjBJc1pVRkJhRUk3UVVGRFNDeExRUzlDYVVJN08wRkJhVU5zUWl4WFFVRlBMR2xDUVVGWE8wRkJRMmhDTEZkQlFVc3NTVUZCVEN4RFFVRlZMRTlCUVZZc1EwRkJhMElzUlVGQlJTeExRVUZHTEVOQlFWRXNXVUZCTVVJc1JVRkJkME1zUTBGQlF5eExRVUZMTEVsQlFVd3NSVUZCUkN4RFFVRjRRenRCUVVOQkxGZEJRVXNzUzBGQlRDeERRVUZYTEVkQlFWZ3NRMEZCWlN4VlFVRm1MRVZCUVRCQ0xGRkJRVEZDTzBGQlEwRXNWMEZCU3l4UlFVRk1MRWRCUVdkQ0xFVkJRVVVzYVVKQlFXbENMRXRCUVVzc1QwRkJUQ3hEUVVGaExGbEJRVGxDTEVkQlFUWkRMREJDUVVFdlF5eEZRVUV5UlN4UlFVRXpSU3hEUVVGdlJpeExRVUZMTEV0QlFYcEdMRU5CUVdoQ08wRkJRMEU3UVVGRFFTeFZRVUZITEV0QlFVc3NUMEZCVEN4RFFVRmhMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzUkNMR0ZCUVVzc1VVRkJUQ3hEUVVGakxFZEJRV1FzUTBGQmEwSXNVMEZCYkVJc1JVRkJORUlzUTBGQk5VSXNSVUZCSzBJc1QwRkJMMElzUTBGQmRVTXNSVUZCUXl4VFFVRlRMRU5CUVZZc1JVRkJka01zUlVGQmNVUXNTMEZCU3l4UFFVRk1MRU5CUVdFc1dVRkJiRVU3UVVGRFJEdEJRVU5FTEZkQlFVc3NTVUZCVEN4RFFVRlZMRTlCUVZZc1EwRkJhMElzUlVGQlJTeExRVUZHTEVOQlFWRXNTMEZCTVVJc1JVRkJhVU1zUTBGQlF5eExRVUZMTEVsQlFVd3NSVUZCUkN4RFFVRnFRenRCUVVORUxFdEJNVU5wUWpzN1FVRTBRMnhDTEdGQlFWTXNhVUpCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEZWQlFVa3NRMEZCUXl4SFFVRkVMRWxCUVZFc1MwRkJTeXhQUVVGTUxFTkJRV0VzVFVGQmVrSXNSVUZEUlN4TFFVRkxMRkZCUVV3c1EwRkJZeXhQUVVGa0xFTkJRWE5DTEV0QlFVc3NUMEZCVEN4RFFVRmhMRmxCUVc1RExFVkJRV2xFTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWxCUVdJc1EwRkJhMElzU1VGQmJFSXNSVUZCZFVJc1NVRkJka0lzUTBGQmFrUXNSVUZFUml4TFFVVkxPMEZCUTBnc1lVRkJTeXhSUVVGTUxFTkJRV01zVVVGQlpDeEhRVUY1UWl4UlFVRjZRaXhEUVVGclF5eExRVUZMTEV0QlFYWkRPMEZCUTBFc1lVRkJTeXhSUVVGTUxFTkJRV01zVFVGQlpEdEJRVU5CTEdGQlFVc3NVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTzBGQlEwRXNXVUZCU1N4RFFVRkRMRVZCUVVVc1MwRkJSaXhEUVVGUkxGRkJRVklzUlVGQlRDeEZRVU5GTEV0QlFVc3NTMEZCVEN4RFFVRlhMRWRCUVZnc1EwRkJaU3hWUVVGbUxFVkJRVEJDTEVWQlFURkNPMEZCUTBnN1FVRkRSaXhMUVhaRWFVSTdPMEZCZVVSc1FpeFZRVUZOTEdkQ1FVRlhPMEZCUTJZc1YwRkJTeXhKUVVGTUxFTkJRVlVzVDBGQlZpeERRVUZyUWl4RlFVRkZMRXRCUVVZc1EwRkJVU3hYUVVFeFFpeEZRVUYxUXl4RFFVRkRMRXRCUVVzc1NVRkJUQ3hGUVVGRUxFTkJRWFpETzBGQlEwRXNWVUZCU1N4TFFVRkxMRTlCUVV3c1EwRkJZU3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXhoUVVGTExGZEJRVXdzUjBGQmJVSXNSVUZCUlN4cFJVRkJhVVVzUzBGQlN5eFBRVUZNTEVOQlFXRXNWVUZCT1VVc1IwRkJNa1lzU1VGQk0wWXNSMEZCYTBjc1MwRkJTeXhQUVVGTUxFTkJRV0VzVTBGQkwwY3NSMEZCTWtnc1RVRkJOMGdzUTBGQmJrSTdRVUZEUVN4aFFVRkxMRWxCUVV3c1EwRkJWU3hOUVVGV0xFTkJRV2xDTEV0QlFVc3NWMEZCZEVJN1FVRkRSRHRCUVVORUxGZEJRVXNzU1VGQlRDeERRVUZWTEZGQlFWWXNRMEZCYlVJc1MwRkJTeXhQUVVGTUxFTkJRV0VzVlVGQmFFTXNSVUZCTkVNc1VVRkJOVU1zUTBGQmNVUXNTMEZCU3l4UlFVRXhSRHRCUVVOQkxGVkJRVWNzUzBGQlN5eFBRVUZNTEVOQlFXRXNUVUZCYUVJc1JVRkJkMEk3UVVGRGRFSXNZVUZCU3l4SlFVRk1MRU5CUVZVc1IwRkJWaXhEUVVGakxGTkJRV1FzUlVGQmQwSXNRMEZCZUVJc1JVRkJNa0lzU1VGQk0wSXNSMEZCYTBNc1QwRkJiRU1zUTBGQk1FTXNSVUZCUXl4VFFVRlRMRU5CUVZZc1JVRkJNVU1zUlVGQmQwUXNTMEZCU3l4UFFVRk1MRU5CUVdFc1dVRkJja1U3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4aFFVRkxMRWxCUVV3c1EwRkJWU3hKUVVGV08wRkJRMFE3UVVGRFJDeFhRVUZMTEVsQlFVd3NRMEZCVlN4UFFVRldMRU5CUVd0Q0xFVkJRVVVzUzBGQlJpeERRVUZSTEVsQlFURkNMRVZCUVdkRExFTkJRVU1zUzBGQlN5eEpRVUZNTEVWQlFVUXNRMEZCYUVNN1FVRkRSQ3hMUVhSRmFVSTdPMEZCZDBWc1FpeFZRVUZOTEdkQ1FVRlhPMEZCUTJZc1YwRkJTeXhKUVVGTUxFTkJRVlVzVDBGQlZpeERRVUZyUWl4RlFVRkZMRXRCUVVZc1EwRkJVU3haUVVFeFFpeEZRVUYzUXl4RFFVRkRMRXRCUVVzc1NVRkJUQ3hGUVVGRUxFTkJRWGhETzBGQlEwRXNWVUZCU1N4TFFVRkxMRmRCUVZRc1JVRkJjMElzUzBGQlN5eFhRVUZNTEVOQlFXbENMRTFCUVdwQ08wRkJRM1JDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJSeXhMUVVGTExFOUJRVXdzUTBGQllTeE5RVUZvUWl4RlFVRjNRanRCUVVOMFFpeGhRVUZMTEVsQlFVd3NRMEZCVlN4UFFVRldMRU5CUVd0Q0xFdEJRVXNzVDBGQlRDeERRVUZoTEZsQlFTOUNMRVZCUVRaRExGbEJRVms3UVVGRGRrUXNaMEpCUVUwc1NVRkJUaXhEUVVGWExFOUJRVmdzUTBGQmJVSXNSVUZCUlN4TFFVRkdMRU5CUVZFc1YwRkJNMElzUlVGQmQwTXNRMEZCUXl4TlFVRk5MRWxCUVU0c1JVRkJSQ3hEUVVGNFF6dEJRVU5FTEZOQlJrUTdRVUZIUkN4UFFVcEVMRTFCU1U4N1FVRkRUQ3hoUVVGTExFbEJRVXdzUTBGQlZTeEpRVUZXTEVOQlFXVXNRMEZCWml4RlFVRnJRaXhaUVVGWk8wRkJRelZDTEdkQ1FVRk5MRWxCUVU0c1EwRkJWeXhQUVVGWUxFTkJRVzFDTEVWQlFVVXNTMEZCUml4RFFVRlJMRmRCUVROQ0xFVkJRWGRETEVOQlFVTXNUVUZCVFN4SlFVRk9MRVZCUVVRc1EwRkJlRU03UVVGRFJDeFRRVVpFTzBGQlIwUTdRVUZEUkN4WFFVRkxMRWxCUVV3c1EwRkJWU3hQUVVGV0xFTkJRV3RDTEVWQlFVVXNTMEZCUml4RFFVRlJMRXRCUVRGQ0xFVkJRV2xETEVOQlFVTXNTMEZCU3l4SlFVRk1MRVZCUVVRc1EwRkJha003UVVGRFJDeExRWFJHYVVJN08wRkJkMFpzUWl4cFFrRkJZU3gxUWtGQlZ6dEJRVU4wUWl4VlFVRkpMRU5CUVVNc1MwRkJTeXhQUVVGTUxFTkJRV0VzVjBGQmJFSXNSVUZCSzBJN1FVRkRMMElzVjBGQlN5eFBRVUZNTEVkQlFXVXNTMEZCU3l4UFFVRk1MRWxCUVdkQ0xFVkJRVVVzYVVKQlFXbENMRXRCUVVzc1QwRkJUQ3hEUVVGaExGVkJRVGxDTEVkQlFUSkRMR3RDUVVFM1F5eEZRVU0xUWl4TlFVUTBRaXhEUVVOeVFpeExRVUZMTEU5QlFVd3NRMEZCWVN4WFFVUlJMRU5CUVM5Q08wRkJSVUVzVjBGQlN5eExRVUZNTEVOQlFWY3NUVUZCV0N4RFFVRnJRaXhMUVVGTExFOUJRWFpDTzBGQlEwRXNWMEZCU3l4UFFVRk1MRU5CUVdFc1NVRkJZanRCUVVORUxFdEJPVVpwUWpzN1FVRm5SMnhDTEdsQ1FVRmhMSFZDUVVGWE8wRkJRM1JDTEZWQlFVa3NTMEZCU3l4UFFVRlVMRVZCUVd0Q0xFdEJRVXNzVDBGQlRDeERRVUZoTEUxQlFXSTdRVUZEYmtJc1MwRnNSMmxDT3p0QlFXOUhiRUk3UVVGRFFTeFZRVUZOTEdkQ1FVRlhPMEZCUTJZc1lVRkJUeXhGUVVGRkxFdEJRVXNzUzBGQlN5eEpRVUZhTEVWQlFXdENMRTFCUVUwc1MwRkJTeXhKUVVFM1FpeEZRVUZ0UXl4VlFVRlZMRXRCUVVzc1VVRkJiRVFzUlVGQk5FUXNVMEZCVXl4TFFVRkxMRTlCUVRGRkxFVkJRVkE3UVVGRFJEdEJRWFpIYVVJc1IwRkJjRUk3TzBGQk1FZEJMRWxCUVVVc1MwRkJSaXhEUVVGUkxFdEJRVklzUjBGQlowSXNWVUZCVXl4TFFVRlVMRVZCUVdkQ08wRkJRemxDTEZGQlFVa3NRMEZCUXl4RlFVRkZMRXRCUVVZc1EwRkJVU3hSUVVGU0xFVkJRVXdzUlVGQmVVSTdRVUZEZWtJc1VVRkJTU3hMUVVGS0xFVkJRVmNzVFVGQlRTeGpRVUZPTzBGQlExZ3NVVUZCU1N4VlFVRlZMRmxCUVdRN1FVRkRRU3haUVVGUkxFdEJRVkk3UVVGRFFTeFhRVUZQTEZGQlFWRXNTVUZCWmp0QlFVTkVMRWRCVGtRN08wRkJVVUU3UVVGRFFTeEpRVUZGTEV0QlFVWXNRMEZCVVN4UlFVRlNMRWRCUVcxQ0xGbEJRVms3UVVGRE4wSXNWMEZCVHl4UFFVRlBMRTFCUVZBc1IwRkJaMElzUTBGQmRrSTdRVUZEUkN4SFFVWkVPenRCUVVsQkxFbEJRVVVzUzBGQlJpeERRVUZSTEZWQlFWSXNSMEZCY1VJc1ZVRkJja0k3TzBGQlJVRXNTVUZCUlN4TFFVRkdMRU5CUVZFc1VVRkJVaXhIUVVGdFFqdEJRVU5xUWl4dFFrRkJaU3hKUVVSRk8wRkJSV3BDTEdsQ1FVRmhMRWxCUmtrN1FVRkhha0lzWjBKQlFWa3NTVUZJU3p0QlFVbHFRaXhsUVVGWExFOUJTazA3UVVGTGFrSXNaMEpCUVZrc1JVRk1TenRCUVUxcVFpeG5Ra0ZCV1N4UFFVNUxPMEZCVDJwQ0xHdENRVUZqTEdOQlVFYzdRVUZSYWtJc2FVSkJRV0VzU1VGU1NUdEJRVk5xUWl4cFFrRkJZU3hKUVZSSk8wRkJWV3BDTEdWQlFWY3NTVUZXVFR0QlFWZHFRaXhyUWtGQll5eEpRVmhITEVWQlYwczdRVUZEZEVJc1pVRkJWeXhIUVZwTkxFTkJXVXM3UVVGYVRDeEhRVUZ1UWpzN1FVRmxRVHRCUVVOQkxFbEJRVVVzUzBGQlJpeERRVUZSTEZsQlFWSXNSMEZCZFVJc2IwSkJRWFpDTzBGQlEwRXNTVUZCUlN4TFFVRkdMRU5CUVZFc1MwRkJVaXhIUVVGblFpeGhRVUZvUWp0QlFVTkJMRWxCUVVVc1MwRkJSaXhEUVVGUkxGZEJRVklzUjBGQmMwSXNiVUpCUVhSQ08wRkJRMEVzU1VGQlJTeExRVUZHTEVOQlFWRXNTVUZCVWl4SFFVRmxMRmxCUVdZN1FVRkRRU3hKUVVGRkxFdEJRVVlzUTBGQlVTeFpRVUZTTEVkQlFYVkNMRzlDUVVGMlFqdEJRVU5CTEVsQlFVVXNTMEZCUml4RFFVRlJMRXRCUVZJc1IwRkJaMElzWVVGQmFFSTdRVUZEUVN4SlFVRkZMRXRCUVVZc1EwRkJVU3hYUVVGU0xFZEJRWE5DTEcxQ1FVRjBRanRCUVVOQkxFbEJRVVVzUzBGQlJpeERRVUZSTEZOQlFWSXNSMEZCYjBJc2FVSkJRWEJDTzBGQlEwRXNTVUZCUlN4TFFVRkdMRU5CUVZFc1dVRkJVaXhIUVVGMVFpeHZRa0ZCZGtJN1FVRkRRU3hKUVVGRkxFdEJRVVlzUTBGQlVTeFRRVUZTTEVkQlFXOUNMR2xDUVVGd1FqdEJRVU5CTEVsQlFVVXNTMEZCUml4RFFVRlJMR0ZCUVZJc1IwRkJkMElzY1VKQlFYaENPenRCUVVWQkxFbEJRVVVzUlVGQlJpeERRVUZMTEV0QlFVd3NSMEZCWVN4VlFVRlRMRTlCUVZRc1JVRkJhVUk3UVVGRE5VSXNVVUZCU1N4TFFVRkxMRTFCUVV3c1MwRkJaMElzUTBGQmNFSXNSVUZCZFVJN1FVRkRja0lzVlVGQlNTeEZRVUZGTEV0QlFVNHNRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFOUJRV3hDTzBGQlEwUTdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRSQ3hIUVV4RU96dEJRVTlCTzBGQlEwRXNTVUZCUlN4UlFVRkdMRVZCUVZrc1JVRkJXaXhEUVVGbExHRkJRV1lzUlVGQk9FSXNkVUpCUVRsQ0xFVkJRWFZFTEVWQlFVVXNTMEZCUml4RFFVRlJMRXRCUVM5RU8wRkJRMEVzU1VGQlJTeFJRVUZHTEVWQlFWa3NSVUZCV2l4RFFVRmxMR0ZCUVdZc1JVRkJPRUlzYzBKQlFUbENMRVZCUVhORUxGVkJRVk1zUzBGQlZDeEZRVUZuUWp0QlFVTndSU3hWUVVGTkxHTkJRVTQ3UVVGRFFTeE5RVUZGTEVsQlFVWXNSVUZCVVN4TFFVRlNPMEZCUTBRc1IwRklSRHRCUVVsRUxFTkJOMDlCTEVOQlFVUTdPenM3TzBGRFRFRTdPenM3T3p0QlFVVkJMSE5DUVVGRkxGRkJRVVlzUlVGQldTeExRVUZhTEVOQlFXdENMRmxCUVZjN1FVRkRla0lzVVVGQlNTeFZRVUZWTEhsRFFVRmtPenRCUVVWQkxGRkJRVWNzYzBKQlFVVXNkVUpCUVVZc1JVRkJNa0lzVFVGQk9VSXNSVUZCYzBNN1FVRkRkRU03TzBGQlJVTXNXVUZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3haUVVGSkxGVkJRVW83UVVGRFFTeFpRVUZKTEdOQlFXTTdRVUZEWkN4blFrRkJTU3hEUVVGRExFTkJSRk03UVVGRlpDeHpRa0ZCVlN4RlFVWkpPMEZCUjJRc2VVSkJRV0U3UVVGSVF5eFRRVUZzUWpzN1FVRk5RU3haUVVGSExFOUJRVThzUzBGQlN5eEpRVUZNTEVOQlFWVXNWVUZCYWtJc1NVRkJLMElzVjBGQmJFTXNSVUZCSzBNN1FVRkRNME1zZVVKQlFXRXNRMEZCWWp0QlFVTklMRk5CUmtRc1RVRkZUenRCUVVOSUxIbENRVUZoTEV0QlFVc3NTVUZCVEN4RFFVRlZMRlZCUVhaQ08wRkJRMEVzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRlZCUVZvN1FVRkRRU3cyUWtGQlJTeFBRVUZHTEVOQlFWY3NWVUZCVlN4WlFVRldMRWRCUVhsQ0xGVkJRWEJETEVWQlFXZEVMRlZCUVZVc1VVRkJWaXhGUVVGeFFqdEJRVU5xUlN4dlFrRkJSeXhEUVVGRExGTkJRVk1zUzBGQllpeEZRVUZ2UWp0QlFVTm9RaXd3UTBGQlJTeHhRa0ZCUml4RlFVRjVRaXhYUVVGNlFpeERRVUZ4UXl4clFrRkJja01zUlVGQmVVUXNVVUZCZWtRc1EwRkJhMFVzWlVGQmJFVTdRVUZEUVN3MlFrRkJVeXhUUVVGVExFbEJRV3hDTzBGQlEwZ3NhVUpCU0VRc1RVRkhUeXhEUVVWT096dEJRVVZFTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3hSUVVGYU8wRkJRMGdzWVVGVVJEdEJRVlZJT3p0QlFVVkVMRGhDUVVGRkxIVkNRVUZHTEVWQlFUSkNMRXRCUVROQ0xFTkJRV2xETEZsQlFWVTdPMEZCUlRkRExHZENRVUZITEhOQ1FVRkZMRWxCUVVZc1JVRkJVU3hSUVVGU0xFTkJRV2xDTEdWQlFXcENMRU5CUVVnc1JVRkJjME03TzBGQlJYSkRPMEZCUTBFc2IwSkJRVWtzVDBGQlR5eHpRa0ZCUlN4elFrRkJSaXhGUVVFd1FpeE5RVUZ5UXp0QlFVTkJMSEZDUVVGSkxFbEJRVWtzU1VGQlJTeFBRVUZMTEVOQlFXWXNSVUZCYTBJc1NVRkJSU3hEUVVGd1FpeEZRVUYxUWl4SFFVRjJRaXhGUVVFMFFqdEJRVU40UWl4M1FrRkJSeXhQUVVGUExITkNRVUZGTEhOQ1FVRkdMRVZCUVRCQ0xFTkJRVEZDTEVOQlFWQXNTVUZCZFVNc1YwRkJNVU1zUlVGQmRVUTdRVUZEYmtRc09FTkJRVVVzYzBKQlFVWXNSVUZCTUVJc1EwRkJNVUlzUlVGQk5rSXNUVUZCTjBJN1FVRkRTRHRCUVVOS096dEJRVVZFTEc5Q1FVRkpMRlZCUVZVc1JVRkJaRHRCUVVOQkxHOUNRVUZKTEZWQlFWVXNSVUZCWkR0QlFVTkJMSFZDUVVGUExFOUJRVkFzUTBGQlpTeFZRVUZUTEVsQlFWUXNSVUZCWlR0QlFVTXhRaXc0UWtGQlZTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRmRCUVdoQ0xFVkJRVFpDTEZGQlFUZENMRVZCUVZZN1FVRkRRU3c0UWtGQlZTeG5RMEZCWjBNc1MwRkJTeXhGUVVGeVF5eEhRVUV3UXl4clFrRkJNVU1zUjBGQkswUXNUMEZCTDBRc1IwRkJlVVVzWlVGQmVrVXNSMEZCTWtZc1MwRkJTeXhSUVVGb1J5eEhRVUV5Unl4SlFVRXpSeXhIUVVOR0xHVkJSRVVzUjBGRFowSXNUMEZCVHl4WlFVUjJRaXhIUVVOelF5eE5RVVIwUXl4SFFVVkdMSEZDUVVaRkxFZEJSWE5DTEV0QlFVc3NVVUZHTTBJc1IwRkZjME1zVVVGR2FFUTdPMEZCU1VFc01FTkJRVVVzWjBKQlFVWXNSVUZCYjBJc1MwRkJjRUlzUTBGQk1FSXNWVUZCTVVJc1JVRkJjVU1zVDBGQmNrTTdRVUZEU0N4cFFrRlFSRHM3UVVGVFFTeHpRMEZCUlN4eFFrRkJSaXhGUVVGNVFpeEpRVUY2UWp0QlFVTkJMSE5EUVVGRkxHRkJRVVlzUlVGQmFVSXNUMEZCYWtJc1EwRkJlVUlzUlVGQlF5eFJRVUZSTEV0QlFWUXNSVUZCZWtJc1JVRkJNRU1zUjBGQk1VTTdRVUZEUVR0QlFVTkZMRk5CTVVKRU96dEJRVFJDUVN3NFFrRkJSU3huUWtGQlJpeEZRVUZ2UWl4TFFVRndRaXhEUVVFd1FqdEJRVU51UWl4elFrRkJWU3hMUVVSVE8wRkJSVzVDTERCQ1FVRmpMRU5CUmtzN1FVRkhia0lzTkVKQlFXZENMRU5CU0VjN1FVRkpia0lzZDBKQlFWa3NRMEZEVWp0QlFVTkpMRFJDUVVGWkxFbEJSR2hDTzBGQlJVa3NNRUpCUVZVN1FVRkRUaXhyUTBGQll5eERRVVJTTzBGQlJVNHNiME5CUVdkQ08wRkJSbFk3UVVGR1pDeGhRVVJSTEVWQlVWSTdRVUZEU1N3MFFrRkJXU3hKUVVSb1FqdEJRVVZKTERCQ1FVRlZPMEZCUTA0c2EwTkJRV01zUTBGRVVqdEJRVVZPTEc5RFFVRm5RanRCUVVaV08wRkJSbVFzWVVGU1VTeEZRV1ZTTzBGQlEwRXNORUpCUVZrc1IwRkVXanRCUVVWSkxEQkNRVUZWTzBGQlEwNHNhME5CUVdNc1EwRkVVanRCUVVWT0xHOURRVUZuUWp0QlFVWldPMEZCUm1Rc1lVRm1VU3hGUVhOQ1VqdEJRVU5CTERSQ1FVRlpMRWRCUkZvN1FVRkZTU3d3UWtGQlZUdEJRVU5PTEd0RFFVRmpMRU5CUkZJN1FVRkZUaXh2UTBGQlowSTdRVUZHVmp0QlFVdGtPMEZCUTBFN1FVRkRRVHRCUVZSQkxHRkJkRUpSTzBGQlNrOHNVMEZCTVVJN08wRkJkVU5ITERoQ1FVRkZMRzFDUVVGR0xFVkJRWFZDTEV0QlFYWkNMRU5CUVRaQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlEzQkRMR3REUVVGRkxIRkNRVUZHTEVWQlFYbENMRWxCUVhwQ08wRkJRMEVzYTBOQlFVVXNZVUZCUml4RlFVRnBRaXhQUVVGcVFpeERRVUY1UWl4RlFVRkRMRkZCUVZFc1UwRkJWQ3hGUVVGNlFpeEZRVUU0UXl4SFFVRTVRenRCUVVOSUxGTkJTRVE3TzBGQlRVRXNPRUpCUVVVc1owSkJRVVlzUlVGQmIwSXNSVUZCY0VJc1EwRkJkVUlzVDBGQmRrSXNSVUZCWjBNc1QwRkJhRU1zUlVGQmVVTXNWVUZCVXl4RFFVRlVMRVZCUVZjN1FVRkRhRVFzWjBKQlFVa3NVMEZCVXl4elFrRkJSU3hKUVVGR0xFVkJRVkVzU1VGQlVpeERRVUZoTEVsQlFXSXNRMEZCWWp0QlFVTkJMR2RDUVVGSkxGZEJRVmNzYzBKQlFVVXNTVUZCUml4RlFVRlJMRWxCUVZJc1EwRkJZU3hOUVVGaUxFTkJRV1k3UVVGRFFTeG5Ra0ZCU1N4alFVRmpMSE5DUVVGRkxFbEJRVVlzUlVGQlVTeEpRVUZTTEVOQlFXRXNVMEZCWWl4SlFVRjVRaXh6UWtGQlJTeEpRVUZHTEVWQlFWRXNTVUZCVWl4RFFVRmhMRk5CUVdJc1JVRkJkMElzUzBGQmVFSXNRMEZCT0VJc1IwRkJPVUlzUTBGQmVrSXNSMEZCTmtRc1JVRkJMMFU3TzBGQlJVRXNaMEpCUVVrc1owSkJRV2RDTEVWQlFYQkNPenRCUVVWQkxHZENRVUZITEZWQlFWVXNRMEZCUXl4RFFVRmtMRVZCUVdsQ08wRkJRMmhDTEhWQ1FVRlBMRkZCUVZBc1EwRkJaMElzU1VGQmFFSXNSMEZCZFVJc1QwRkJka0k3UVVGRFFTeGhRVVpFTEUxQlJVODdRVUZEVGl3MFFrRkJXU3hQUVVGYUxFTkJRVzlDTEZWQlFWTXNTVUZCVkN4RlFVRmpPMEZCUTJwRExIbENRVUZKTEVsQlFVa3NTVUZCUlN4RFFVRldMRVZCUVZrc1NVRkJSU3hQUVVGUExHRkJRVkFzUTBGQmNVSXNUVUZCY2tJc1IwRkJORUlzUTBGQk1VTXNSVUZCTkVNc1IwRkJOVU1zUlVGQmFVUTdRVUZEYUVRc05FSkJRVWNzVVVGQlVTeFBRVUZQTEdGQlFWQXNRMEZCY1VJc1EwRkJja0lzUlVGQmQwSXNTVUZCYmtNc1JVRkJlVU03UVVGRGVFTXNOa05CUVdsQ0xFOUJRVThzWVVGQlVDeERRVUZ4UWl4RFFVRnlRaXhGUVVGM1FpeEpRVUY0UWl4SFFVRXJRaXhKUVVGb1JEdEJRVU5CTzBGQlEwUTdRVUZEUkN4cFFrRk9SRHRCUVU5Qk96dEJRVVZFTEd0RFFVRkZMRzFDUVVGR0xFVkJRWFZDTEU5QlFYWkNMRU5CUVN0Q0xFOUJRUzlDT3p0QlFVVkJMR2RDUVVGSExHRkJRVWdzUlVGQmEwSTdRVUZEYWtJc2QwSkJRVkVzUjBGQlVpeERRVUZaTEdGQlFWbzdRVUZEUVN4blEwRkJaMElzWTBGQll5eFRRVUZrTEVOQlFYZENMRU5CUVhoQ0xFVkJRVEpDTEdOQlFXTXNUVUZCWkN4SFFVRjFRaXhEUVVGc1JDeERRVUZvUWpzN1FVRkZRU3h6UTBGQlJTeHZRa0ZCUml4RlFVRjNRaXhIUVVGNFFpeERRVUUwUWl4UlFVRTFRanRCUVVOQkxITkRRVUZGTEhsQ1FVRkdMRVZCUVRaQ0xFZEJRVGRDTEVOQlFXbERMR0ZCUVdwRE96dEJRVVZCTEhORFFVRkZMSGRDUVVGR0xFVkJRVFJDTEVsQlFUVkNMRU5CUVdsRExHRkJRV3BET3p0QlFVVkhMRzlDUVVGSExITkNRVUZGTEhGRFFVRkdMRVZCUVhsRExFZEJRWHBETEVOQlFUWkRMRk5CUVRkRExFdEJRVEpFTEUxQlFUbEVMRVZCUVhORk8wRkJRMnhGTERCRFFVRkZMSE5DUVVGR0xFVkJRVEJDTEVsQlFURkNPMEZCUTBFN1FVRkRRU3d3UTBGQlJTd3lRMEZCUml4RlFVRXJReXhQUVVFdlF5eERRVUYxUkN4UFFVRjJSRHRCUVVOSU96dEJRVVZpTzBGQlEwRXNjME5CUVVVc1kwRkJSaXhGUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhyUWtGQk9VSXNSVUZCYTBRc1VVRkJiRVFzUTBGQk1rUXNaVUZCTTBRN1FVRkRVenRCUVVOS0xGTkJka05FTzBGQmQwTk9PMEZCUTBRc1EwRnFTa1E3T3pzN096czdRVU5HUVN4RFFVRkRMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU03UVVGQllTeG5Ra0ZCV1N4UFFVRlBMRTFCUVc1Q0xFbEJRVEpDTEU5QlFVOHNSMEZCYkVNc1IwRkJjME1zVDBGQlR5eERRVUZETEZGQlFVUXNRMEZCVUN4RlFVRnJRaXhEUVVGc1FpeERRVUYwUXl4SFFVRXlSQ3hsUVVGaExFOUJRVThzVDBGQmNFSXNSMEZCTkVJc1QwRkJUeXhQUVVGUUxFZEJRV1VzUlVGQlJTeFJRVUZSTEZGQlFWSXNRMEZCUml4RFFVRXpReXhIUVVGblJTeEZRVUZGTEUxQlFVWXNRMEZCTTBnN1FVRkJjVWtzUTBGQk9Vb3NRMEZCSzBvc1ZVRkJVeXhEUVVGVUxFVkJRVmM3UVVGQlF6dEJRVUZoTEUxQlFVa3NTVUZCUlN4UFFVRlBMRXRCUVZBc1NVRkJZeXhGUVVGd1FpeERRVUYxUWl4RFFVRkRMRWxCUVVVc1dVRkJWVHRCUVVGRExGRkJRVWtzU1VGQlJTeERRVUZPTEVOQlFWRXNUMEZCVHl4VlFVRlRMRU5CUVZRc1JVRkJWeXhEUVVGWUxFVkJRV0U3UVVGQlF5eFZRVUZKTEVOQlFVbzdRVUZCUVN4VlFVRk5MRWxCUVVVc1NVRkJVaXhEUVVGaExFVkJRVVVzVVVGQlJpeEhRVUZYTEVWQlFVTXNaVUZCWXl4RFFVRkRMRU5CUVdoQ0xFVkJRV3RDTEdkQ1FVRmxMRU5CUVVNc1EwRkJiRU1zUlVGQmIwTXNZMEZCWVN4RlFVRkZMRU5CUVVZc1EwRkJha1FzUlVGQmMwUXNXVUZCVnl4RlFVRkZMRU5CUVVZc1EwRkJha1VzUlVGQmMwVXNVVUZCVHl4RFFVRkRMRU5CUVRsRkxFVkJRV2RHTEZWQlFWTXNTVUZCZWtZc1JVRkJPRVlzVjBGQlZTeHJSa0ZCZUVjc1JVRkJNa3dzVjBGQlZTd3dSVUZCY2swc1JVRkJaMUlzVlVGQlV5eERRVUZETEVOQlFURlNMRVZCUVRSU0xHVkJRV01zUjBGQk1WTXNSVUZCT0ZNc1dVRkJWeXhEUVVGRExFTkJRVEZVTEVWQlFUUlVMR1ZCUVdNc1RVRkJNVlVzUlVGQmFWWXNVMEZCVVN4TlFVRjZWaXhGUVVGblZ5eGpRVUZoTEhOQ1FVRlRMRU5CUVZRc1JVRkJWeXhEUVVGWUxFVkJRV0U3UVVGQlF5eHBRa0ZCVHl4RlFVRkZMREJDUVVGR0xFVkJRVGhDTEVsQlFUbENMRU5CUVcxRExFbEJRVVVzUTBGQmNrTXNRMEZCVUR0QlFVRXJReXhUUVVFeFlTeEZRVUV5WVN4TlFVRkxMRU5CUVVNc1EwRkJhbUlzUlVGQmJXSXNWMEZCVlN4WlFVRTNZaXhGUVVFd1l5eFhRVUZWTEVOQlFVTXNRMEZCY21Rc1JVRkJkV1FzVVVGQlR5eFJRVUU1WkN4RlFVRjFaU3hqUVVGaExFZEJRWEJtTEVWQlFYZG1MRTFCUVVzc1EwRkJReXhEUVVFNVppeEZRVUZuWjBJc1pVRkJZeXhEUVVGRExFTkJRUzluUWl4RlFVRnBhRUlzWlVGQll5eERRVUZETEVOQlFXaHBRaXhGUVVGcmFVSXNWVUZCVXl4RFFVRkRMRU5CUVRWcFFpeEZRVUU0YVVJc1kwRkJZU3hEUVVFemFrSXNSVUZCTm1wQ0xGVkJRVk1zVlVGQmRHdENMRVZCUVdsc1FpeGhRVUZaTEVOQlFVTXNRMEZCT1d4Q0xFVkJRV2R0UWl4alFVRmhMRU5CUVVNc1EwRkJPVzFDTEVWQlFXZHVRaXhqUVVGaExFTkJRVU1zUTBGQk9XNUNMRVZCUVdkdlFpeHJRa0ZCYVVJc1EwRkJReXhEUVVGc2NFSXNSVUZCYjNCQ0xGZEJRVlVzVVVGQk9YQkNMRVZCUVhWeFFpeFpRVUZYTEVsQlFXeHlRaXhGUVVGMWNrSXNUVUZCU3l4RFFVRTFja0lzUlVGQk9ISkNMRXRCUVVrc1EwRkJReXhEUVVGdWMwSXNSVUZCY1hOQ0xFOUJRVTBzUlVGQk0zTkNMRVZCUVRoelFpeGpRVUZoTEVOQlFUTjBRaXhGUVVFMmRFSXNZMEZCWVN4RFFVRXhkVUlzUlVGQk5IVkNMR2RDUVVGbExFTkJRVE4yUWl4RlFVRTJka0lzVDBGQlRTeEhRVUZ1ZDBJc1JVRkJkWGRDTEU5QlFVMHNRMEZCUXl4RFFVRTVkMElzUlVGQlozaENMR05CUVdFc1EwRkJReXhEUVVFNWVFSXNSVUZCWjNsQ0xGZEJRVlVzUTBGQlF5eERRVUV6ZVVJc1JVRkJObmxDTEdkQ1FVRmxMRU5CUVRWNlFpeEZRVUU0ZWtJc1VVRkJUeXhEUVVGRExFTkJRWFF3UWl4RlFVRjNNRUlzWTBGQllTeERRVUZETEVOQlFYUXhRaXhGUVVGM01VSXNaVUZCWXl4RFFVRkRMRU5CUVhZeVFpeEZRVUY1TWtJc1ZVRkJVeXhEUVVGRExFTkJRVzR6UWl4RlFVRnhNMElzYVVKQlFXZENMRU5CUVVNc1EwRkJkRFJDTEVWQlFYYzBRaXhuUWtGQlpTeERRVUZETEVOQlFYZzFRaXhGUVVFd05VSXNVVUZCVHl4SFFVRnFOa0lzUlVGQldDeEZRVUZwTjBJc1JVRkJSU3hSUVVGR0xFZEJRVmNzUlVGQlF5eFhRVUZWTEVOQlFVTXNRMEZCV2l4RlFVRmpMRlZCUVZNc1EwRkJReXhEUVVGNFFpeEZRVUV3UWl4bFFVRmpMRWxCUVhoRExFVkJRVFpETEd0Q1FVRnBRaXhEUVVFNVJDeEZRVUZuUlN4aFFVRlpMRWxCUVRWRkxFVkJRV2xHTEdOQlFXRXNRMEZCT1VZc1JVRkJaMGNzVjBGQlZTeERRVUV4Unl4RlFVRTBSeXhQUVVGTkxFbEJRV3hJTEVWQlFYVklMRmRCUVZVc1NVRkJha2tzUlVGQmMwa3NXVUZCVnl4SlFVRnFTaXhGUVVGelNpeFhRVUZWTEVOQlFXaExMRVZCUVd0TExGbEJRVmNzU1VGQk4wc3NSVUZCYTB3c1dVRkJWeXhKUVVFM1RDeEZRVUZyVFN4WFFVRlZMRU5CUVVNc1EwRkJOMDBzUlVGQkswMHNXVUZCVnl4SlFVRXhUaXhGUVVFclRpeFpRVUZYTEVsQlFURlBMRVZCUVN0UExHRkJRVmtzU1VGQk0xQXNSVUZCWjFFc1UwRkJVU3hKUVVGNFVTeEZRVUUyVVN4VFFVRlJMRU5CUVVNc1EwRkJkRklzUlVGQmQxSXNZVUZCV1N4RFFVRndVeXhGUVVGelV5eFhRVUZWTEVsQlFXaFVMRVZCUVhGVUxGTkJRVkVzUTBGQlF5eERRVUU1VkN4RlFVRm5WU3hQUVVGTkxFbEJRWFJWTEVWQlFUSlZMR0ZCUVZrc1JVRkJkbFlzUlVGQk1GWXNiVUpCUVd0Q0xFTkJRVU1zUTBGQk4xY3NSVUZCSzFjc1YwRkJWU3hEUVVGRExFTkJRVEZZTEVWQlFUVTNRaXhGUVVGNWVrTXNSVUZCUlN4TlFVRkdMRU5CUVZNc1EwRkJWQ3hGUVVGWExFVkJRVVVzVVVGQllpeERRVUY2ZWtNc1JVRkJaekZETEVWQlFVVXNaMEpCUVVZc1IwRkJiVUlzU1VGQmJqSkRMRVZCUVhjeVF5eEZRVUZGTEZGQlFVWXNSMEZCVnl4SlFVRnVNME1zUlVGQmR6TkRMRVZCUVVVc1VVRkJSaXhIUVVGWExFbEJRVzQwUXl4RlFVRjNORU1zUlVGQlJTeFhRVUZHTEVkQlFXTXNSVUZCZERWRExFVkJRWGsxUXl4RlFVRkZMR3RDUVVGR0xFZEJRWEZDTEVWQlFUazJReXhGUVVGcE4wTXNSVUZCUlN4alFVRkdMRWRCUVdsQ0xFTkJRVU1zUTBGQmJqaERMRVZCUVhFNFF5eEZRVUZGTEZGQlFVWXNSMEZCVnl4RFFVRkRMRU5CUVdvNVF5eEZRVUZ0T1VNc1JVRkJSU3hYUVVGR0xFZEJRV01zUTBGQlF5eERRVUZzSzBNc1JVRkJieXRETEVWQlFVVXNUVUZCUml4SFFVRlRMRkZCUVRjclF5eEZRVUZ6TDBNc1JVRkJSU3hOUVVGR0xFZEJRVk1zUTBGQlF5eERRVUZvWjBRc1JVRkJhMmRFTEVWQlFVVXNXVUZCUml4SFFVRmxMRWxCUVdwb1JDeEZRVUZ6YUVRc1JVRkJSU3hUUVVGR0xFZEJRVmtzU1VGQmJHbEVMRVZCUVhWcFJDeEZRVUZGTEZGQlFVWXNSMEZCVnl4RFFVRnNha1FzUlVGQmIycEVMRVZCUVVVc1YwRkJSaXhIUVVGakxFTkJRVU1zUTBGQmJtdEVMRVZCUVhGclJDeEZRVUZGTEU5QlFVWXNSMEZCVlN4RlFVRkZMRU5CUVVZc1EwRkJMMnRFTEVWQlFXOXNSQ3hGUVVGRkxGbEJRVVlzUjBGQlpTeEpRVUZ1YlVRc1JVRkJkMjFFTEVWQlFVVXNZVUZCUml4SFFVRm5RaXhKUVVGNGJrUXNSVUZCTm01RUxFVkJRVVVzWTBGQlJpeEhRVUZwUWl4SlFVRTViMFFzUlVGQmJYQkVMRVZCUVVVc1owSkJRVVlzUjBGQmJVSXNhMEpCUVhSeFJDeEZRVUY1Y2tRc1JVRkJSU3hYUVVGR0xFZEJRV01zUTBGQmRuTkVMRVZCUVhselJDeEZRVUZGTEZkQlFVWXNSMEZCWXl4SlFVRjJkRVFzUlVGQk5IUkVMRWxCUVVVc1JVRkJSU3hEUVVGR0xFVkJRVXNzU1VGQlRDeERRVUZWTEU5QlFWWXNTMEZCYjBJc1JVRkJiSFpFTEVWQlFYRjJSQ3hGUVVGRkxFOUJRVVlzUjBGQlZTeEZRVUZGTEUxQlFVWXNRMEZCVXl4RlFVRlVMRVZCUVZrc1JVRkJSU3hSUVVGa0xFVkJRWFZDTEVOQlFYWkNMRVZCUVhsQ0xFTkJRWHBDTEVOQlFTOTJSQ3hGUVVFeWVFUXNSVUZCUlN4WlFVRkdMRWRCUVdVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmNIcEVMRVZCUVdrd1JDeEZRVUZGTEdkQ1FVRkdMRWRCUVcxQ0xFVkJRVVVzVDBGQmRERkVMRVZCUVRneFJDeExRVUZMTEVOQlFVd3NTMEZCVXl4VFFVRlRMRk5CUVd4Q0xFbEJRVFpDTEVWQlFVVXNUVUZCUml4SFFVRlRMRmRCUVZRc1JVRkJjVUlzUlVGQlJTeG5Ra0ZCUml4SFFVRnRRaXh4UWtGQmNrVXNTVUZCTkVZc1MwRkJTeXhEUVVGTUxFdEJRVk1zVTBGQlV5eFpRVUZzUWl4TFFVRnBReXhGUVVGRkxFMUJRVVlzUjBGQlV5eGpRVUZVTEVWQlFYZENMRVZCUVVVc1owSkJRVVlzUjBGQmJVSXNkMEpCUVRWRkxFTkJRVEUzUkN4RlFVRm5hVVVzUlVGQlJTeFJRVUZHTEVkQlFWY3NSVUZCUlN4TFFVRkdMRU5CUVZFc1JVRkJSU3hSUVVGV0xFVkJRVzFDTEVOQlFXNUNMRU5CUVROcFJTeEZRVUZwYTBVc1JVRkJSU3hoUVVGR0xFZEJRV2RDTEVWQlFVVXNTMEZCUml4RFFVRlJMRVZCUVVVc1lVRkJWaXhGUVVGM1FpeERRVUY0UWl4RFFVRnFiRVVzUlVGQk5HMUZMRVZCUVVVc1owSkJRVVlzUjBGQmJVSXNSVUZCUlN4TFFVRkdMRU5CUVZFc1JVRkJSU3huUWtGQlZpeEZRVUV5UWl4RFFVRXpRaXhEUVVFdmJrVXNSVUZCTm5CRkxFVkJRVVVzVjBGQlJpeEhRVUZqTEVWQlFVVXNTMEZCUml4RFFVRlJMRVZCUVVVc1YwRkJWaXhGUVVGelFpeERRVUYwUWl4RFFVRXpjVVVzUlVGQmIzTkZMRVZCUVVVc1dVRkJSaXhIUVVGbExFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFVVXNXVUZCVml4RlFVRjFRaXhEUVVGMlFpeERRVUZ1ZEVVc1JVRkJOblZGTEVWQlFVVXNZVUZCUml4SFFVRm5RaXhGUVVGRkxFdEJRVVlzUTBGQlVTeEZRVUZGTEdGQlFWWXNSVUZCZDBJc1EwRkJlRUlzUTBGQk4zWkZMRVZCUVhkNFJTeEZRVUZGTEZkQlFVWXNSMEZCWXl4RlFVRkZMRXRCUVVZc1EwRkJVU3hGUVVGRkxGZEJRVllzUlVGQmMwSXNRMEZCZEVJc1EwRkJkSGxGTEVWQlFTdDZSU3hGUVVGRkxGbEJRVVlzUjBGQlpTeEZRVUZGTEV0QlFVWXNRMEZCVVN4RlFVRkZMRmxCUVZZc1JVRkJkVUlzUTBGQmRrSXNRMEZCT1RCRkxFVkJRWGN5UlN4RlFVRkZMRmRCUVVZc1IwRkJZeXhGUVVGRkxFdEJRVVlzUTBGQlVTeEZRVUZGTEZkQlFWWXNSVUZCYzBJc1EwRkJkRUlzUTBGQmRETkZMRVZCUVNzMFJTeEZRVUZGTEZWQlFVWXNSMEZCWVN4RlFVRkZMRXRCUVVZc1EwRkJVU3hGUVVGRkxGVkJRVllzUlVGQmNVSXNRMEZCY2tJc1EwRkJOVFZGTEVWQlFXODNSU3hGUVVGRkxGZEJRVVlzUjBGQll5eEhRVUZzT0VVc1JVRkJjemhGTEVWQlFVVXNVVUZCUml4SFFVRlhMREpDUVVGcU9VVXNSVUZCTml0RkxFVkJRVVVzYlVKQlFVWXNSVUZCTnl0RkxFVkJRWEZuUml4RlFVRkZMRWxCUVVZc1EwRkJUeXhEUVVGRExFTkJRVklzUTBGQmNtZEdPMEZCUVdkb1JpeExRVUZzYWtZN1FVRkJiV3BHTEVkQlFYUnJSaXhGUVVGSUxFVkJRVFpyUml4VFFVRTNhMFlzUTBGQmRXeEdMRmRCUVhac1JpeEhRVUZ0YlVZc1dVRkJWVHRCUVVGRExGTkJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhEUVVGelFpeGxRVUYwUWl4RlFVRjFReXhKUVVGMlF5eERRVUUwUXl4RlFVRkRMR1ZCUVdNc1QwRkJaaXhGUVVFMVF5eEZRVUZ4UlN4SlFVRnlSU3hEUVVFd1JTd3dRa0ZCTVVVc1JVRkJjMGNzU1VGQmRFY3NRMEZCTWtjc1JVRkJReXhWUVVGVExFZEJRVllzUlVGQk0wYzdRVUZCTWtnc1IwRkJlblZHTEVWQlFUQjFSaXhGUVVGRkxGTkJRVVlzUTBGQldTeFJRVUZhTEVkQlFYRkNMRVZCUVVVc1UwRkJSaXhEUVVGWkxGRkJRVm9zUjBGQmNVSXNWVUZCVXl4RFFVRlVMRVZCUVZjc1EwRkJXQ3hGUVVGaExFTkJRV0lzUlVGQlpUdEJRVUZETEZGQlFVa3NTVUZCUlN4SlFVRk9MRU5CUVZjc1NVRkJSeXhoUVVGWExFOUJRVThzUTBGQmNrSXNSVUZCZFVJc1NVRkJSU3hEUVVGR0xFVkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFYWkNMRXRCUVhWRExFbEJRVWNzU1VGQlJTeERRVUZHTEVsQlFVc3NTMEZCUnl4RlFVRkZMRlZCUVdJc1JVRkJkMElzVDBGQlRTeERRVUZETEVOQlFWQXNRMEZCVXl4RlFVRkZMRTFCUVVZc1NVRkJWeXhaUVVGVkxFOUJRVThzUTBGQmFrSXNSMEZCYlVJc1RVRkJTU3hEUVVGS0xFbEJRVThzVFVGQlNTeEZRVUZGTEU5QlFVWXNRMEZCVlN4TlFVRnlRaXhIUVVFMFFpeEZRVUZGTEVOQlFVWXNSVUZCU3l4UlFVRk1MRU5CUVdNc1JVRkJSU3hYUVVGb1FpeERRVUUxUWl4SFFVRjVSQ3hKUVVGRkxFVkJRVVVzUTBGQlJpeEZRVUZMTEZsQlFVd3NRMEZCYTBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzUlVGQlZpeERRVUZoTEVOQlFXSXNRMEZCYkVJc1EwRkJSaXhIUVVGeFF5eEZRVUZGTEVOQlFVWXNSVUZCU3l4WFFVRk1MRU5CUVdsQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RFFVRmlMRU5CUVdwQ0xFTkJRV3BJTEVkQlFXMUtMRU5CUVVNc1EwRkJSQ3hMUVVGTExFTkJRVXdzUjBGQlR5eEZRVUZGTEVOQlFVWXNSVUZCU3l4VFFVRk1MRU5CUVdVc1JVRkJSU3hYUVVGcVFpeERRVUZRTEVkQlFYRkRMRVZCUVVVc1EwRkJSaXhGUVVGTExGRkJRVXdzUTBGQll5eEZRVUZGTEZkQlFXaENMRU5CUVc1TkxFVkJRV2RQTEVWQlFVVXNUMEZCUml4SFFVRlZMRVZCUVVVc1YwRkJSaXhEUVVGakxGRkJRV1FzUTBGQmRVSXNTMEZCU3l4UFFVRk1MRU5CUVdFc1MwRkJjRU1zUTBGQk1VOHNSVUZCY1ZJc1JVRkJSU3hYUVVGR0xFTkJRV01zVVVGQlpDeERRVUYxUWl4TFFVRkxMRTlCUVV3c1EwRkJZU3hMUVVGd1F5eEZRVUV5UXl4TlFVRXpReXhGUVVGeVVpeEZRVUY1VlN4RlFVRkZMRmRCUVVZc1EwRkJZeXhOUVVGa0xFTkJRWEZDTEVWQlFVVXNUMEZCZGtJc1EwRkJlbFVzUlVGQmVWY3NSVUZCUlN4UFFVRkdMRU5CUVZVc1NVRkJWaXhEUVVGbExGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRkZCUVVVc1EwRkJSaXhGUVVGTExFbEJRVXdzUTBGQlZTeHJRa0ZCVml4RlFVRTJRaXhEUVVFM1FqdEJRVUZuUXl4TFFVRTNSQ3hEUVVGNlZ5eEZRVUYzWVN4RlFVRkZMRmxCUVVZc1IwRkJaU3hGUVVGRkxFOUJRWHBpTEVWQlFXbGpMRVZCUVVVc1RVRkJSaXhGUVVGcVl6dEJRVUUwWXl4SFFVRnVNRWNzUlVGQmJ6QkhMRVZCUVVVc1UwRkJSaXhEUVVGWkxHRkJRVm9zUjBGQk1FSXNXVUZCVlR0QlFVRkRMRkZCUVVrc1NVRkJSU3hKUVVGT0xFTkJRVmNzU1VGQlJ5eE5RVUZKTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVdRc1NVRkJORUlzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1kwRkJNME1zU1VGQk1rUXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQk4wVXNSVUZCYzBZN1FVRkJReXhWUVVGSkxFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNSVUZCVml4RFFVRmhMRVZCUVVVc1dVRkJaaXhGUVVFMlFpeFhRVUUzUWl4RFFVRjVReXhEUVVGRExFTkJRVEZETEVOQlFVNHNRMEZCYlVRc1JVRkJSU3hMUVVGR0xFTkJRVkVzVDBGQlVpeERRVUZuUWl4RlFVRkRMRkZCUVU4c1EwRkJVaXhGUVVGb1FpeEZRVUV5UWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGeVF6dEJRVUUwUXp0QlFVRkRMRWRCUVROcFNDeEZRVUUwYVVnc1JVRkJSU3hUUVVGR0xFTkJRVmtzV1VGQldpeEhRVUY1UWl4VlFVRlRMRU5CUVZRc1JVRkJWeXhEUVVGWUxFVkJRV0U3UVVGQlF5eFJRVUZKTEVsQlFVVXNSVUZCVGp0QlFVRkJMRkZCUVZNc1NVRkJSU3hKUVVGWUxFTkJRV2RDTEVWQlFVVXNZVUZCUml4SlFVRnJRaXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4SFFVRm1MRWxCUVc5Q0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRkZCUVc1RExFdEJRVGhETEVsQlFVVXNRMEZCUXl4RFFVRnFSQ3hEUVVGc1FpeEZRVUZ6UlN4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxHbENRVUZRTEVkQlFYbENMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFXWXNSMEZCZDBJc1JVRkJSU3hYUVVGR0xFTkJRV01zVDBGQlpDeERRVUZ6UWl4RlFVRkRMRTFCUVVzc1EwRkJUaXhGUVVGMFFpeEZRVUVyUWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGNlF5eEZRVUVyUXl4RlFVRkZMRTlCUVVZc1EwRkJWU3hOUVVGNlJDeEZRVUZuUlN4RFFVRm9SU3hEUVVGNFFpeEhRVUV5Uml4RlFVRkZMRmRCUVVZc1EwRkJZeXhQUVVGa0xFTkJRWE5DTEVWQlFVTXNTMEZCU1N4RFFVRk1MRVZCUVhSQ0xFVkJRVGhDTEVWQlFVVXNUMEZCUml4RFFVRlZMRXRCUVhoRExFVkJRVGhETEVWQlFVVXNUMEZCUml4RFFVRlZMRTFCUVhoRUxFVkJRU3RFTEVOQlFTOUVMRU5CUVhCSUxFZEJRWE5NTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1kwRkJVQ3hKUVVGMVFpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hIUVVGbUxFdEJRWEZDTEVWQlFVVXNWMEZCUml4SFFVRmpMRU5CUVVNc1JVRkJSU3hYUVVGMFF5eEhRVUZ0UkN4RlFVRkZMRVZCUVVNc1YwRkJWU3hGUVVGRkxGZEJRV0lzUlVGQlJpeEZRVUUyUWl4UFFVRTNRaXhEUVVGeFF5eEZRVUZETEZkQlFWVXNRMEZCV0N4RlFVRnlReXhGUVVGdFJDeEZRVUZETEZWQlFWTXNSVUZCUlN4UFFVRkdMRU5CUVZVc1MwRkJjRUlzUlVGQk1FSXNVVUZCVHl4RlFVRkZMRTlCUVVZc1EwRkJWU3hOUVVFelF5eEZRVUZyUkN4TlFVRkxMR05CUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zV1VGQlJTeExRVUZMTEVsQlFVd3NRMEZCVlN4RFFVRldMRU5CUVVZc1JVRkJaU3hEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4UlFVRm1MRWxCUVhsQ0xFVkJRVVVzUlVGQlJTeFJRVUZLTEVsQlFXTXNaVUZCWVN4RFFVRmlMRWRCUVdVc1ZVRkJOMElzUlVGQmQwTXNSVUZCUlN4WFFVRkdMRU5CUVdNc1IwRkJaQ3hEUVVGclFpeERRVUZzUWl4RFFVRnFSU3hMUVVGM1JpeEZRVUZGTEVWQlFVVXNVVUZCU2l4SlFVRmpMRzFDUVVGcFFpeERRVUZxUWl4SFFVRnRRaXhMUVVGcVF5eEZRVUYxUXl4RlFVRkZMRmRCUVVZc1EwRkJZeXhIUVVGa0xFTkJRV3RDTEVOQlFXeENMRU5CUVM5SUxFTkJRV1k3UVVGQmIwc3NUMEZCZGs4c1JVRkJkMDhzVlVGQlV5eHZRa0ZCVlR0QlFVRkRMR0ZCUVVjc1JVRkJSU3hKUVVGR0xFVkJRVWc3UVVGQldTeFBRVUY0VVN4RlFVRnVSQ3hEUVVFeFJTeExRVUV3V1N4RlFVRkZMR1ZCUVVZc1NVRkJiMElzU1VGQlJTeExRVUZMTEVsQlFVd3NRMEZCVlN4RFFVRldMRU5CUVhSQ0xFVkJRVzFETEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRV1lzUjBGQmQwSXNSVUZCUlN4RlFVRkZMRkZCUVVvc1NVRkJZeXhwUWtGQlpTeERRVUZtTEVkQlFXbENMR1ZCUVhaRUxFZEJRWFZGTEVWQlFVVXNSVUZCUlN4UlFVRktMRWxCUVdNc2NVSkJRVzFDTEVOQlFXNUNMRWRCUVhGQ0xGVkJRVGRKTEVWQlFYZEtMRVZCUVVVc1YwRkJSaXhEUVVGakxFZEJRV1FzUTBGQmEwSXNRMEZCYkVJc1EwRkJlRW9zUlVGQk5rc3NTMEZCUnl4WFFVRlhMRmxCUVZVN1FVRkJReXhSUVVGRkxHbENRVUZHTEVsQlFYTkNMRVZCUVVVc1NVRkJSaXhGUVVGMFFqdEJRVUVyUWl4TFFVRnlSQ3hGUVVGelJDeEZRVUZGTEU5QlFVWXNRMEZCVlN4TFFVRm9SU3hEUVVFeGFrSXNRMEZCTlZBN1FVRkJPRE5DTEVkQlFXb3JTU3hGUVVGckswa3NSVUZCUlN4VFFVRkdMRU5CUVZrc1dVRkJXaXhIUVVGNVFpeFpRVUZWTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0N1FVRkJRU3hSUVVGWExFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCZGtJc1EwRkJaME1zVDBGQlR5eExRVUZITEZOQlFVOHNRMEZCVml4TFFVRmpMRWxCUVVVc1JVRkJSU3hEUVVGR0xFVkJRVXNzUjBGQlRDeERRVUZUTEVWQlFVVXNUMEZCV0N4RFFVRm9RaXhIUVVGeFF5eERRVUUxUXp0QlFVRTRReXhIUVVGd2JFb3NSVUZCY1d4S0xFVkJRVVVzVTBGQlJpeERRVUZaTEZGQlFWb3NSMEZCY1VJc1ZVRkJVeXhEUVVGVUxFVkJRVmM3UVVGQlF5eFJRVUZKTEVsQlFVVXNTMEZCU3l4WlFVRk1MRVZCUVU0c1EwRkJNRUlzVTBGQlR5eERRVUZRTEVsQlFWVXNiMEpCUVdsQ0xFTkJRV3BDTEhsRFFVRnBRaXhEUVVGcVFpeEZRVUZXTEVsQlFUaENMRVZCUVVVc1NVRkJSaXhEUVVGUExGbEJRVlU3UVVGQlF5eFZRVUZKTEVsQlFVVXNSVUZCUlN4SlFVRkdMRVZCUVZFc1MwRkJVaXhEUVVGakxGVkJRV1FzUTBGQlRpeERRVUZuUXl4RlFVRkZMRk5CUVVZc1NVRkJZU3hGUVVGRkxGbEJRVVlzUTBGQlpTeERRVUZtTEVWQlFXbENMRU5CUVVNc1EwRkJiRUlzUTBGQllqdEJRVUZyUXl4TFFVRndSaXhEUVVFNVFqdEJRVUZ2U0N4SFFVRndkMG9zUlVGQmNYZEtMRVZCUVVVc1UwRkJSaXhEUVVGWkxHVkJRVm9zUjBGQk5FSXNWVUZCVXl4RFFVRlVMRVZCUVZjN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRqdEJRVUZCTEZGQlFWY3NTVUZCUlN4RlFVRmlMRU5CUVdkQ0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVdZc1IwRkJiMElzUlVGQlJTeEZRVUZGTEdOQlFVb3NTVUZCYjBJc1JVRkJSU3hoUVVGR0xFZEJRV2RDTEVkQlFXaENMRWRCUVc5Q0xFVkJRVVVzVDBGQlJpeERRVUZWTEV0QlFUbENMRWRCUVc5RExFdEJRWEJETEVkQlFUQkRMRVZCUVVVc1QwRkJSaXhEUVVGVkxFOUJRVFZHTEVkQlFXOUhMRVZCUVVVc1JVRkJSU3hqUVVGS0xFbEJRVzlDTEdGQlFWY3NSVUZCUlN4UFFVRkdMRU5CUVZVc1MwRkJja0lzUjBGQk1rSXNTMEZCTTBJc1IwRkJhVU1zUlVGQlJTeFBRVUZHTEVOQlFWVXNUMEZCYmtzc1JVRkJNa3NzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1NVRkJaaXhIUVVGdlFpeEZRVUZGTEZkQlFVWXNRMEZCWXl4SFFVRmtMRU5CUVd0Q0xFTkJRV3hDTEVOQlFYQkNMRWRCUVhsRExFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RFFVRmlMRVZCUVdkQ0xFZEJRV2hDTEVOQlFXOUNMRU5CUVhCQ0xFTkJRWEJPTzBGQlFUSlBMRWRCUVhocFN5eEZRVUY1YVVzc1JVRkJSU3hUUVVGR0xFTkJRVmtzVVVGQldpeEhRVUZ4UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTRzUTBGQlZ5eEZRVUZGTEdGQlFVWXNTVUZCYTBJc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZGtJc1MwRkJjME1zUlVGQlJTeGhRVUZHTEVkQlFXZENMRmxCUVZrc1JVRkJSU3huUWtGQlpDeEZRVUVyUWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hoUVVGNlF5eERRVUYwUkN4RFFVRnNRanRCUVVGcFNTeEhRVUZ5ZEVzc1JVRkJjM1JMTEVWQlFVVXNVMEZCUml4RFFVRlpMR0ZCUVZvc1IwRkJNRUlzV1VGQlZUdEJRVUZETEZGQlFVa3NTVUZCUlN4SlFVRk9MRU5CUVZjc1JVRkJSU3hoUVVGR0xFbEJRV2xDTEdOQlFXTXNSVUZCUlN4aFFVRm9RaXhEUVVGcVFqdEJRVUZuUkN4SFFVRjBla3NzUlVGQmRYcExMRVZCUVVVc1UwRkJSaXhEUVVGWkxHZENRVUZhTEVkQlFUWkNMRmxCUVZVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRqdEJRVUZCTEZGQlFWY3NTVUZCUlN4RlFVRkZMRmxCUVVZc1IwRkJaU3hGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUYwUXl4RFFVRnhSQ3hGUVVGRkxFMUJRVVlzU1VGQlZTeEZRVUZGTEZkQlFWb3NTVUZCZVVJc1JVRkJSU3hSUVVFelFpeExRVUZ6UXl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZtTEV0QlFUQkNMRTFCUVVrc1JVRkJSU3hUUVVGT0xFbEJRV2xDTEVWQlFVVXNXVUZCUml4SFFVRmxMRU5CUVdZc1MwRkJiVUlzUlVGQlJTeFZRVUZHTEVkQlFXRXNRMEZCYWtRc1IwRkJiVVFzUlVGQlJTeFRRVUZHTEVkQlFWa3NRMEZCTDBRc1IwRkJhVVVzVFVGQlNTeEZRVUZGTEZOQlFVNHNTMEZCYTBJc1NVRkJSU3hGUVVGRkxGbEJRVVlzUjBGQlpTeEZRVUZGTEU5QlFVWXNRMEZCVlN4alFVRXpRaXhGUVVFd1F5eEZRVUZGTEZsQlFVWXNSMEZCWlN4RFFVRm1MRWxCUVd0Q0xFTkJRV3hDTEV0QlFYTkNMRVZCUVVVc1UwRkJSaXhIUVVGWkxFTkJRV3hETEVOQlFUVkVMRU5CUVROR0xFZEJRVGhNTEVWQlFVVXNXVUZCUml4RFFVRmxMRU5CUVdZc1EwRkJjRTg3UVVGQmRWQXNSMEZCTTI5TUxFVkJRVFJ2VEN4RlFVRkZMRk5CUVVZc1EwRkJXU3hYUVVGYUxFZEJRWGRDTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRTFCUVdZc1MwRkJkMElzUlVGQlJTeFZRVUZHTEVkQlFXRXNSVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hUUVVGYUxFVkJRWFZDTEZGQlFYWkNMRU5CUVdkRExHRkJRV2hETEVOQlFXSXNSVUZCTkVRc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4VFFVRmFMRVZCUVhWQ0xGRkJRWFpDTEVOQlFXZERMR0ZCUVdoRExFTkJRWHBGTEVWQlFYZElMRVZCUVVVc1ZVRkJSaXhIUVVGaExFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFYWkNMRWxCUVhGRExFVkJRVVVzVlVGQlJpeERRVUZoTEZkQlFXSXNRMEZCZVVJc1kwRkJla0lzUlVGQmVVTXNWVUZCZWtNc1EwRkJiMFFzYzBKQlFYQkVMRWRCUVRSRkxFVkJRVVVzVlVGQlJpeERRVUZoTEZkQlFXSXNRMEZCZVVJc1kwRkJla0lzUlVGQmVVTXNWVUZCZWtNc1EwRkJiMFFzYzBKQlFYQkVMRU5CUVRWRkxFVkJRWGRLTEVWQlFVVXNVVUZCUml4RFFVRlhMRWxCUVZnc1EwRkJaMElzUlVGQlJTeFBRVUZHTEVOQlFWVXNVMEZCTVVJc1MwRkJjME1zUlVGQlJTeFZRVUZHTEVOQlFXRXNVMEZCWWl4RFFVRjFRaXhGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZxUXl4RFFVRTVUQ3hGUVVFMlR5eEZRVUZGTEZGQlFVWXNRMEZCVnl4SlFVRllMRU5CUVdkQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEZOQlFURkNMRXRCUVhORExFVkJRVVVzVlVGQlJpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmFFTXNRMEZCYmxJc1JVRkJhVlVzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1VVRkJaaXhKUVVGNVFpeEZRVUZGTEZWQlFVWXNRMEZCWVN4UlFVRmlMRU5CUVhOQ0xHZENRVUYwUWl4RlFVRjNReXhKUVVGNFF5eERRVUUyUXl4bFFVRTNReXhGUVVFMlJDeE5RVUUzUkN4RFFVRXZXQ3hKUVVGeFl5eEZRVUZGTEZWQlFVWXNRMEZCWVN4SFFVRmlMRU5CUVdsQ0xFVkJRVVVzVlVGQmJrSXNSVUZCSzBJc1VVRkJMMElzUTBGQmQwTXNZMEZCZUVNc1JVRkJkMFFzU1VGQmVFUXNRMEZCTmtRc1JVRkJReXhwUWtGQlowSXNUVUZCYWtJc1JVRkJkMElzVlVGQlV5eEpRVUZxUXl4RlFVRTNSQ3hEUVVGeWJFSTdRVUZCTW5KQ0xFZEJRWEl6VFN4RlFVRnpNMDBzUlVGQlJTeFRRVUZHTEVOQlFWa3NVMEZCV2l4SFFVRnpRaXhaUVVGVk8wRkJRVU1zVVVGQlNTeERRVUZLTzBGQlFVRXNVVUZCVFN4RFFVRk9PMEZCUVVFc1VVRkJVU3hKUVVGRkxFbEJRVllzUTBGQlpTeEpRVUZITEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFbEJRV3hDTEVWQlFYVkNPMEZCUVVNc1YwRkJTU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZXTEVOQlFXMUNMR05CUVc1Q0xFZEJRVzFETEVsQlFVVXNSVUZCUlN4UlFVRkdMRVZCUVZrc1VVRkJXaXhEUVVGeFFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4VFFVRXZRaXhEUVVGeVF5eEZRVUVyUlN4SlFVRkZMRU5CUVhKR0xFVkJRWFZHTEV0QlFVY3NSVUZCUlN4WFFVRkdMRVZCUVRGR0xFVkJRVEJITEV0QlFVY3NRMEZCTjBjN1FVRkJLMGNzVlVGQlJTeE5RVUZHTEVOQlFWTXNSVUZCUlN4UlFVRkdMRVZCUVZrc1RVRkJXaXhEUVVGdFFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRU5CUVhWQ0xFbEJRWFpDTEVOQlFUUkNMRWxCUVRWQ0xFVkJRV2xETEVOQlFXcERMRVZCUVcxRExFTkJRVzVETEVOQlFXNUNMRU5CUVZRN1FVRkJMMGNzVDBGQmJVd3NSVUZCUlN4TFFVRkdMRWRCUVZFc1JVRkJSU3hSUVVGR0xFTkJRVmNzUlVGQlJTeFBRVUZHTEVOQlFWVXNWVUZCY2tJc1EwRkJVaXhGUVVGNVF5eEZRVUZGTEV0QlFVWXNRMEZCVVN4SlFVRlNMRU5CUVdFc1NVRkJZaXhGUVVGdFFpeExRVUZ1UWl4SFFVRXlRaXhSUVVFelFpeERRVUZ2UXl4alFVRndReXhEUVVGNlF6dEJRVUUyUmp0QlFVRkRMRWRCUVM5elRpeEZRVUZuZEU0c1JVRkJSU3hUUVVGR0xFTkJRVmtzVVVGQldpeEhRVUZ4UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTRzUTBGQlZ5eEZRVUZGTEU5QlFVWXNSMEZCVlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hSUVVGV0xFTkJRVzFDTEVWQlFVVXNUMEZCUml4RFFVRlZMRXRCUVZZc1IwRkJaMElzY1VKQlFXNURMRVZCUVRCRUxGRkJRVEZFTEVOQlFXMUZMR0ZCUVc1RkxFTkJRVllzUlVGQk5FWXNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzVFVGQmJrZ3NSVUZCTUVnc1JVRkJSU3hQUVVGR0xFTkJRVlVzU1VGQlZpeERRVUZsTEZWQlFWTXNRMEZCVkN4RlFVRlhMRU5CUVZnc1JVRkJZVHRCUVVGRExGRkJRVVVzUTBGQlJpeEZRVUZMTEVsQlFVd3NRMEZCVlN4clFrRkJWaXhGUVVFMlFpeERRVUUzUWl4RlFVRm5ReXhKUVVGb1F5eERRVUZ4UXl4cFFrRkJja01zUlVGQmRVUXNSVUZCUlN4RFFVRkdMRVZCUVVzc1NVRkJUQ3hEUVVGVkxFOUJRVllzUzBGQmIwSXNSVUZCTTBVN1FVRkJLMFVzUzBGQk5VY3NRMEZCTVVnc1JVRkJkMDhzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCVml4RFFVRnRRaXhqUVVGdVFpeERRVUY0VHl4RlFVRXlVU3hGUVVGRkxGZEJRVVlzUjBGQll5eE5RVUZKTEVWQlFVVXNWVUZCVGl4SFFVRnBRaXhGUVVGRkxEUkNRVUZHTEVWQlFXZERMRkZCUVdoRExFTkJRWGxETEVWQlFVVXNUMEZCTTBNc1EwRkJha0lzUjBGQmNVVXNSVUZCUlN4UFFVRkdMRU5CUVZVc1QwRkJWaXhEUVVGclFpdzBRa0ZCYkVJc1JVRkJaMFFzVFVGQmFFUXNSVUZCT1ZZc1JVRkJkVm9zUlVGQlJTeExRVUZHTEVkQlFWRXNSVUZCUlN4WFFVRkdMRU5CUVdNc1NVRkJaQ3hEUVVGdFFpd3lRa0ZCYmtJc1JVRkJaMFFzVFVGQmFFUXNSVUZCTDFvc1JVRkJkMlFzUlVGQlJTeFhRVUZHTEVOQlFXTXNSMEZCWkN4RFFVRnJRaXhUUVVGc1FpeEZRVUUwUWl4RFFVRTFRaXhEUVVGNFpDeEZRVUYxWml4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFZRVUZtTEVsQlFUSkNMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFURkRMRXRCUVhsRUxFVkJRVVVzVDBGQlJpeERRVUZWTEdOQlFWWXNSMEZCZVVJc1EwRkJiRVlzUTBGQmRtWXNSVUZCTkd0Q0xFVkJRVVVzWjBKQlFVWXNSVUZCYlVJc1JVRkJSU3hQUVVGeVFpeEZRVUU0UWl4SFFVRTVRaXhEUVVGclF5eFBRVUZzUXl4RlFVRXlReXhSUVVFelF5eERRVUZ2UkN4bFFVRndSQ3hEUVVFMWEwSXNSVUZCYVhCQ0xFVkJRVVVzWVVGQlJpeEZRVUZxY0VJc1JVRkJiWEZDTEVWQlFVVXNWMEZCUml4RlFVRnVjVUlzUlVGQmJYSkNMRVZCUVVVc1UwRkJSaXhGUVVGdWNrSXNSVUZCYVhOQ0xFVkJRVVVzVlVGQlJpeEZRVUZxYzBJc1JVRkJaM1JDTEVWQlFVVXNaVUZCUml4RFFVRnJRaXhaUVVGVkxFOUJRVThzUlVGQlJTeFpRVUZ1UWl4SFFVRm5ReXhGUVVGRkxGbEJRV3hETEVkQlFTdERMRU5CUVdwRkxFTkJRV2gwUWl4RlFVRnZlRUlzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1UwRkJaaXhKUVVFd1FpeEZRVUZGTEV0QlFVWXNRMEZCVVN4UlFVRlNMRU5CUVdsQ0xGZEJRV3BDTEVOQlFUbDVRanRCUVVFME1FSXNSMEZCZG10UUxFVkJRWGRyVUN4RlFVRkZMRk5CUVVZc1EwRkJXU3hUUVVGYUxFZEJRWE5DTEZsQlFWVTdRVUZCUXl4UlFVRkpMRU5CUVVvN1FVRkJRU3hSUVVGTkxFTkJRVTQ3UVVGQlFTeFJRVUZSTEVOQlFWSTdRVUZCUVN4UlFVRlZMRU5CUVZZN1FVRkJRU3hSUVVGWkxFTkJRVm83UVVGQlFTeFJRVUZqTEVOQlFXUTdRVUZCUVN4UlFVRm5RaXhEUVVGb1FqdEJRVUZCTEZGQlFXdENMRWxCUVVVc1NVRkJjRUlzUTBGQmVVSXNTVUZCUnl4SlFVRkZMRk5CUVZNc2MwSkJRVlFzUlVGQlJpeEZRVUZ2UXl4SlFVRkZMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRVllzUlVGQmRFTXNSVUZCTWtRc1JVRkJSU3hQUVVGR0xFTkJRVlVzU1VGQlZpeEhRVUZsTEVOQlFUZEZMRVZCUVN0Rk8wRkJRVU1zVjBGQlNTeEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1IwRkJkVUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNTVUZCYmtNc1JVRkJkME1zU1VGQlJTeExRVUZMTEVsQlFVd3NRMEZCVlN4RlFVRkZMRTFCUVVZc1IwRkJVeXhEUVVGdVFpeERRVUV4UXl4RlFVRm5SU3hKUVVGRkxFTkJRWFJGTEVWQlFYZEZMRWxCUVVVc1EwRkJNVVVzUlVGQk5FVXNSMEZCTlVVc1JVRkJaMFk3UVVGQlF5eFpRVUZKTEVsQlFVVXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVOQlFVNHNRMEZCYjBNc1MwRkJTU3hKUVVGRkxFTkJRVTRzUlVGQlVTeEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVhCQ0xFVkJRWGxDTEVkQlFYcENMRVZCUVRaQ08wRkJRVU1zWTBGQlNTeEpRVUZGTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUZPTEVOQlFXOURMRXRCUVVrc1NVRkJSU3hEUVVGT0xFVkJRVkVzU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRndRaXhGUVVGcFF5eEhRVUZxUXl4RlFVRnhRenRCUVVGRExHZENRVUZKTEVsQlFVVXNTVUZCUlN4RFFVRkdMRWxCUVVzc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZhTEVkQlFYbENMRU5CUVRsQ0xFTkJRVTRzUTBGQmRVTXNSVUZCUlN4SFFVRkdMRU5CUVUwc1EwRkJUaXhMUVVGVkxFVkJRVVVzVjBGQlJpeERRVUZqTEVWQlFVVXNSMEZCUml4RFFVRk5MRU5CUVU0c1EwRkJaQ3hEUVVGV08wRkJRV3RETEdGQlFVVXNWMEZCUml4RFFVRmpMRU5CUVdRN1FVRkJhVUlzVjBGQlJTeFhRVUZHTEVOQlFXTXNRMEZCWkR0QlFVRnBRaXhUUVVGRkxFOUJRVVlzUTBGQlZTeExRVUZXTEVkQlFXdENMRTFCUVd4Q0xFTkJRWGxDTEVOQlFYcENMRWRCUVRSQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFWWXNSMEZCY1VJc1VVRkJja0lzUjBGQlowTXNVVUZCYUVNc1IwRkJNa01zUjBGQk0wTXNRMEZCSzBNc1JVRkJReXhQUVVGTkxFMUJRVWtzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCWkN4SFFVRXlRaXhIUVVGc1F5eEZRVUZ6UXl4VFFVRlJMR05CUVRsRExFVkJRUzlETEVOQlFUVkNPMEZCUVRCSk8wRkJRVU1zUjBGQmNuRlJMRVZCUVhOeFVTeEZRVUZGTEZOQlFVWXNRMEZCV1N4bFFVRmFMRWRCUVRSQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRkZCUVVrc1EwRkJTanRCUVVGQkxGRkJRVTBzUTBGQlRqdEJRVUZCTEZGQlFWRXNRMEZCVWp0QlFVRkJMRkZCUVZVc1NVRkJSU3hKUVVGYU8wRkJRVUVzVVVGQmFVSXNTVUZCUlN4RFFVRkRMRU5CUVhCQ08wRkJRVUVzVVVGQmMwSXNTVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGV0xFVkJRWGhDTzBGQlFVRXNVVUZCTUVNc1NVRkJSU3hQUVVGUExGVkJRVkFzU1VGQmJVSXNSVUZCUlN4TlFVRkdMRVZCUVZVc1MwRkJWaXhGUVVFdlJDeERRVUZwUml4SlFVRkhMR0ZCUVZjc1JVRkJSU3hUUVVGaUxFZEJRWFZDTEVsQlFVVXNRMEZCZWtJc1IwRkJNa0lzWVVGQlZ5eEZRVUZGTEZOQlFXSXNSMEZCZFVJc1NVRkJSU3hEUVVGNlFpeEhRVUV5UWl4VlFVRlJMRVZCUVVVc1UwRkJWaXhMUVVGelFpeEpRVUZGTEV0QlFVc3NSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJWeXhEUVVGWUxFTkJRWGhDTEVOQlFYUkVMRVZCUVRaR0xFVkJRVVVzVDBGQlJpeERRVUZWTEZWQlFWWXNTVUZCYzBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzVlVGQlZpeERRVUZ4UWl4TlFVRXpReXhKUVVGdFJDeFRRVUZQTEVWQlFVVXNUMEZCUml4RFFVRlZMRlZCUVhCTExFVkJRU3RMTzBGQlFVTXNWVUZCUlN4SlFVRkdMRU5CUVU4c1MwRkJTU3hEUVVGS0xFbEJRVk1zUlVGQlJTeFhRVUZZTzBGQlFYVkNMRlZCUVVVc1YwRkJSaXhEUVVGakxHTkJRV1FzUTBGQk5rSXNRMEZCTjBJc1RVRkJhME1zUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4blFrRkJSaXhEUVVGdFFpeFhRVUY0UWl4SFFVRnZReXhKUVVGRkxFVkJRVVVzVjBGQlJpeERRVUZqTEVOQlFXUXNRMEZCUml4TFFVRnhRaXhKUVVGRkxFVkJRVVVzVjBGQlJpeERRVUZqTEVOQlFXUXNRMEZCZGtJc1EwRkJjRU1zUjBGQk5rVXNTVUZCUlN4RlFVRkZMRmRCUVVZc1EwRkJZeXhEUVVGa0xFTkJRVVlzUzBGQmNVSXNTVUZCUlN4RlFVRkZMRmRCUVVZc1EwRkJZeXhEUVVGa0xFTkJRWFpDTEVOQlFTOUhPMEZCUVhaQ0xFOUJRV2RNTEZOQlFVOHNRMEZCVUN4SFFVRlRMRk5CUVU4c1JVRkJSU3huUWtGQlZDeEhRVUV3UWl4RFFVRkRMRTFCUVVrc1JVRkJSU3huUWtGQlRpeEpRVUYzUWl4RFFVRjZRaXhOUVVFNFFpeEZRVUZGTEdkQ1FVRkdMRWRCUVcxQ0xFTkJRVzVDTEVWQlFYRkNMR05CUVZrc1JVRkJSU3hyUWtGQlJpeERRVUZ4UWl4RFFVRnlRaXhEUVVGYUxFZEJRVzlETEVWQlFVVXNUMEZCUml4RFFVRlZMRU5CUVZZc1EwRkJjRU1zU1VGQmEwUXNSVUZCUlN4UFFVRkdMRWRCUVZVc1JVRkJSU3hOUVVGR0xFTkJRVk1zUlVGQlZDeEZRVUZaTEVWQlFVVXNaMEpCUVdRc1JVRkJLMElzUlVGQlJTeHJRa0ZCUml4RFFVRnhRaXhEUVVGeVFpeERRVUV2UWl4RFFVRldMRVZCUVd0RkxFTkJRVU1zUTBGQlJDeExRVUZMTEVOQlFVd3NTMEZCVXl4RlFVRkZMRmxCUVVZc1IwRkJaU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZzUXl4RFFVRnNSU3hGUVVGclNDeEZRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRldMRU5CUVhCTExFTkJRWEpDTEVWQlFYVk5MRWxCUVVVc1EwRkJkazhzUTBGQk1VSXNTVUZCY1ZFc1JVRkJSU3huUWtGQlJpeEhRVUZ0UWl4RFFVRnVRaXhGUVVGeFFpeGpRVUZaTEVWQlFVVXNhMEpCUVVZc1EwRkJjVUlzUTBGQmNrSXNRMEZCV2l4SFFVRnZReXhGUVVGRkxFOUJRVVlzUTBGQlZTeERRVUZXTEVOQlFYQkRMRWxCUVd0RUxFVkJRVVVzVDBGQlJpeEhRVUZWTEVWQlFVVXNUVUZCUml4RFFVRlRMRVZCUVZRc1JVRkJXU3hGUVVGRkxHZENRVUZrTEVWQlFTdENMRVZCUVVVc2EwSkJRVVlzUTBGQmNVSXNRMEZCY2tJc1EwRkJMMElzUTBGQlZpeEZRVUZyUlN4RFFVRkRMRU5CUVVRc1MwRkJTeXhEUVVGTUxFdEJRVk1zUlVGQlJTeFpRVUZHTEVkQlFXVXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJiRU1zUTBGQmJFVXNSVUZCYTBnc1JVRkJSU3hQUVVGR0xFTkJRVlVzUTBGQlZpeERRVUZ3U3l4RFFVRnlRaXhGUVVGMVRTeEpRVUZGTEVOQlFUbGpMRU5CUVZRc1IwRkJNR1FzVTBGQlR5eEZRVUZGTEdkQ1FVRlVMRXRCUVRSQ0xFVkJRVVVzWjBKQlFVWXNSMEZCYlVJc1NVRkJia0lzUlVGQmQwSXNSVUZCUlN4UFFVRkdMRWRCUVZVc1JVRkJSU3huUWtGQmNFTXNSVUZCY1VRc1EwRkJReXhEUVVGRUxFdEJRVXNzUTBGQlRDeExRVUZUTEVWQlFVVXNXVUZCUml4SFFVRmxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRV3hETEVOQlFYSkVMRVZCUVhGSExFVkJRVVVzVDBGQlJpeERRVUZWTEVOQlFWWXNRMEZCY2tjc1JVRkJhMGdzU1VGQlJTeERRVUZvU2l4RFFVRXhaQ3hGUVVFMmJVSXNTMEZCUnl4RFFVRkRMRU5CUVVRc1MwRkJTeXhEUVVGU0xFbEJRVmNzUlVGQlJTeFBRVUZHTEVOQlFWVXNUMEZCVml4RFFVRnJRaXhaUVVGc1FpeEZRVUVyUWl4RFFVRkRMRU5CUVVRc1JVRkJSeXhEUVVGSUxFTkJRUzlDTEVOQlFYaHVRanRCUVVFNGNFSTdRVUZCUXl4SFFVRjJlVk1zUlVGQmQzbFRMRVZCUVVVc1UwRkJSaXhEUVVGWkxGZEJRVm9zUjBGQmQwSXNWVUZCVXl4RFFVRlVMRVZCUVZjc1EwRkJXQ3hGUVVGaE8wRkJRVU1zVVVGQlNTeERRVUZLTzBGQlFVRXNVVUZCVFN4RFFVRk9PMEZCUVVFc1VVRkJVU3hEUVVGU08wRkJRVUVzVVVGQlZTeEpRVUZGTEVsQlFWbzdRVUZCUVN4UlFVRnBRaXhKUVVGRkxFVkJRVVVzUlVGQlJTeGhRVUZLTEVOQlFXNUNMRU5CUVhORExGRkJRVThzUlVGQlJTeEZRVUZHTEVOQlFVc3NSMEZCVEN4TFFVRlhMRVZCUVVVc1kwRkJSaXhGUVVGWUxFVkJRVGhDTEVWQlFVVXNSVUZCUml4RFFVRkxMRWxCUVV3c1RVRkJZU3hKUVVGRkxFVkJRVVVzVDBGQlJpeERRVUZWTEVsQlFWWXNRMEZCWml4RFFVRTVRaXhGUVVFNFJDeEpRVUZGTEVWQlFVVXNWVUZCUml4SFFVRmhMRVZCUVVVc1QwRkJSaXhEUVVGVkxHTkJRWFpDTEVsQlFYVkRMRU5CUVhaSExFVkJRWGxITEVsQlFVVXNTVUZCUlN4RFFVRkdMRWRCUVVrc1EwRkJReXhGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEZsQlFXaENMRWxCUVRoQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEdOQlFYWktMRVZCUVhOTExFVkJRVVVzU1VGQlJpeERRVUZQTEU5QlFYQk1MRWRCUVRaTUxFdEJRVWtzVlVGQlNqdEJRVUZsTEZsQlFVVXNUVUZCU1N4RFFVRktMRWRCUVUwc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQmFFSXNSMEZCSzBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQlZpeEhRVUYxUWl4RFFVRjRSQ3hGUVVFd1JDeEZRVUZGTEZWQlFVWXNSMEZCWVN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVGMlFpeEpRVUZ4UXl4RlFVRkZMRmxCUVVZc1EwRkJaU3hGUVVGRkxGbEJRVVlzUjBGQlpTeERRVUU1UWl4RlFVRm5ReXhEUVVGRExFTkJRV3BETEVWQlFXMURMRU5CUVc1RExFTkJRUzlHTEVOQlFYRkpMRTFCUVUwc1MwRkJTU3hOUVVGS08wRkJRVmNzV1VGQlJTeE5RVUZKTEVOQlFVb3NSMEZCVFN4RlFVRkZMRTlCUVVZc1EwRkJWU3hqUVVGb1FpeEhRVUVyUWl4RFFVRnFReXhGUVVGdFF5eEZRVUZGTEZWQlFVWXNSMEZCWVN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVGMlFpeEpRVUZ4UXl4RlFVRkZMRmxCUVVZc1EwRkJaU3hGUVVGRkxGbEJRVVlzUjBGQlpTeERRVUU1UWl4RlFVRm5ReXhEUVVGRExFTkJRV3BETEVWQlFXMURMRU5CUVc1RExFTkJRWGhGTEVOQlFUaEhMRTFCUVUwc1MwRkJTU3hQUVVGS08wRkJRVmtzV1VGQlNTeEpRVUZGTEUxQlFVa3NSVUZCUlN4SlFVRkdMRU5CUVU4c1MwRkJXQ3hIUVVGcFFpeERRVUZxUWl4SFFVRnRRaXhGUVVGRkxFbEJRVVlzUTBGQlR5eExRVUZRTEVsQlFXTXNSVUZCUlN4TFFVRkdMRXRCUVZVc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQk0wUXNRMEZCTUVVc1JVRkJSU3haUVVGR0xFTkJRV1VzUlVGQlJTeGpRVUZHTEVOQlFXbENMRU5CUVdwQ0xFTkJRV1lzUlVGQmJVTXNRMEZCUXl4RFFVRndReXhGUVVGelF5eERRVUYwUXl4SFFVRjVReXhGUVVGRkxGRkJRVVlzUjBGQllTeFBRVUZpTEVOQlFYRkNMRTlCUVhKQ0xFTkJRWHBETEVOQlFYVkZMRTFCUVUwN1FVRkJVU3hsUVVGcWIwSTdRVUZCZVc5Q0xFZEJRVGN2VkN4RlFVRTRMMVFzUlVGQlJTeFRRVUZHTEVOQlFWa3NZMEZCV2l4SFFVRXlRaXhWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVUZETEZGQlFVa3NRMEZCU2l4RlFVRk5MRU5CUVU0c1EwRkJVU3hKUVVGSExFbEJRVVVzUzBGQlN5eHRRa0ZCVEN4RlFVRkdMRVZCUVRaQ0xFbEJRVVVzUTBGQkwwSXNSVUZCYVVNc1NVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlJpeEhRVUZUTEVOQlFWZ3NRMEZCZEVNc1JVRkJiMFFzU1VGQlJTeEZRVUZGTEVWQlFVVXNUVUZCUml4SFFVRlRMRU5CUVZnc1EwRkJSaXhEUVVGd1JDeExRVUY1UlN4TFFVRkpMRWxCUVVrc1EwRkJVaXhKUVVGaExFTkJRV0lzUlVGQlpUdEJRVUZETEZWQlFVY3NTVUZCUlN4RlFVRkZMRU5CUVVZc1EwRkJUQ3hGUVVGVk8wRkJRVU1zV1VGQlJTeERRVUZHTEVOQlFVazdRVUZCVFN4WFFVRkZMRVZCUVVVc1EwRkJSaXhEUVVGR08wRkJRVThzV1VGQlR5eERRVUZRTzBGQlFWTXNSMEZCTTNGVkxFVkJRVFJ4VlN4RlFVRkZMRk5CUVVZc1EwRkJXU3hoUVVGYUxFZEJRVEJDTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFVkJRVVVzVDBGQlJpeERRVUZWTEVsQlFWWXNTVUZCWjBJc1UwRkJUeXhGUVVGRkxFdEJRWHBDTEV0QlFXbERMRVZCUVVVc1NVRkJSaXhGUVVGUExFVkJRVVVzUzBGQlZDeEZRVUZuUWl4SFFVRm9RaXhEUVVGdlFpeGhRVUZ3UWl4RlFVRnJReXhGUVVGRkxGZEJRWEJETEVWQlFXbEVMRWRCUVdwRUxFTkJRWEZFTEd0Q1FVRnlSQ3hGUVVGM1JTeEZRVUZGTEV0QlFVWXNRMEZCVVN4RlFVRkZMRk5CUVZZc1JVRkJiMElzUTBGQmNFSXNSVUZCYzBJc1EwRkJReXhEUVVGMlFpeERRVUY0UlN4RlFVRnRSeXhIUVVGdVJ5eERRVUYxUnl4clFrRkJka2NzUlVGQk1FZ3NSVUZCUlN4TFFVRkdMRU5CUVZFc1JVRkJSU3hUUVVGV0xFVkJRVzlDTEVOQlFYQkNMRVZCUVhOQ0xFTkJRVU1zUTBGQmRrSXNRMEZCTVVnc1IwRkJjVW9zUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1lVRkJaaXhKUVVFNFFpeEZRVUZGTEV0QlFVWXNRMEZCVVN4SFFVRlNMRU5CUVZrc1pVRkJXaXhGUVVFMFFpeEZRVUZGTEZWQlFUbENMRU5CUVhCT0xFZEJRU3RRTEVWQlFVVXNUMEZCUml4RFFVRlZMRWRCUVZZc1EwRkJZeXgzUWtGQlpDeERRVUV2VUN4RlFVRjFVeXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4TlFVRm1MRWxCUVhWQ0xFVkJRVVVzVlVGQlJpeEhRVUZoTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVRsRExFdEJRVFpFTEVWQlFVVXNWVUZCUml4SlFVRmpMRVZCUVVVc1ZVRkJSaXhEUVVGaExFZEJRV0lzUTBGQmFVSXNZVUZCYWtJc1JVRkJLMElzUlVGQlJTeFhRVUZxUXl4RFFVRmtMRVZCUVRSRUxFVkJRVVVzVlVGQlJpeEpRVUZqTEVWQlFVVXNWVUZCUml4RFFVRmhMRWRCUVdJc1EwRkJhVUlzWVVGQmFrSXNSVUZCSzBJc1JVRkJSU3hYUVVGcVF5eERRVUV4UlN4RlFVRjNTQ3hEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4aFFVRm1MRXRCUVN0Q0xFVkJRVVVzVlVGQlJpeEpRVUZqTEVWQlFVVXNWVUZCUml4RFFVRmhMRWRCUVdJc1EwRkJhVUlzWlVGQmFrSXNSVUZCYVVNc1JVRkJSU3hWUVVGdVF5eERRVUZrTEVWQlFUWkVMRVZCUVVVc1ZVRkJSaXhKUVVGakxFVkJRVVVzVlVGQlJpeERRVUZoTEVkQlFXSXNRMEZCYVVJc1pVRkJha0lzUlVGQmFVTXNSVUZCUlN4VlFVRnVReXhEUVVFeFJ5eERRVUZ5VEN4RFFVRjJVeXhGUVVGMWJrSXNSVUZCUlN4TFFVRkdMRU5CUVZFc1IwRkJVaXhEUVVGWkxHdERRVUZhTEVWQlFTdERMRVZCUVVVc1dVRkJha1FzUTBGQmRtNUNMRVZCUVhOeVFpeEZRVUZGTEV0QlFVWXNRMEZCVVN4SFFVRlNMRU5CUVZrc2FVTkJRVm9zUlVGQk9FTXNSVUZCUlN4WlFVRm9SQ3hEUVVGMGNrSXNSVUZCYjNaQ0xFVkJRVVVzUzBGQlJpeERRVUZSTEVkQlFWSXNRMEZCV1N3NFFrRkJXaXhGUVVFeVF5eEZRVUZGTEZsQlFUZERMRU5CUVhCMlFpeEZRVUVyZVVJc1JVRkJSU3hMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZaTEc5RFFVRmFMRVZCUVdsRUxFVkJRVVVzV1VGQmJrUXNRMEZCTDNsQ0xFVkJRV2N6UWl4RlFVRkZMRXRCUVVZc1EwRkJVU3hIUVVGU0xFTkJRVmtzWVVGQldpeEZRVUV3UWl4RlFVRkZMRmxCUVRWQ0xFTkJRV2d6UWl4RlFVRXdOVUlzUlVGQlJTeFJRVUZHTEVWQlFWa3NSMEZCV2l4RFFVRm5RaXhGUVVGRkxHZENRVUZzUWl4RlFVRnRReXhGUVVGRkxGVkJRWEpETEVOQlFURTFRaXhGUVVFeU9FSXNSVUZCUlN4clFrRkJSaXhGUVVFek9FSXNSVUZCYXl0Q0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR0ZCUVdZc1NVRkJPRUlzUlVGQlJTeExRVUZHTEVOQlFWRXNSMEZCVWl4RFFVRlpMR1ZCUVZvc1JVRkJORUlzUlVGQlJTeFZRVUU1UWl4RFFVRm9aME1zUlVGQk1HbERMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEdGQlFXWXNTVUZCT0VJc1JVRkJSU3hGUVVGRkxGZEJRVW9zUlVGQmFVSXNVVUZCYWtJc1IwRkJORUlzUjBGQk5VSXNRMEZCWjBNc1lVRkJhRU1zUlVGQk9FTXNSVUZCUlN4aFFVRm9SQ3hEUVVGNGEwTXNSVUZCZFc5RExFVkJRVVVzVFVGQlJpeEZRVUZWTEVkQlFWWXNRMEZCWXl4dFEwRkJhVU1zUlVGQlJTeFhRVUZxUkN4RlFVRTJSQ3hGUVVGRkxHbENRVUV2UkN4RFFVRjJiME1zUlVGQmVYUkRMRVZCUVVVc1RVRkJSaXhGUVVGVkxFZEJRVllzUTBGQll5eDNRa0ZCYzBJc1JVRkJSU3hYUVVGMFF5eEZRVUZyUkN4RlFVRkZMRTFCUVhCRUxFTkJRWHAwUXl4RlFVRnhlRU1zUlVGQlJTeHRRa0ZCUml4RlFVRnpRaXhGUVVGRkxGZEJRWGhDTEVWQlFYRkRMRWRCUVhKRExFTkJRWGxETEZkQlFYcERMRVZCUVhGRUxFVkJRVVVzWTBGQmRrUXNRMEZCY25oRExFVkJRVFF4UXl4RlFVRkZMRTFCUVVZc1JVRkJWU3hIUVVGV0xFTkJRV01zYzBKQlFXOUNMRVZCUVVVc1YwRkJjRU1zUlVGQlowUXNSVUZCUlN4WFFVRnNSQ3hEUVVFMU1VTTdRVUZCTWpWRExFZEJRWFp1V0N4RlFVRjNibGdzUlVGQlJTeFRRVUZHTEVOQlFWa3NhMEpCUVZvc1IwRkJLMElzV1VGQlZUdEJRVUZETEZGQlFVa3NTVUZCUlN4SlFVRk9MRU5CUVZjc1JVRkJSU3hMUVVGR0xFTkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVN0Q0xFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFVVXNVMEZCVml4RlFVRnZRaXhEUVVGd1FpeEZRVUZ6UWl4RFFVRkRMRU5CUVhaQ0xFTkJRUzlDTEVkQlFUQkVMRVZCUVVVc1MwRkJSaXhEUVVGUkxFZEJRVklzUTBGQldTeHJRa0ZCV2l4RlFVRXJRaXhGUVVGRkxFdEJRVVlzUTBGQlVTeEZRVUZGTEZOQlFWWXNSVUZCYjBJc1EwRkJjRUlzUlVGQmMwSXNRMEZCUXl4RFFVRjJRaXhEUVVFdlFpeERRVUV4UkR0QlFVRnZTQ3hIUVVGcWVWZ3NSVUZCYTNsWUxFVkJRVVVzVTBGQlJpeERRVUZaTEZkQlFWb3NSMEZCZDBJc1dVRkJWVHRCUVVGRExGRkJRVWtzUTBGQlNqdEJRVUZCTEZGQlFVMHNTVUZCUlN4SlFVRlNMRU5CUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzU1VGQlZpeEhRVUZsTEVOQlFXWXNTMEZCYlVJc1EwRkJReXhKUVVGRkxFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFWWXNSMEZCY1VJc1VVRkJja0lzUlVGQlNDeEZRVUZ2UXl4VlFVRndReXhEUVVFclF5eFBRVUV2UXl4SFFVRjNSQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeExRVUZXTEVkQlFXdENMRTFCUVd4Q0xFTkJRWGxDTEVOQlFYcENMRU5CUVRORk8wRkJRWGRITEVkQlFURTNXQ3hGUVVFeU4xZ3NSVUZCUlN4VFFVRkdMRU5CUVZrc1dVRkJXaXhIUVVGNVFpeFZRVUZUTEVOQlFWUXNSVUZCVnp0QlFVRkRMRXRCUVVNc1EwRkJSQ3hMUVVGTExFdEJRVXNzVjBGQlZpeExRVUYzUWl4RlFVRkZMSGRDUVVGR0xFbEJRVFpDTEVWQlFVVXNaVUZCUml4RlFVRTNRaXhGUVVGcFJDeEZRVUZGTEdOQlFVWXNSVUZCZWtVN1FVRkJOa1lzUjBGQk4ycFpMRVZCUVRocVdTeEZRVUZGTEZOQlFVWXNRMEZCV1N4UFFVRmFMRWRCUVc5Q0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhGUVVGRkxHRkJRVVlzU1VGQmEwSXNSVUZCUlN4WFFVRkdMRWRCUVdNc1JVRkJhRU1zUlVGQmJVTXNSVUZCUlN4aFFVRkdMRVZCUVc1RExFVkJRWEZFTEVWQlFVVXNaVUZCUml4RlFVRnJRaXhGUVVGRkxFOUJRWEJDTEVWQlFUWkNMRTFCUVRkQ0xFVkJRWEpFTEVWQlFUSkdMRVZCUVVVc1MwRkJSaXhKUVVGVExFVkJRVVVzUzBGQlJpeERRVUZSTEUxQlFWSXNSVUZCY0Vjc1JVRkJjVWdzUlVGQlJTeFZRVUZHTEVsQlFXTXNSVUZCUlN4VlFVRkdMRU5CUVdFc1RVRkJNMElzUzBGQmIwTXNSVUZCUlN4VlFVRkdMRU5CUVdFc1YwRkJZaXhEUVVGNVFpeDVRMEZCZWtJc1JVRkJiMFVzVlVGQmNFVXNRMEZCSzBVc2IwTkJRUzlGTEVWQlFYRklMRWRCUVhKSUxFTkJRWGxJTEZOQlFYcElMRVZCUVcxSkxFVkJRVzVKTEVkQlFYVkpMRVZCUVVVc1VVRkJSaXhEUVVGWExFbEJRVmdzUTBGQlowSXNSVUZCUlN4UFFVRkdMRU5CUVZVc1UwRkJNVUlzUzBGQmMwTXNSVUZCUlN4VlFVRkdMRU5CUVdFc1RVRkJZaXhGUVVGcVRpeERRVUZ5U0N4RlFVRTJWaXhGUVVGRkxGVkJRVVlzU1VGQll5eEZRVUZGTEZWQlFVWXNRMEZCWVN4TlFVRXpRaXhMUVVGdlF5eEZRVUZGTEZWQlFVWXNRMEZCWVN4WFFVRmlMRU5CUVhsQ0xIbERRVUY2UWl4RlFVRnZSU3hWUVVGd1JTeERRVUVyUlN4dlEwRkJMMFVzUlVGQmNVZ3NSMEZCY2tnc1EwRkJlVWdzVTBGQmVrZ3NSVUZCYlVrc1JVRkJia2tzUjBGQmRVa3NSVUZCUlN4UlFVRkdMRU5CUVZjc1NVRkJXQ3hEUVVGblFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4VFFVRXhRaXhMUVVGelF5eEZRVUZGTEZWQlFVWXNRMEZCWVN4TlFVRmlMRVZCUVdwT0xFTkJRVGRXTEVWQlFYRnJRaXhGUVVGRkxFOUJRVVlzUzBGQldTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WFFVRldMRU5CUVhOQ0xHMUZRVUYwUWl4RlFVRXlSaXhWUVVFelJpeERRVUZ6Unl4aFFVRjBSeXhGUVVGeFNDeFZRVUZ5U0N4RFFVRm5TU3hyUWtGQmFFa3NSVUZCYjBvc1NVRkJjRW9zUTBGQmVVb3NXVUZCVlR0QlFVRkRMRkZCUVVVc1NVRkJSaXhGUVVGUkxFbEJRVklzUTBGQllTeFBRVUZpTEVWQlFYRkNMRVZCUVVVc1NVRkJSaXhGUVVGUkxFbEJRVklzUTBGQllTeHBRa0ZCWWl4RFFVRnlRanRCUVVGelJDeExRVUV4VGl4SFFVRTBUaXhGUVVGRkxGZEJRVVlzUTBGQll5eFJRVUZrTEVOQlFYVkNMRXRCUVVzc1QwRkJUQ3hEUVVGaExFdEJRWEJETEVWQlFUSkRMRTFCUVRORExFVkJRVFZPTEVWQlFXZFNMRVZCUVVVc1YwRkJSaXhEUVVGakxFMUJRV1FzUlVGQmFGSXNSVUZCZFZNc1JVRkJSU3hMUVVGR0xFTkJRVkVzVFVGQlVpeEZRVUYyVXl4RlFVRjNWQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeE5RVUZXTEVOQlFXbENMRVZCUVVVc1QwRkJia0lzUTBGQmNGVXNRMEZCY210Q0xFVkJRWE0yUWl4RlFVRkZMRmRCUVVZc1JVRkJkRFpDTEVWQlFYTTNRaXhGUVVGRkxFOUJRVVlzUTBGQlZTeFhRVUZXTEVOQlFYTkNMR05CUVhSQ0xFTkJRWFEzUWl4RlFVRTBPVUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNWMEZCVml4RFFVRnpRaXh0UWtGQmRFSXNRMEZCTlRsQ0xFVkJRWFZuUXl4RlFVRkZMRTlCUVVZc1EwRkJWU3hYUVVGV0xFTkJRWE5DTEdOQlFYUkNMRU5CUVhablF5eEZRVUUyYVVNc1JVRkJSU3hUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUV4YWtNc1JVRkJOR3BETEV0QlFVY3NSVUZCUlN4UFFVRkdMRU5CUVZVc1QwRkJWaXhEUVVGclFpeFRRVUZzUWl4RlFVRTBRaXhEUVVGRExFTkJRVVFzUTBGQk5VSXNRMEZCTDJwRE8wRkJRV2R0UXl4SFFVRjZjMkVzUlVGQk1ITmhMRVZCUVVVc1UwRkJSaXhEUVVGWkxHbENRVUZhTEVkQlFUaENMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNDdRVUZCUVN4UlFVRlhMRWxCUVVVc1JVRkJZaXhEUVVGblFpeEZRVUZGTEVWQlFVVXNZMEZCU2l4SlFVRnZRaXhGUVVGd1FpeEZRVUYxUWl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeEpRVUZtTEVkQlFXOUNMRVZCUVVVc1YwRkJSaXhEUVVGakxFZEJRV1FzUTBGQmEwSXNRMEZCYkVJc1EwRkJjRUlzUjBGQmVVTXNSVUZCUlN4UFFVRkdMRU5CUVZVc1JVRkJWaXhEUVVGaExFTkJRV0lzUlVGQlowSXNSMEZCYUVJc1EwRkJiMElzUTBGQmNFSXNRMEZCYUVVN1FVRkJkVVlzUjBGQk16RmhMRVZCUVRReFlTeEZRVUZGTEZOQlFVWXNRMEZCV1N4VFFVRmFMRWRCUVhOQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRkZCUVVrc1NVRkJSU3hKUVVGT0xFTkJRVmNzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4alFVRlFMRWxCUVhWQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RFFVRmlMRVZCUVdkQ0xFZEJRV2hDTEVOQlFXOUNMRVZCUVVNc1VVRkJUeXhGUVVGRkxFOUJRVVlzUTBGQlZTeE5RVUZzUWl4RlFVRndRaXhIUVVFclF5eEZRVUZGTEU5QlFVWXNRMEZCVlN4RlFVRldMRU5CUVdFc1EwRkJZaXhGUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhGUVVGRExGTkJRVkVzUTBGQlZDeEZRVUY0UWl4RlFVRnZReXhGUVVGRkxFOUJRVVlzUTBGQlZTeExRVUU1UXl4RlFVRnZSQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeE5RVUU1UkN4RlFVRnhSU3hEUVVGeVJTeERRVUYwUlN4TFFVRm5TaXhGUVVGRkxHVkJRVVlzUTBGQmEwSXNRMEZCYkVJc1IwRkJjVUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNSVUZCVml4RFFVRmhMRU5CUVdJc1JVRkJaMElzUjBGQmFFSXNRMEZCYjBJc1JVRkJReXhUUVVGUkxFTkJRVlFzUlVGQlZ5eFJRVUZQTEVWQlFVVXNUMEZCUml4RFFVRlZMRTFCUVRWQ0xFVkJRWEJDTEVOQlFYSkNMRVZCUVRoRkxFdEJRVWNzVjBGQlZ5eFpRVUZWTzBGQlFVTXNVVUZCUlN4cFFrRkJSaXhEUVVGdlFpeERRVUZ3UWl4SFFVRjFRaXhGUVVGRkxFbEJRVVlzUlVGQmRrSTdRVUZCWjBNc1MwRkJkRVFzUlVGQmRVUXNSVUZCUlN4UFFVRkdMRU5CUVZVc1MwRkJha1VzUTBGQmFrODdRVUZCTUZNc1IwRkJjbkppTEVWQlFYTnlZaXhGUVVGRkxGTkJRVVlzUTBGQldTeFpRVUZhTEVkQlFYbENMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNHNRMEZCVnl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxHTkJRVkFzUjBGQmMwSXNSVUZCUlN4UFFVRkdMRU5CUVZVc1JVRkJWaXhEUVVGaExFTkJRV0lzUlVGQlowSXNUMEZCYUVJc1EwRkJkMElzUlVGQlF5eFRRVUZSTEVOQlFWUXNSVUZCVnl4UlFVRlBMRVZCUVVVc1QwRkJSaXhEUVVGVkxFMUJRVllzUjBGQmFVSXNRMEZCYmtNc1JVRkJlRUlzUlVGQk9FUXNSVUZCUlN4UFFVRkdMRU5CUVZVc1MwRkJlRVVzUlVGQk9FVXNSVUZCUlN4UFFVRkdMRU5CUVZVc1RVRkJlRVlzUTBGQmRFSXNTVUZCZFVnc1JVRkJSU3hsUVVGR0xFTkJRV3RDTEVOQlFXeENMRWRCUVhGQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RFFVRmlMRVZCUVdkQ0xFZEJRV2hDTEVOQlFXOUNMRVZCUVVNc1UwRkJVU3hEUVVGVUxFVkJRVmNzVVVGQlR5eEZRVUZGTEU5QlFVWXNRMEZCVlN4TlFVRldMRWRCUVdsQ0xFTkJRVzVETEVWQlFYQkNMRU5CUVRWSk8wRkJRWGROTEVkQlFUazJZaXhGUVVFck5tSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1dVRkJXaXhIUVVGNVFpeEZRVUZGTEZOQlFVWXNRMEZCV1N4WFFVRmFMRWRCUVhkQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhUUVVGUExFTkJRVkFzUzBGQlZ5eEZRVUZGTEZsQlFVWXNSMEZCWlN4RlFVRkZMRTlCUVdwQ0xFVkJRWGxDTEVWQlFVVXNUVUZCUml4RlFVRjZRaXhGUVVGdlF5eEZRVUZGTEZkQlFVWXNRMEZCWXl4UlFVRmtMRU5CUVhWQ0xFdEJRVXNzVDBGQlRDeERRVUZoTEV0QlFYQkRMRVZCUVRKRExFMUJRVE5ETEVWQlFYQkRMRVZCUVhkR0xFVkJRVVVzV1VGQlJpeERRVUZsTEUxQlFXWXNRMEZCYzBJc1EwRkJkRUlzUlVGQmVVSXNVVUZCZWtJc1EwRkJhME1zUlVGQlJTeFhRVUZ3UXl4RFFVRjRSaXhGUVVGNVNTeEZRVUZGTEUxQlFVWXNSVUZCY0VvN1FVRkJaMHNzUjBGQmRuQmpMRVZCUVhkd1l5eEZRVUZGTEZOQlFVWXNRMEZCV1N4WlFVRmFMRWRCUVhsQ0xGbEJRVlU3UVVGQlF5eFJRVUZKTEVsQlFVVXNTVUZCVGl4RFFVRlhMRVZCUVVVc1QwRkJSaXhEUVVGVkxFZEJRVllzUTBGQll5eDNRa0ZCWkN4RlFVRjNReXhGUVVGNFF5eERRVUV5UXl4M1FrRkJNME1zUlVGQmIwVXNSMEZCY0VVc1JVRkJkMFVzVlVGQlV5eERRVUZVTEVWQlFWYzdRVUZCUXl4UlFVRkZMSGRDUVVGR0xFZEJRVFpDTEVsQlFVa3NTVUZCUlN4RlFVRkZMRWxCUVVZc1EwRkJUaXhEUVVGakxGZEJRVmNzV1VGQlZUdEJRVUZETEZWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1MwRkJlVUlzUlVGQlJTeFJRVUZHTEVkQlFWY3NSVUZCUlN4RlFVRkdMRU5CUVVzc1VVRkJUQ3hEUVVGWUxFVkJRVEJDTEVWQlFVVXNVVUZCUml4RlFVRnVSRHRCUVVGcFJTeFBRVUYyUml4RlFVRjNSaXhEUVVGNFJqdEJRVUV5Uml4TFFVRXhUanRCUVVFMFRpeEhRVUZ1Tm1Nc1JVRkJielpqTEVWQlFVVXNVMEZCUml4RFFVRlpMRlZCUVZvc1IwRkJkVUlzUlVGQlJTeFRRVUZHTEVOQlFWa3NhVUpCUVZvc1IwRkJPRUlzV1VGQlZUdEJRVUZETEZkQlFVOHNTMEZCU3l4WlFVRmFPMEZCUVhsQ0xFZEJRVGN2WXl4RlFVRTRMMk1zUlVGQlJTeFRRVUZHTEVOQlFWa3NWMEZCV2l4SFFVRjNRaXhaUVVGVk8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNDdRVUZCUVN4UlFVRlhMRWxCUVVVc1EwRkJZanRCUVVGQkxGRkJRV1VzU1VGQlJTeERRVUZxUWp0QlFVRkJMRkZCUVcxQ0xFbEJRVVVzUTBGQmNrSXNRMEZCZFVJc1NVRkJSeXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4UlFVRnNRanRCUVVFeVFpeFZRVUZITEVWQlFVVXNWVUZCUml4SlFVRmpMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRVE5DTEVWQlFYZERMRVZCUVVVc1EwRkJSaXhEUVVGNFF5eExRVUZwUkN4UFFVRkxMRWxCUVVVc1JVRkJSU3hWUVVGVU8wRkJRWEZDTEZWQlFVVXNRMEZCUml4RlFVRkpMRWxCUVVVc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZzUWl4RlFVRnBReXhMUVVGSExFVkJRVVVzVDBGQlJpeERRVUZWTEdOQlFWWXNTVUZCTUVJc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmNFTXNSMEZCYVVRc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQk0wUXNSMEZCTUVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmVFZzdRVUZCY2tJN1FVRkJOVVVzVjBGQk1rOHNTVUZCUnl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFZRVUZzUWl4RlFVRTJRaXhKUVVGRkxFVkJRVVVzVlVGQlNpeERRVUUzUWl4TFFVRnBSQ3hKUVVGSExFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFXSXNSVUZCYzBJc1QwRkJTeXhKUVVGRkxFVkJRVVVzVlVGQlZEdEJRVUZ4UWl4UlFVRkZMRU5CUVVZc1JVRkJTU3hKUVVGRkxFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNZMEZCYkVJc1JVRkJhVU1zUzBGQlJ5eEZRVUZGTEU5QlFVWXNRMEZCVlN4alFVRldMRWxCUVRCQ0xFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFYQkRMRWRCUVdsRUxFVkJRVVVzVDBGQlJpeERRVUZWTEdOQlFUTkVMRWRCUVRCRkxFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFYaElPMEZCUVhKQ0xFdEJRWFJDTEUxQlFYRk1MRWxCUVVVc1NVRkJSU3hMUVVGTExFbEJRVXdzUTBGQlZTeERRVUZETEVWQlFVVXNWVUZCUml4SFFVRmhMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRWGhDTEVsQlFYTkRMRVZCUVVVc1QwRkJSaXhEUVVGVkxHTkJRVEZFTEVOQlFVb3NRMEZCT0VVc1QwRkJUeXhKUVVGRkxFTkJRVlE3UVVGQlZ5eEhRVUZzYldVc1JVRkJiVzFsTEVWQlFVVXNVMEZCUml4RFFVRlpMRTlCUVZvc1IwRkJiMElzVlVGQlV5eERRVUZVTEVWQlFWYzdRVUZCUXl4UlFVRkpMRU5CUVVvN1FVRkJRU3hSUVVGTkxFTkJRVTQ3UVVGQlFTeFJRVUZSTEVOQlFWSTdRVUZCUVN4UlFVRlZMRU5CUVZZN1FVRkJRU3hSUVVGWkxFbEJRVVVzU1VGQlpEdEJRVUZCTEZGQlFXMUNMRWxCUVVVc1EwRkJja0lzUTBGQmRVSXNUMEZCVHl4RlFVRkZMRmRCUVVZc1IwRkJZeXhEUVVGa0xFVkJRV2RDTEVsQlFVVXNSVUZCUlN4UFFVRkdMRU5CUVZVc1MwRkJWaXhIUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhEUVVGRExFTkJRUzlDTEVOQlFXeENMRVZCUVc5RUxFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRkZCUVdZc1NVRkJlVUlzUlVGQlJTeFZRVUZHTEVkQlFXRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJka0lzUzBGQmMwTXNSVUZCUlN4WFFVRkdMRWRCUVdNc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZGtJc1IwRkJiME1zUTBGQlF5eERRVUZ1UkN4RlFVRnhSQ3hKUVVGRkxFTkJRVU1zUTBGQmVFUXNSVUZCTUVRc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCWml4SlFVRjVRaXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4VlFVRjRReXhMUVVGeFJDeE5RVUZKTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVdRc1IwRkJNa0lzU1VGQlJTeERRVUZETEVkQlFUbENMRWRCUVd0RExFMUJRVWtzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCWkN4TFFVRTJRaXhKUVVGRkxFTkJRVU1zUTBGQmFFTXNRMEZCZGtZc1EwRkJNVVFzUlVGQmNVd3NTVUZCUlN4SlFVRkZMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRVm9zUjBGQmVVSXNRMEZCZEZBc1IwRkJlVkFzUlVGQlJTeFZRVUZHTEVkQlFXRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1kwRkJka0lzU1VGQmRVTXNRMEZCZGtNc1NVRkJNRU1zU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4alFVRmFMRWRCUVRKQ0xFVkJRVVVzVlVGQmRrVXNTVUZCYlVZc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCTVVjc1MwRkJlVWdzU1VGQlJTeEZRVUZGTEZWQlFVb3NTVUZCWjBJc1JVRkJSU3hYUVVGR0xFZEJRV01zUTBGQlF5eEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRWxCUVhkQ0xFbEJRVVVzUlVGQlJTeFZRVUUxUWl4RFFVRkVMRWxCUVRCRExFVkJRVVVzVlVGQk5VTXNSMEZCZFVRc1EwRkJReXhEUVVGMFJTeEZRVUYzUlN4SlFVRkZMRU5CUVVNc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQlZpeEpRVUYzUWl4SlFVRkZMRVZCUVVVc1ZVRkJOVUlzUTBGQlJDeEpRVUV3UXl4RFFVRXhReXhIUVVFMFF5eERRVUZETEVOQlFYWkpMRXRCUVRKSkxFVkJRVVVzVjBGQlJpeEhRVUZqTEVWQlFVVXNWVUZCUml4SFFVRmhMRVZCUVVVc1QwRkJSaXhEUVVGVkxHTkJRWFpDTEVkQlFYTkRMRVZCUVVVc1ZVRkJlRU1zUjBGQmJVUXNRMEZCUXl4RFFVRnNSU3hGUVVGdlJTeEpRVUZGTEVWQlFVVXNWVUZCUml4SFFVRmhMRVZCUVVVc1QwRkJSaXhEUVVGVkxHTkJRWFpDTEVkQlFYTkRMRU5CUVhSRExFZEJRWGRETEVOQlFVTXNRMEZCTVZBc1EwRkJla2dzUTBGQmJGSXNTVUZCTUc5Q0xFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCV2l4SFFVRjVRaXhGUVVGRkxGVkJRVE5DTEV0QlFYZERMRVZCUVVVc1YwRkJSaXhIUVVGakxFTkJRVU1zU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRmFMRWRCUVhsQ0xFVkJRVVVzVlVGQk5VSXNTVUZCZDBNc1JVRkJSU3hWUVVGNFJDeEZRVUZ0UlN4SlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZhTEVkQlFYbENMRVZCUVVVc1ZVRkJOVUlzU1VGQmQwTXNRMEZCY2tvc1EwRkJPWEpDTEVWQlFYTXhRaXhGUVVGRkxGVkJRVVlzU1VGQll5eEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRjRRaXhMUVVGMVF5eEZRVUZGTEZkQlFVWXNSMEZCWXl4RFFVRmtMRVZCUVdkQ0xFbEJRVVVzUTBGQmVrUXNRMEZCZERGQ0xFVkJRV3MxUWl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFZRVUZtTEVsQlFUSkNMRVZCUVVVc1ZVRkJSaXhKUVVGakxFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFXNUVMRWRCUVdkRkxFVkJRVVVzVjBGQlJpeEhRVUZqTEVWQlFVVXNWVUZCUml4SFFVRmhMRXRCUVVzc1MwRkJUQ3hEUVVGWExFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFYSkNMRU5CUVdJc1IwRkJaMFFzUTBGQmFFUXNSMEZCYTBRc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFZRVUZtTEVkQlFUQkNMRU5CUVRGS0xFZEJRVFJLTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGVkJRV1lzU1VGQk1rSXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQk1VTXNSMEZCYlVRc1JVRkJSU3hYUVVGR0xFbEJRV1VzUlVGQlJTeFZRVUZHTEVkQlFXRXNTMEZCU3l4TFFVRk1MRU5CUVZjc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQlZpeEhRVUYxUWl4RFFVRnNReXhEUVVGaUxFZEJRV3RFTEVWQlFVVXNWVUZCZEVnc1IwRkJhVWtzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1ZVRkJaaXhMUVVFMFFpeEZRVUZGTEZkQlFVWXNSMEZCWXl4RFFVRmtMRVZCUVdkQ0xFVkJRVVVzVjBGQlJpeEpRVUZsTEVWQlFVVXNWVUZCUml4SFFVRmhMRXRCUVVzc1MwRkJUQ3hEUVVGWExFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFWWXNSMEZCZFVJc1EwRkJiRU1zUTBGQmVFVXNRMEZCTDNGRExFVkJRVFo0UXl4SlFVRkZMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFXWXNSMEZCZDBJc1NVRkJSU3hGUVVGRkxGVkJRVW9zUjBGQlpTeERRVUZETEVOQlFXaENMRWRCUVd0Q0xFVkJRVVVzVjBGQk5VTXNSMEZCZDBRc1NVRkJSU3hEUVVGR0xFZEJRVWtzUTBGQlF5eERRVUZNTEVkQlFVOHNRMEZCT1RGRExFVkJRV2N5UXl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGhRVUZtTEV0QlFTdENMRWxCUVVVc1JVRkJSU3hWUVVGR0xFbEJRV01zUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZUVJc1NVRkJjME1zUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1VVRkJja1FzUjBGQk9FUXNSVUZCUlN4WFFVRkdMRU5CUVdNc1VVRkJaQ3hEUVVGMVFpeGpRVUYyUWl4RlFVRjFReXhGUVVGMlF5eERRVUV3UXl4RFFVRXhReXhEUVVFNVJDeEhRVUV5Unl4RlFVRkZMRmRCUVVZc1EwRkJZeXhSUVVGa0xFTkJRWFZDTEdOQlFYWkNMRVZCUVhWRExFVkJRWFpETEVOQlFUQkRMRWxCUVVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmRFUXNRMEZCTjBjc1JVRkJhVXdzU1VGQlJTeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hIUVVGbUxFZEJRVzFDTEVWQlFVVXNRMEZCUml4SlFVRkxMRU5CUVVNc1EwRkJSQ3hKUVVGSkxFVkJRVVVzVjBGQlJpeERRVUZqTEV0QlFXUXNTMEZCYzBJc1JVRkJSU3hEUVVGR0xFVkJRVXNzVlVGQk0wSXNSMEZCYzBNc1JVRkJSU3hMUVVGR0xFVkJRVEZETEVOQlFVd3NSMEZCTUVRc1EwRkJOMFVzUjBGQkswVXNSVUZCUlN4RFFVRkdMRWxCUVVzc1EwRkJReXhEUVVGRUxFZEJRVWNzUlVGQlJTeERRVUZHTEVWQlFVc3NWVUZCWWl4SFFVRjNRaXhEUVVFeFVpeEZRVUUwVWl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFZRVUZtTEV0QlFUUkNMRWxCUVVVc1JVRkJSU3hWUVVGR0xFbEJRV01zUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZUVJc1NVRkJjME1zUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1VVRkJja1FzUjBGQk9FUXNSVUZCUlN4WFFVRkdMRU5CUVdNc1VVRkJaQ3hEUVVGMVFpeGpRVUYyUWl4RlFVRjFReXhGUVVGMlF5eERRVUV3UXl4RFFVRXhReXhEUVVFNVJDeEhRVUV5Unl4RlFVRkZMRmRCUVVZc1EwRkJZeXhSUVVGa0xFTkJRWFZDTEdOQlFYWkNMRVZCUVhWRExFVkJRWFpETEVOQlFUQkRMRWxCUVVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQldpeEhRVUY1UWl4RFFVRnVSU3hEUVVFM1J5eEZRVUZ0VEN4SlFVRkZMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEVkQlFXWXNSMEZCYlVJc1JVRkJSU3hEUVVGR0xFbEJRVXNzUTBGQlF5eERRVUZFTEVsQlFVa3NSVUZCUlN4WFFVRkdMRU5CUVdNc1MwRkJaQ3hMUVVGelFpeEZRVUZGTEVOQlFVWXNSVUZCU3l4VlFVRXpRaXhIUVVGelF5eEZRVUZGTEV0QlFVWXNSVUZCTVVNc1EwRkJUQ3hIUVVFd1JDeERRVUUzUlN4SFFVRXJSU3hGUVVGRkxFTkJRVVlzU1VGQlN5eERRVUZETEVOQlFVUXNSMEZCUnl4RlFVRkZMRU5CUVVZc1JVRkJTeXhWUVVGaUxFZEJRWGRDTEVOQlFUVlNMRVZCUVRoU0xFdEJRVWNzUTBGQlF5eEZRVUZGTEV0QlFVWXNRMEZCVVN4TFFVRlNMRXRCUVdkQ0xFVkJRVVVzVlVGQlJpeEZRVUZxUWl4SlFVRnBReXhEUVVFNVZpeERRVUV6VkN4RFFVRm9Na01zUlVGQk5pOUVMRU5CUVhCblJUdEJRVUZ6WjBVc1IwRkJhSEZwUWl4RlFVRnBjV2xDTEVWQlFVVXNVMEZCUml4RFFVRlpMRk5CUVZvc1IwRkJjMElzUlVGQlJTeFRRVUZHTEVOQlFWa3NZMEZCV2l4SFFVRXlRaXhWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVUZETEZkQlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1EwRkJZaXhEUVVGUU8wRkJRWFZDTEVkQlFYSjJhVUlzUlVGQmMzWnBRaXhGUVVGRkxGTkJRVVlzUTBGQldTeHRRa0ZCV2l4SFFVRm5ReXhaUVVGVk8wRkJRVU1zVVVGQlNTeERRVUZLTzBGQlFVRXNVVUZCVFN4SlFVRkZMRWxCUVZJN1FVRkJRU3hSUVVGaExFbEJRVVVzUTBGQlpqdEJRVUZCTEZGQlFXbENMRWxCUVVVc1EwRkJia0k3UVVGQlFTeFJRVUZ4UWl4SlFVRkZMRVZCUVhaQ0xFTkJRVEJDTEV0QlFVa3NRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQlppeEhRVUYzUWl4SlFVRkZMRVZCUVVVc1ZVRkJOVUlzU1VGQmQwTXNTVUZCUlN4RFFVRkRMRU5CUVVRc1IwRkJSeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZtTEVWQlFUaENMRWxCUVVVc1EwRkJReXhEUVVGRUxFZEJRVWNzUlVGQlJTeFBRVUZHTEVOQlFWVXNZMEZCTjBNc1JVRkJORVFzU1VGQlJTeEpRVUZGTEVWQlFVVXNWVUZCTVVjc1EwRkJTaXhGUVVFd1NDeEpRVUZGTEVOQlFUVklPMEZCUVN0SUxGRkJRVVVzU1VGQlJpeERRVUZQTEVOQlFWQXNSMEZCVlN4SlFVRkZMRWxCUVVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQmVFSXNSVUZCZFVNc1MwRkJSeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZXTEVsQlFUQkNMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRWEJETEVkQlFXbEVMRVZCUVVVc1QwRkJSaXhEUVVGVkxHTkJRVE5FTEVkQlFUQkZMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRVGxJTzBGQlFTOUlMRXRCUVRCUkxFOUJRVThzUTBGQlVEdEJRVUZUTEVkQlFUbHJha0lzUlVGQksydHFRaXhGUVVGRkxGTkJRVVlzUTBGQldTeFJRVUZhTEVkQlFYRkNMRmxCUVZVN1FVRkJReXhYUVVGUExFbEJRVkE3UVVGQldTeEhRVUV6Ym1wQ0xFVkJRVFJ1YWtJc1JVRkJSU3hUUVVGR0xFTkJRVmtzWVVGQldpeEhRVUV3UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hEUVVGS08wRkJRVUVzVVVGQlRTeERRVUZPTzBGQlFVRXNVVUZCVVN4SlFVRkZMRWxCUVZZc1EwRkJaU3hQUVVGUExFbEJRVVVzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1ZVRkJaaXhIUVVFd1FpeEZRVUZGTEZWQlFVWXNSMEZCWVN4TFFVRkxMRXRCUVV3c1EwRkJWeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZXTEVkQlFYVkNMRU5CUVd4RExFTkJRWFpETEVkQlFUUkZMRU5CUVRsRkxFVkJRV2RHTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRV1lzU1VGQk5rSXNSVUZCUlN4WFFVRkdMRU5CUVdNc1NVRkJaQ3hEUVVGdFFpeGpRVUZ1UWl4RlFVRnRReXhKUVVGdVF5eERRVUYzUXl4VlFVRlRMRU5CUVZRc1JVRkJWeXhEUVVGWUxFVkJRV0U3UVVGQlF5eFZRVUZITEVWQlFVVXNWVUZCUml4SFFVRmhMRU5CUVdJc1IwRkJaU3hGUVVGRkxFTkJRVVlzUlVGQlN5eFZRVUZNTEV0QlFXdENMRU5CUVdwRExFZEJRVzFETEVOQlFVTXNRMEZCUkN4SFFVRkhMRVZCUVVVc1UwRkJNME1zUlVGQmNVUXNUMEZCVHl4SlFVRkZMRU5CUVVZc1JVRkJTU3hEUVVGRExFTkJRVm83UVVGQll5eExRVUY2U0N4SFFVRXlTQ3hMUVVGTExFZEJRVXdzUTBGQlV5eEZRVUZGTEVOQlFVWXNSVUZCU3l4SlFVRk1MRU5CUVZVc2EwSkJRVllzU1VGQk9FSXNSVUZCUlN4WlFVRjZReXhMUVVGM1JDeERRVUZvVGl4SlFVRnRUaXhGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZ3VkR0QlFVRnRWU3hIUVVGdUwycENMRVZCUVc4dmFrSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1NVRkJXaXhIUVVGcFFpeEZRVUZGTEZOQlFVWXNRMEZCV1N4VFFVRmFMRWRCUVhOQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRk5CUVVzc1YwRkJUQ3hEUVVGcFFpeEZRVUZETEUxQlFVc3NSVUZCUXl4VFFVRlJMRTlCUVZRc1JVRkJhVUlzVDBGQlRTeFRRVUZUTEVOQlFWUXNRMEZCZGtJc1JVRkJUaXhGUVVGcVFpeEZRVUUwUkN4RFFVRTFSRHRCUVVFclJDeEhRVUY0Yld0Q0xFVkJRWGx0YTBJc1JVRkJSU3hUUVVGR0xFTkJRVmtzU1VGQldpeEhRVUZwUWl4VlFVRlRMRU5CUVZRc1JVRkJWenRCUVVGRExGRkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFWY3NSVUZCUlN4RlFVRkZMRTlCUVVvc1JVRkJZU3hSUVVGaUxFTkJRWE5DTEcxQ1FVRjBRaXhOUVVFMlF5eEZRVUZGTEVWQlFVVXNUMEZCU2l4RlFVRmhMRkZCUVdJc1EwRkJjMElzYlVKQlFYUkNMRWRCUVRKRExFVkJRVVVzVTBGQlJpeEZRVUV6UXl4RlFVRjVSQ3hGUVVGRkxGRkJRVVlzUlVGQmVrUXNSVUZCYzBVc1JVRkJSU3hSUVVGR0xFVkJRWFJGTEVWQlFXMUdMRVZCUVVVc1UwRkJSaXhGUVVGdVJpeEZRVUZwUnl4RlFVRkZMRlZCUVVZc1JVRkJha2NzUlVGQlowZ3NSVUZCUlN4blFrRkJSaXhGUVVGb1NDeEZRVUZ4U1N4RlFVRkZMRmxCUVVZc1JVRkJja2tzUlVGQmMwb3NSVUZCUlN4VlFVRkdMRVZCUVhSS0xFVkJRWEZMTEVWQlFVVXNaVUZCUml4RFFVRnJRaXhEUVVGRExFTkJRVzVDTEVOQlFYSkxMRVZCUVRKTUxFVkJRVVVzV1VGQlJpeEZRVUY0VHl4SFFVRXdVQ3hMUVVGSExFVkJRVVVzVDBGQlJpeERRVUZWTEU5QlFWWXNRMEZCYTBJc1RVRkJiRUlzUlVGQmVVSXNRMEZCUXl4RFFVRkVMRU5CUVhwQ0xFTkJRVGRRTEVWQlFUSlNMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEdGQlFXWXNTVUZCT0VJc1JVRkJSU3hQUVVGR0xFVkJRWHBVTEVWQlFYRlZMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRVllzUzBGQmNVSXNSVUZCUlN4TlFVRkdMRWRCUVZNc1EwRkJReXhEUVVGV0xFVkJRVmtzUlVGQlJTeFJRVUZHTEVWQlFXcERMRU5CUVhKVk8wRkJRVzlZTEVkQlFYSm5iRUlzUlVGQmMyZHNRaXhGUVVGRkxGTkJRVVlzUTBGQldTeFBRVUZhTEVkQlFXOUNMRmxCUVZVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRqdEJRVUZCTEZGQlFWY3NTVUZCUlN4TFFVRkxMRWxCUVV3c1EwRkJWU3hGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRnFReXhEUVVGaU8wRkJRVUVzVVVGQk5FUXNTVUZCUlN4RlFVRkZMRzFDUVVGR0xFZEJRWGRDTEUxQlFYaENMRU5CUVN0Q0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNZVUZCVHl4TFFVRkhMRU5CUVVnc1NVRkJUU3hKUVVGRkxFVkJRVVVzVlVGQmFrSTdRVUZCTkVJc1MwRkJka1VzUTBGQk9VUXNRMEZCZFVrc1JVRkJSU3hQUVVGR0xFTkJRVlVzUjBGQlZpeERRVUZqTEVWQlFVVXNWMEZCUml4RFFVRmpMRWxCUVdRc1EwRkJiVUlzWlVGQmJrSXNRMEZCWkN4RlFVRnRSQ3hKUVVGdVJDeERRVUYzUkN4RlFVRkRMR1ZCUVdNc1RVRkJaaXhGUVVGelFpeFZRVUZUTEVsQlFTOUNMRVZCUVhoRUxFVkJRVGhHTEVsQlFUbEdMRU5CUVcxSExEQkNRVUZ1Unl4RlFVRXJTQ3hKUVVFdlNDeERRVUZ2U1N4RlFVRkRMRlZCUVZNc1NVRkJWaXhGUVVGd1NTeEhRVUZ4U2l4VFFVRlBMRVZCUVVVc1MwRkJWQ3hMUVVGcFFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4SFFVRldMRU5CUVdNc1JVRkJSU3hYUVVGR0xFTkJRV01zU1VGQlpDeERRVUZ0UWl4bFFVRnVRaXhEUVVGa0xFVkJRVzFFTEVsQlFXNUVMRU5CUVhkRUxGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNWVUZCU1N4SlFVRkZMRVZCUVVVc1QwRkJSaXhEUVVGVkxFTkJRVllzUTBGQlRpeERRVUZ0UWl4RlFVRkZMRWxCUVVZc1JVRkJVU3hKUVVGU0xFTkJRV0VzUlVGQlF5eE5RVUZMTEZWQlFVNHNSVUZCYVVJc1NVRkJSeXhuUWtGQll5eEZRVUZGTEZkQlFXaENMRWRCUVRSQ0xFTkJRV2hFTEVWQlFXdEVMRlZCUVZNc1EwRkJReXhEUVVFMVJDeEZRVUZpTEVkQlFUWkZMRU5CUVVNc1EwRkJSQ3hMUVVGTExFTkJRVXdzU1VGQlVTeEZRVUZGTEVsQlFVWXNSVUZCVVN4SlFVRlNMRU5CUVdFc1JVRkJReXh2UWtGQmJVSXNkMEpCUVhOQ0xFVkJRVVVzVjBGQmVFSXNSMEZCYjBNc1EwRkJlRVFzUlVGQllpeERRVUZ5Ump0QlFVRTRTaXhMUVVGeVVDeEhRVUYxVUN4RlFVRkZMRXRCUVVZc1EwRkJVU3hKUVVGU0xFTkJRV0VzVFVGQllpeEZRVUZ2UWl4VFFVRndRaXhGUVVFclFpeEpRVUV2UWl4RFFVRnZReXhKUVVGd1F5eEZRVUV3UXl4SlFVRXhReXhEUVVFclF5eFZRVUZUTEVOQlFWUXNSVUZCVnp0QlFVRkRMRlZCUVVrc1NVRkJSU3hGUVVGRkxFTkJRVVlzUTBGQlRpeERRVUZYTEVWQlFVVXNTVUZCUml4RlFVRlJMRWxCUVZJc1EwRkJZU3hGUVVGRExFMUJRVXNzWTBGQlRpeEZRVUZpTEVkQlFXOURMRVZCUVVVc1NVRkJSaXhGUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVWQlFYVkNMRXRCUVhaQ0xFZEJRU3RDTEVsQlFTOUNMRU5CUVc5RExFVkJRVU1zVFVGQlN5eExRVUZPTEVWQlFWa3NTVUZCUnl4M1FrRkJjMElzUlVGQlJTeFhRVUY0UWl4SFFVRnZReXhEUVVGdVJDeEZRVUZ4UkN4cFFrRkJaMElzWjBKQlFXTXNSVUZCUlN4WFFVRm9RaXhIUVVFMFFpeERRVUZxUnl4RlFVRnRSeXhqUVVGaExFbEJRVVVzUTBGQlJpeEhRVUZKTEUxQlFVb3NSMEZCVnl4RFFVRXpTQ3hGUVVFMlNDeHBRa0ZCWjBJc1NVRkJOMGtzUlVGQmEwb3NWVUZCVXl4SlFVRXpTaXhGUVVGd1F5eERRVUZ3UXp0QlFVRXdUeXhMUVVGb1ZDeEZRVUZyVkN4RlFVRnNWQ3hEUVVGeFZDeEZRVUZGTEZsQlFYWlVMRVZCUVhGVkxFbEJRWEpWTEVOQlFUQlZMRkZCUVRGVkxFVkJRVzlXTEVsQlFYQldMRU5CUVhsV0xFVkJRVU1zYVVKQlFXZENMRTFCUVdwQ0xFVkJRWGRDTEZWQlFWTXNSMEZCYWtNc1JVRkJlbFlzUlVGQloxa3NSMEZCYUZrc1JVRkJlRkVzUTBGQmNrb3NRMEZCYjNsQ0xFdEJRVWtzU1VGQlNTeEpRVUZGTEVWQlFVVXNXVUZCVWl4RlFVRnhRaXhKUVVGRkxFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZGtNc1JVRkJiMFFzU1VGQlJTeERRVUYwUkN4RlFVRjNSQ3hIUVVGNFJEdEJRVUUwUkN4UlFVRkZMRTlCUVVZc1EwRkJWU3hGUVVGV0xFTkJRV0VzUTBGQllpeEZRVUZuUWl4SlFVRm9RaXhEUVVGeFFpeFZRVUZ5UWl4RlFVRm5ReXhEUVVGb1F6dEJRVUUxUkN4TFFVRXJSaXhGUVVGRkxGZEJRVVk3UVVGQlowSXNSMEZCTDJwdVFpeEZRVUZuYTI1Q0xFVkJRVVVzVTBGQlJpeERRVUZaTEdWQlFWb3NSMEZCTkVJc1dVRkJWVHRCUVVGRExGRkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFWY3NRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzVFVGQlppeEpRVUYxUWl4RlFVRkZMRlZCUVVZc1IwRkJZU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUU1UXl4TFFVRTJSQ3hGUVVGRkxGVkJRVVlzUTBGQllTeEhRVUZpTEVOQlFXbENMR0ZCUVdwQ0xFVkJRV2RETEVWQlFXaERMRU5CUVcxRExHRkJRVzVETEVWQlFXbEVMRVZCUVVNc1UwRkJVU3hWUVVGVUxFVkJRV3BFTEVWQlFYTkZMRVZCUVVVc1YwRkJlRVVzUjBGQmNVWXNSVUZCUlN4VlFVRkdMRU5CUVdFc1IwRkJZaXhEUVVGcFFpeGhRVUZxUWl4RlFVRm5ReXhGUVVGb1F5eERRVUZ0UXl4aFFVRnVReXhGUVVGcFJDeEZRVUZETEZOQlFWRXNUVUZCVkN4RlFVRnFSQ3hGUVVGclJTeEZRVUZGTEZkQlFYQkZMRU5CUVhKR0xFVkJRWE5MTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxHRkJRV1lzUzBGQkswSXNSVUZCUlN4VlFVRkdMRU5CUVdFc1JVRkJZaXhEUVVGblFpeGxRVUZvUWl4RlFVRm5ReXhGUVVGRkxGVkJRV3hETEVkQlFUaERMRVZCUVVVc1ZVRkJSaXhEUVVGaExFVkJRV0lzUTBGQlowSXNaVUZCYUVJc1JVRkJaME1zUlVGQlJTeFZRVUZzUXl4RFFVRTNSU3hEUVVGdVR6dEJRVUZuVnl4SFFVRnNPVzVDTEVWQlFXMDVia0lzUlVGQlJTeFRRVUZHTEVOQlFWa3NZVUZCV2l4SFFVRXdRaXhaUVVGVk8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNHNRMEZCVnl4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeEpRVUZtTEV0QlFYTkNMRVZCUVVVc1NVRkJSaXhGUVVGUExFVkJRVVVzUzBGQlZDeEZRVUZuUWl4RlFVRm9RaXhEUVVGdFFpeGhRVUZ1UWl4RlFVRnBReXhGUVVGRExGTkJRVkVzVDBGQlZDeEZRVUZxUXl4RlFVRnRSQ3hGUVVGRkxGZEJRWEpFTEVkQlFXdEZMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEdGQlFXWXNTVUZCT0VJc1JVRkJSU3hMUVVGR0xFTkJRVkVzUlVGQlVpeERRVUZYTEdWQlFWZ3NSVUZCTWtJc1JVRkJSU3hWUVVFM1FpeERRVUYwU0N4SFFVRm5TeXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4SlFVRm1MRWxCUVhGQ0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR2RDUVVGd1F5eEpRVUZ6UkN4RlFVRkZMRWxCUVVZc1JVRkJUeXhGUVVGRkxFdEJRVlFzUlVGQlowSXNSVUZCYUVJc1EwRkJiVUlzYTBKQlFXNUNMRVZCUVhORExFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFVVXNVMEZCVml4RlFVRnZRaXhEUVVGd1FpeEZRVUZ6UWl4RFFVRkRMRU5CUVhaQ0xFTkJRWFJETEVWQlFXbEZMRVZCUVdwRkxFTkJRVzlGTEd0Q1FVRndSU3hGUVVGMVJpeEZRVUZGTEV0QlFVWXNRMEZCVVN4RlFVRkZMRk5CUVZZc1JVRkJiMElzUTBGQmNFSXNSVUZCYzBJc1EwRkJReXhEUVVGMlFpeERRVUYyUml4RFFVRjBUanRCUVVGM1ZTeEhRVUV6TUc5Q0xFVkJRVFF3YjBJc1JVRkJSU3hUUVVGR0xFTkJRVmtzWlVGQldpeEhRVUUwUWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTRzUTBGQlZ5eEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRXRCUVhsQ0xFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFWSXNRMEZCVnl4clFrRkJXQ3hGUVVFNFFpeEZRVUZGTEV0QlFVWXNRMEZCVVN4RlFVRkZMRk5CUVZZc1JVRkJiMElzUTBGQmNFSXNSVUZCYzBJc1EwRkJReXhEUVVGMlFpeERRVUU1UWl4SFFVRjVSQ3hGUVVGRkxFdEJRVVlzUTBGQlVTeEZRVUZTTEVOQlFWY3NhMEpCUVZnc1JVRkJPRUlzUlVGQlJTeExRVUZHTEVOQlFWRXNSVUZCUlN4VFFVRldMRVZCUVc5Q0xFTkJRWEJDTEVWQlFYTkNMRU5CUVVNc1EwRkJka0lzUTBGQk9VSXNRMEZCYkVZN1FVRkJORWtzUjBGQk1XZHdRaXhGUVVFeVozQkNMRVZCUVVVc1UwRkJSaXhEUVVGWkxHZENRVUZhTEVkQlFUWkNMRmxCUVZVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRpeERRVUZYTEVWQlFVVXNaVUZCUml4SlFVRnZRaXhGUVVGRkxHRkJRVVlzUlVGQmNFSXNSVUZCYzBNc1JVRkJSU3hsUVVGR0xFVkJRWFJETEVWQlFUQkVMRVZCUVVVc1MwRkJSaXhEUVVGUkxFVkJRVklzUTBGQlZ5eHJRMEZCV0N4RlFVRTRReXhGUVVGRExGRkJRVThzVDBGQlVpeEZRVUU1UXl4RlFVRXJSQ3hGUVVGRkxGbEJRV3BGTEVOQlFURkVMRVZCUVhsSkxFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFWSXNRMEZCVnl4cFEwRkJXQ3hGUVVFMlF5eEZRVUZETEZGQlFVOHNUVUZCVWl4RlFVRTNReXhGUVVFMlJDeEZRVUZGTEZsQlFTOUVMRU5CUVhwSkxFVkJRWE5PTEVWQlFVVXNTMEZCUml4RFFVRlJMRVZCUVZJc1EwRkJWeXc0UWtGQldDeEZRVUV3UXl4RlFVRkRMRkZCUVU4c1MwRkJVaXhGUVVFeFF5eEZRVUY1UkN4RlFVRkZMRmxCUVRORUxFTkJRWFJPTEVWQlFTdFNMRVZCUVVVc1MwRkJSaXhEUVVGUkxFVkJRVklzUTBGQlZ5eHZRMEZCV0N4RlFVRm5SQ3hGUVVGRExGRkJRVThzUzBGQlVpeEZRVUZvUkN4RlFVRXJSQ3hGUVVGRkxGbEJRV3BGTEVOQlFTOVNMRVZCUVRoWExFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFWSXNRMEZCVnl4aFFVRllMRVZCUVhsQ0xFVkJRVVVzV1VGQk0wSXNRMEZCT1Zjc1JVRkJkVm9zUlVGQlJTeFJRVUZHTEVWQlFWa3NSVUZCV2l4RFFVRmxMRVZCUVVVc1owSkJRV3BDTEVWQlFXdERMRVZCUVVVc1MwRkJSaXhEUVVGUkxFVkJRVVVzVlVGQlZpeEZRVUZ4UWl4RFFVRnlRaXhEUVVGc1F5eERRVUYyV2l4RlFVRnJaQ3hEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4aFFVRm1MRWxCUVRoQ0xFVkJRVVVzUzBGQlJpeERRVUZSTEVWQlFWSXNRMEZCVnl4bFFVRllMRVZCUVRKQ0xFVkJRVVVzVlVGQk4wSXNRMEZCYUdZc1JVRkJlV2hDTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxHRkJRV1lzU1VGQk9FSXNSVUZCUlN4RlFVRkZMRmRCUVVvc1JVRkJhVUlzVVVGQmFrSXNSMEZCTkVJc1JVRkJOVUlzUTBGQkswSXNZVUZCTDBJc1JVRkJOa01zUlVGQlJTeGhRVUV2UXl4RFFVRjJha0lzUlVGQmNXNUNMRVZCUVVVc1RVRkJSaXhGUVVGVkxFVkJRVllzUTBGQllTeHRRMEZCYVVNc1JVRkJSU3hYUVVGb1JDeEZRVUUwUkN4RlFVRkZMRXRCUVVZc1EwRkJVU3hGUVVGRkxHbENRVUZXTEVWQlFUUkNMRU5CUVRWQ0xFTkJRVFZFTEVOQlFYSnVRaXhGUVVGcGRFSXNSVUZCUlN4TlFVRkdMRVZCUVZVc1JVRkJWaXhEUVVGaExIZENRVUZ6UWl4RlFVRkZMRmRCUVhKRExFVkJRV2xFTEVWQlFVVXNTMEZCUml4RFFVRlJMRVZCUVVVc1RVRkJWaXhGUVVGcFFpeERRVUZxUWl4RFFVRnFSQ3hEUVVGcWRFSXNSVUZCZFhoQ0xFVkJRVVVzYlVKQlFVWXNSVUZCYzBJc1JVRkJSU3hYUVVGNFFpeEZRVUZ4UXl4RlFVRnlReXhEUVVGM1F5eFhRVUY0UXl4RlFVRnZSQ3hGUVVGRkxHTkJRWFJFTEVOQlFYWjRRaXhGUVVFMk1VSXNSVUZCUlN4TlFVRkdMRVZCUVZVc1JVRkJWaXhEUVVGaExITkNRVUZ2UWl4RlFVRkZMRmRCUVc1RExFVkJRU3RETEVWQlFVVXNWMEZCYWtRc1EwRkJOekZDTEVWQlFUSTFRaXhGUVVGRkxFVkJRVVVzVjBGQlNpeERRVUV6TlVJN1FVRkJORFpDTEVkQlFURXJjVUlzUlVGQk1pdHhRaXhGUVVGRkxGTkJRVVlzUTBGQldTeE5RVUZhTEVkQlFXMUNMRmxCUVZVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRpeERRVUZYTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFMUJRV1lzU1VGQmRVSXNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQk9VTXNTMEZCTmtRc1JVRkJSU3hWUVVGR0xFTkJRV0VzU1VGQllpeEpRVUZ2UWl4RlFVRkZMRlZCUVVZc1EwRkJZU3hKUVVGaUxFVkJRV3BHTEVkQlFYTkhMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEVsQlFXWXNTVUZCY1VJc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCTlVNc1NVRkJNRVFzUlVGQlJTeExRVUZHTEVOQlFWRXNTVUZCVWl4RlFVRm9TenRCUVVFclN5eEhRVUZ1YzNKQ0xFVkJRVzl6Y2tJc1JVRkJSU3hUUVVGR0xFTkJRVmtzVlVGQldpeEhRVUYxUWl4VlFVRlRMRU5CUVZRc1JVRkJWenRCUVVGRExGRkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFWY3NSVUZCUlN4TlFVRkdMRU5CUVZNc1QwRkJWQ3hEUVVGcFFpeExRVUZxUWl4RFFVRjFRaXgxUWtGQmRrSXNUVUZCYTBRc1QwRkJTeXhGUVVGRkxFOUJRVkFzU1VGQlowSXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzWVVGQkwwSXNSMEZCTmtNc1JVRkJSU3hYUVVGR0xFTkJRV01zUlVGQlF5eE5RVUZMTEVWQlFVTXNVMEZCVVN4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeEhRVUZtTEVkQlFXMUNMRTFCUVc1Q0xFZEJRVEJDTEZWQlFXNURMRVZCUVU0c1JVRkJaQ3hEUVVFM1F5eEhRVUZyU0N4UFFVRkxMRVZCUVVVc1QwRkJVQ3hKUVVGblFpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hoUVVFdlFpeEpRVUU0UXl4RlFVRkZMRmRCUVVZc1EwRkJZeXhGUVVGRExFMUJRVXNzUlVGQlF5eFRRVUZSTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFZEJRV1lzUjBGQmJVSXNWVUZCYmtJc1IwRkJPRUlzVFVGQmRrTXNSVUZCVGl4RlFVRmtMRU5CUVd4T08wRkJRWGRTTEVkQlFURm5jMElzUlVGQk1tZHpRaXhGUVVGRkxGTkJRVVlzUTBGQldTeFJRVUZhTEVkQlFYRkNMRmxCUVZVN1FVRkJReXhoUVVGVExFTkJRVlFzUTBGQlZ5eERRVUZZTEVWQlFXRTdRVUZCUXl4UlFVRkZMR2RDUVVGR0xFVkJRVzFDTEVOQlFXNUNMRVZCUVhOQ0xFbEJRWFJDTEVOQlFUSkNMRmxCUVZVN1FVRkJReXhaUVVGSkxFbEJRVVVzUlVGQlJTeEpRVUZHTEVOQlFVNDdRVUZCUVN4WlFVRmpMRWxCUVVVc1JVRkJSU3hKUVVGR0xFVkJRVkVzU1VGQlVpeERRVUZoTEZkQlFXSXNRMEZCYUVJN1FVRkJRU3haUVVFd1F5eEpRVUZGTEVWQlFVVXNTVUZCUml4RlFVRlJMRWxCUVZJc1EwRkJZU3hoUVVGaUxFTkJRVFZETzBGQlFVRXNXVUZCZDBVc1NVRkJSU3hGUVVGRkxFbEJRVVlzUlVGQlVTeEpRVUZTTEVOQlFXRXNXVUZCWWl4TFFVRTBRaXhGUVVGRkxFOUJRVVlzUTBGQlZTeEpRVUZXTEVOQlFXVXNXVUZCWml4RFFVRjBSenRCUVVGQkxGbEJRVzFKTEVsQlFVVXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFdEJRWFpDTEVOQlFYSkpMRU5CUVcxTExFVkJRVVVzVFVGQlJpeEhRVUZUTEZsQlFWVTdRVUZCUXl4WlFVRkZMRTlCUVVZc1EwRkJWU3hGUVVGRExGTkJRVkVzUTBGQlZDeEZRVUZXTEVWQlFYTkNMRWRCUVhSQ0xFVkJRVEJDTEZsQlFWVTdRVUZCUXl4clFrRkJTU3hGUVVGRkxFbEJRVVlzUTBGQlR5eFJRVUZRTEVWQlFXZENMRU5CUVdoQ0xFZEJRVzFDTEV0QlFVY3NSVUZCUlN4SlFVRkdMRU5CUVU4c1QwRkJVQ3hGUVVGbExFTkJRV1lzUTBGQk1VSXNSMEZCTmtNc1JVRkJSU3hKUVVGR0xFTkJRVThzUzBGQlVDeEZRVUZoTEVOQlFXSXNSVUZCWjBJc1QwRkJhRUlzUTBGQmQwSXNSVUZCUXl4VFFVRlJMRU5CUVZRc1JVRkJlRUlzUlVGQmIwTXNSMEZCY0VNc1JVRkJkME1zV1VGQlZUdEJRVUZETEdkQ1FVRkZMRlZCUVVZc1EwRkJZU3hyUTBGQllpeEZRVUZwUkN4WFFVRnFSQ3hEUVVFMlJDeGxRVUUzUkR0QlFVRTRSU3hoUVVGcVNTeERRVUUzUXl4RlFVRm5UQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeFBRVUZXTEVOQlFXdENMRmxCUVd4Q0xFVkJRU3RDTEVOQlFVTXNRMEZCUkN4RlFVRkhMRU5CUVVnc1JVRkJTeXhEUVVGTUxFTkJRUzlDTEVOQlFXaE1PMEZCUVhkT0xGZEJRVGRRTzBGQlFTdFFMRk5CUVc1U0xFVkJRVzlTTEVWQlFVVXNUMEZCUml4SFFVRlZMRmxCUVZVN1FVRkJReXhaUVVGRkxGVkJRVVlzUTBGQllTeFhRVUZpTEVWQlFUQkNMRmRCUVRGQ0xFTkJRWE5ETEdWQlFYUkRMRVZCUVhWRUxGRkJRWFpFTEVOQlFXZEZMSE5DUVVGb1JTeEhRVUYzUml4RlFVRkZMRTlCUVVZc1EwRkJWU3hQUVVGV0xFTkJRV3RDTEdWQlFXeENMRVZCUVd0RExFTkJRVU1zUTBGQlJDeEZRVUZITEVOQlFVZ3NSVUZCU3l4RFFVRk1MRU5CUVd4RExFTkJRWGhHTzBGQlFXMUpMRk5CUVRWaExFVkJRVFpoTEVWQlFVVXNSMEZCUml4SFFVRk5MRU5CUVc1aU8wRkJRWEZpTEU5QlFUbHVRanRCUVVGbmIwSXNVMEZCU1N4RFFVRktPMEZCUVVFc1VVRkJUU3hEUVVGT08wRkJRVUVzVVVGQlVTeERRVUZTTzBGQlFVRXNVVUZCVlN4SlFVRkZMRWxCUVZvc1EwRkJhVUlzU1VGQlJ5eERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hWUVVGbUxFZEJRVEJDTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRV1lzUjBGQmQwSXNTVUZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGR0xFbEJRV2RDTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1IwRkJkVUlzUTBGQmRrSXNSMEZCZVVJc1EwRkJla01zUTBGQlNDeEpRVUZuUkN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVFeFJDeEhRVUYxUlN4RFFVRnFSeXhKUVVGdlJ5eEpRVUZGTEV0QlFVc3NSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJWeXhGUVVGRkxGbEJRVVlzU1VGQlowSXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJWaXhIUVVGMVFpeERRVUYyUWl4SFFVRjVRaXhEUVVGNlF5eERRVUZZTEVOQlFVWXNSVUZCTUVRc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZXTEVkQlFYVkNMRU5CUVhaQ0xFZEJRWGxDTEVOQlFYcENMRWRCUVRKQ0xFTkJRVE5DTEVkQlFUWkNMRVZCUVVVc1dVRkJMMHdzUTBGQk1VSXNTVUZCZDA4c1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZXTEVkQlFXMUNMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRVllzUjBGQmRVSXNSVUZCUlN4WlFVRTFReXhIUVVGNVJDeEZRVUZGTEZsQlFUZEVMRVZCUVRCRkxFbEJRVVVzUzBGQlN5eEpRVUZNTEVOQlFWVXNTVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVGMFFpeERRVUUxUlN4RlFVRm5TQ3hEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4SlFVRm1MRXRCUVhOQ0xFbEJRVVVzUTBGQlJpeEpRVUZMTEVkQlFVd3NSVUZCVXl4TFFVRkhMRVZCUVVVc1ZVRkJUQ3hKUVVGcFFpeEhRVUZvUkN4RFFVRjRWaXhIUVVFNFdTeEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVZZc1EwRkJaU3hqUVVGbUxFVkJRU3RDTEV0QlFTOUNMRU5CUVhGRExFTkJRWEpETEVWQlFYVkRMRU5CUVhaRExFTkJRV2hhTEVWQlFUQmlMR3RDUVVGblFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4UlFVRjJaQ3hGUVVGblpTeExRVUZKTEVsQlFVa3NTVUZCUlN4SlFVRkZMRU5CUVZJc1JVRkJWU3hKUVVGRkxFTkJRVm9zUlVGQll5eEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVZZc1EwRkJaU3hqUVVGbUxFTkJRV2hDTEVWQlFTdERMRWxCUVVVc1EwRkJja1FzUlVGQmRVUXNTVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hqUVVGdVJTeEZRVUZyUml4SFFVRnNSanRCUVVGelJpeFZRVUZGTEVOQlFVWXNTMEZCVFN4SlFVRkZMRVZCUVVVc1ZVRkJSaXhIUVVGaExFTkJRWEpDTEVkQlFYZENMRWxCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUjBGQlJpeERRVUZOTEVWQlFVVXNSVUZCUml4RFFVRkxMRU5CUVV3c1EwRkJUaXhEUVVGSUxFVkJRVzFDTEVkQlFXNUNMRU5CUVhWQ0xFVkJRVVVzUlVGQlJpeERRVUZMTEVOQlFVd3NRMEZCZGtJc1EwRkJNVUlzUlVGQk1FUXNSMEZCTVVRc1JVRkJPRVFzUjBGQk9VUTdRVUZCZEVZc1MwRkJkMG9zUlVGQlJTeERRVUZHTEVkQlFVc3NSVUZCUlN4VlFVRkdMRWxCUVdNc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmVFSXNSMEZCY1VNc1JVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeEpRVUZXTEVOQlFXVXNZMEZCWml4RFFVRkdMRU5CUVhKRExFZEJRWFZGTEVWQlFVVXNXVUZCUml4SlFVRm5RaXhGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRjJReXhIUVVGdlJDeEZRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVZZc1EwRkJaU3hsUVVGbUxFVkJRV2RETEV0QlFXaERMRU5CUVhORExFTkJRWFJETEVWQlFYZERMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRV3hFTEVOQlFVWXNRMEZCY0VRc1IwRkJkVWdzVFVGQlNTeEZRVUZGTEZsQlFVNHNTVUZCYjBJc1JVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeEpRVUZXTEVOQlFXVXNaVUZCWml4RlFVRm5ReXhMUVVGb1F5eERRVUZ6UXl4RFFVRkRMRU5CUVVRc1IwRkJSeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUZ1UkN4RFFVRkdMRU5CUVhaT08wRkJRVEpTTEVkQlFUZHNka0lzUlVGQk9HeDJRaXhGUVVGRkxGTkJRVVlzUTBGQldTeFZRVUZhTEVkQlFYVkNMRmxCUVZVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRpeERRVUZYTEVWQlFVVXNWMEZCUml4SlFVRm5RaXhGUVVGRkxGZEJRVVlzUTBGQll5eEhRVUZrTEVOQlFXdENMRVZCUVVNc1UwRkJVU3hEUVVGVUxFVkJRV3hDTEVOQlFXaENMRVZCUVN0RExFVkJRVVVzVDBGQlJpeERRVUZWTEZkQlFWWXNRMEZCYzBJc1pVRkJkRUlzUTBGQkwwTXNSVUZCYzBZc1JVRkJSU3hOUVVGR0xFVkJRWFJHTEVWQlFXbEhMR3RDUVVGblFpeEZRVUZGTEU5QlFVWXNRMEZCVlN4UlFVRXhRaXhKUVVGdlF5eEZRVUZGTEcxQ1FVRkdMRVZCUVhKSk8wRkJRVFpLTEVkQlFYaDVka0lzUlVGQmVYbDJRaXhGUVVGRkxGTkJRVVlzUTBGQldTeEpRVUZhTEVkQlFXbENMRVZCUVVVc1UwRkJSaXhEUVVGWkxGTkJRVm9zUjBGQmMwSXNXVUZCVlR0QlFVRkRMRk5CUVVzc1YwRkJUQ3hEUVVGcFFpeEZRVUZETEUxQlFVc3NSVUZCUXl4VFFVRlJMRTFCUVZRc1JVRkJUaXhGUVVGcVFqdEJRVUV3UXl4SFFVRnlOSFpDTEVWQlFYTTBka0lzUlVGQlJTeFRRVUZHTEVOQlFWa3NhVUpCUVZvc1IwRkJPRUlzV1VGQlZUdEJRVUZETEZGQlFVa3NTVUZCUlN4SlFVRk9MRU5CUVZjc1JVRkJSU3hsUVVGR0xFbEJRVzlDTEVWQlFVVXNWMEZCUml4RlFVRndRanRCUVVGdlF5eEhRVUU1T1haQ0xFVkJRU3M1ZGtJc1JVRkJSU3hUUVVGR0xFTkJRVmtzUzBGQldpeEhRVUZyUWl4RlFVRkZMRk5CUVVZc1EwRkJXU3hWUVVGYUxFZEJRWFZDTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFVkJRVVVzWVVGQlJpeEpRVUZyUWl4RlFVRkZMRTFCUVVZc1IwRkJVeXhEUVVGRExFTkJRVFZDTzBGQlFUaENMRWRCUVRWcWQwSXNSVUZCTm1wM1FpeEZRVUZGTEZOQlFVWXNRMEZCV1N4SlFVRmFMRWRCUVdsQ0xFVkJRVVVzVTBGQlJpeERRVUZaTEZOQlFWb3NSMEZCYzBJc1dVRkJWVHRCUVVGRExGRkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFWY3NSVUZCUlN4UlFVRkdMRWxCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQlZpeEhRVUZ0UWl4RFFVRkRMRU5CUVdwRExFVkJRVzFETEVWQlFVVXNUVUZCUml4SFFVRlRMRU5CUVVNc1EwRkJOME1zUlVGQkswTXNSVUZCUlN4UlFVRkdMRWRCUVZjc1EwRkJReXhEUVVFelJDeEZRVUUyUkN4RlFVRkZMRmRCUVVZc1IwRkJZeXhEUVVGRExFTkJRVFZGTzBGQlFUaEZMRWRCUVhoemQwSXNSVUZCZVhOM1FpeEZRVUZGTEZOQlFVWXNRMEZCV1N4VFFVRmFMRWRCUVhOQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhGUVVGRkxGTkJRVVlzUzBGQll5eEZRVUZGTEU5QlFVWXNRMEZCVlN4UFFVRldMRU5CUVd0Q0xHRkJRV3hDTEVWQlFXZERMRU5CUVVNc1EwRkJSQ3hGUVVGSExFTkJRVWdzUTBGQmFFTXNSMEZCZFVNc1JVRkJSU3hUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUZ3UkN4RlFVRnpSQ3hGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRjJRaXhKUVVGeFF5eEZRVUZGTEZkQlFVWXNSVUZCTTBZc1JVRkJNa2NzUlVGQlJTeFRRVUZHTEVkQlFWa3NTVUZCZGtnc1JVRkJORWdzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCVml4SlFVRnZRaXhGUVVGRkxGRkJRVVlzUlVGQmFFb3NSVUZCTmtvc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNZVUZCWml4TFFVRXJRaXhGUVVGRkxFOUJRVVlzU1VGQldTeEZRVUZGTEU5QlFVWXNRMEZCVlN4aFFVRldMRWxCUVhsQ0xFVkJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNSMEZCVml4RFFVRmpMRVZCUVVVc1dVRkJhRUlzUTBGQlJpeEZRVUZwUXl4SlFVRnFReXhEUVVGelF5eFZRVUYwUXl4RlFVRnBSQ3hEUVVGcVJDeEZRVUZ2UkN4TFFVRndSQ3hGUVVGd1JTeERRVUV6U3p0QlFVRTJVeXhIUVVGdWFYaENMRVZCUVc5cGVFSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1NVRkJXaXhIUVVGcFFpeEZRVUZGTEZOQlFVWXNRMEZCV1N4VFFVRmFMRWRCUVhOQ0xGbEJRVlU3UVVGQlF5eFRRVUZMTEZkQlFVd3NRMEZCYVVJc1JVRkJReXhOUVVGTExFVkJRVU1zVTBGQlVTeFZRVUZVTEVWQlFVNHNSVUZCYWtJN1FVRkJPRU1zUjBGQmNHOTRRaXhGUVVGeGIzaENMRVZCUVVVc1UwRkJSaXhEUVVGWkxHTkJRVm9zUjBGQk1rSXNWVUZCVXl4RFFVRlVMRVZCUVZjN1FVRkJReXhOUVVGRkxHTkJRVVk3UVVGQmJVSXNSMEZCTDNKNFFpeEZRVUZuYzNoQ0xFVkJRVVVzVTBGQlJpeERRVUZaTEcxQ1FVRmFMRWRCUVdkRExGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCUlN4TFFVRkhMRU5CUVV3c1EwRkJUeXhKUVVGSkxFTkJRVW83UVVGQlFTeFJRVUZOTEVOQlFVNDdRVUZCUVN4UlFVRlJMRU5CUVZJN1FVRkJRU3hSUVVGVkxFTkJRVlk3UVVGQlFTeFJRVUZaTEVOQlFWbzdRVUZCUVN4UlFVRmpMRWxCUVVVc1NVRkJhRUk3UVVGQlFTeFJRVUZ4UWl4SlFVRkZMRVZCUVVVc1owSkJRVVlzUlVGQmJVSXNSVUZCUlN4UFFVRnlRaXhEUVVGMlFpeERRVUZ4UkN4RlFVRkZMRTFCUVVZc1NVRkJWU3hKUVVGRkxFVkJRVVVzUzBGQlJpeEZRVUZHTEVWQlFWa3NTVUZCUlN4RlFVRkZMRWxCUVVZc1EwRkJUeXhYUVVGUUxFTkJRV1FzUlVGQmEwTXNTVUZCUlN4RlFVRkZMRWxCUVVZc1EwRkJUeXhoUVVGUUxFTkJRWEJETEVWQlFUQkVMRWxCUVVVc1JVRkJSU3hKUVVGR0xFTkJRVThzV1VGQlVDeExRVUZ6UWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hKUVVGV0xFTkJRV1VzV1VGQlppeERRVUZzUml4RlFVRXJSeXhEUVVGRExFbEJRVVVzVTBGQlV5eGhRVUZVTEVOQlFYVkNMRXRCUVhaQ0xFTkJRVWdzUlVGQmEwTXNUVUZCYkVNc1IwRkJlVU1zV1VGQlZUdEJRVUZETEZsQlFVa3NSVUZCUlN4SlFVRkdMRU5CUVU4c1VVRkJVQ3hGUVVGblFpeERRVUZvUWl4SFFVRnRRaXhMUVVGSExFVkJRVVVzU1VGQlJpeERRVUZQTEU5QlFWQXNSVUZCWlN4RFFVRm1MRU5CUVRGQ0xFZEJRVFpETEVWQlFVVXNTVUZCUml4RFFVRlBMRXRCUVZBc1JVRkJZU3hEUVVGaUxFVkJRV2RDTEZWQlFXaENMRU5CUVRKQ0xHdERRVUV6UWl4RlFVRXJSQ3hYUVVFdlJDeERRVUV5UlN4bFFVRXpSU3hEUVVFM1F5eEZRVUY1U1N4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZtTEVsQlFTdENMRVZCUVVVc1YwRkJSaXhGUVVGNFN5eEZRVUYzVEN4RlFVRkZMRTlCUVVZc1EwRkJWU3hQUVVGV0xFTkJRV3RDTEZsQlFXeENMRVZCUVN0Q0xFTkJRVU1zUTBGQlJDeEZRVUZITEVOQlFVZ3NSVUZCU3l4RFFVRk1MRU5CUVM5Q0xFTkJRWGhNTEVWQlFXZFBMRVZCUVVVc2JVSkJRVVlzUlVGQmFFODdRVUZCZDFBc1MwRkJNMW9zUlVGQk5Gb3NSVUZCUlN4UFFVRkdMRWRCUVZVc1dVRkJWVHRCUVVGRExGVkJRVVVzUTBGQlJpeEhRVUZKTEZkQlFWY3NXVUZCVlR0QlFVRkRMRlZCUVVVc2JVSkJRVVlzUTBGQmMwSXNTVUZCUlN4RFFVRjRRanRCUVVFeVFpeFBRVUZxUkN4RlFVRnJSQ3hIUVVGc1JDeERRVUZLTEVsQlFUUkVMRVZCUVVVc1ZVRkJSaXhEUVVGaExGZEJRV0lzUlVGQk1FSXNWMEZCTVVJc1EwRkJjME1zWlVGQmRFTXNSVUZCZFVRc1VVRkJka1FzUTBGQlowVXNjMEpCUVdoRkxFZEJRWGRHTEVWQlFVVXNUMEZCUml4RFFVRlZMRTlCUVZZc1EwRkJhMElzWlVGQmJFSXNSVUZCYTBNc1EwRkJReXhEUVVGRUxFVkJRVWNzUTBGQlNDeEZRVUZMTEVOQlFVd3NRMEZCYkVNc1EwRkJlRVlzUlVGQmJVa3NSVUZCUlN4dFFrRkJSaXhGUVVFdlREdEJRVUYzVGl4TFFVRjZiMElzUlVGQk1HOUNMRVZCUVVVc1IwRkJSaXhIUVVGTkxFTkJRVEZ3UWl4SlFVRTJjRUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNUMEZCVml4RFFVRnJRaXhwUWtGQmJFSXNSVUZCYjBNc1EwRkJReXhEUVVGRUxFTkJRWEJETEVOQlFUZHdRanRCUVVGemMwSXNSMEZCT1N0NVFpeEZRVUVySzNsQ0xFVkJRVVVzVTBGQlJpeERRVUZaTEU5QlFWb3NSMEZCYjBJc1ZVRkJVeXhEUVVGVUxFVkJRVmM3UVVGQlF5eFJRVUZKTEVOQlFVbzdRVUZCUVN4UlFVRk5MRU5CUVU0N1FVRkJRU3hSUVVGUkxFbEJRVVVzU1VGQlZpeERRVUZsTEVsQlFVVXNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQmVrSXNSVUZCYzBNc1EwRkJReXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZZTEVsQlFYRkNMRVZCUVVVc1dVRkJSaXhIUVVGbExFTkJRWEJETEV0QlFYZERMRVZCUVVVc1dVRkJSaXhIUVVGbExFTkJRWFpFTEVOQlFYUkRMRVZCUVdkSExFVkJRVVVzVlVGQlJpeEpRVUZqTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVhoQ0xFdEJRWFZETEVWQlFVVXNXVUZCUml4SFFVRmxMRU5CUVhSRUxFTkJRV2hITEVWQlFYbEtMRWxCUVVVc1JVRkJSU3haUVVFM1NpeEZRVUV3U3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hEUVVGRExFTkJRVmdzUTBGQk1Vc3NSVUZCZDB3c1JVRkJSU3hOUVVGR0xFTkJRVk1zUTBGQlZDeEZRVUZYTEVWQlFVVXNVVUZCWWl4RlFVRnpRaXhGUVVGRExHTkJRV0VzUTBGQlpDeEZRVUYwUWl4RFFVRjRUQ3hGUVVGblR5eEZRVUZGTEVsQlFVWXNSVUZCYUU4c1JVRkJlVThzUzBGQlJ5eEZRVUZGTEZkQlFVWXNRMEZCWXl4RlFVRkRMRTFCUVVzc1JVRkJReXhUUVVGUkxFOUJRVlFzUlVGQmFVSXNUMEZCVFN4RFFVRjJRaXhGUVVGT0xFVkJRV1FzUlVGQkswTXNRMEZCUXl4RFFVRm9SQ3hEUVVFMVR6dEJRVUVyVWl4SFFVRTNlbnBDTEVWQlFUaDZla0lzUlVGQlJTeFRRVUZHTEVOQlFWa3NiVUpCUVZvc1IwRkJaME1zV1VGQlZUdEJRVUZETEZGQlFVa3NRMEZCU2p0QlFVRkJMRkZCUVUwc1EwRkJUanRCUVVGQkxGRkJRVkVzUTBGQlVqdEJRVUZCTEZGQlFWVXNTVUZCUlN4SlFVRmFPMEZCUVVFc1VVRkJhVUlzU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4VlFVRldMRWxCUVhOQ0xFbEJRWHBETEVOQlFUaERMRWxCUVVjc1dVRkJWU3hGUVVGRkxFbEJRVVlzUTBGQlR5eERRVUZRTEVOQlFWWXNTVUZCY1VJc1JVRkJSU3hOUVVFeFFpeEZRVUZwUXp0QlFVRkRMRkZCUVVVc1UwRkJSaXhIUVVGWkxFVkJRVVVzVDBGQlJpeERRVUZWTEZOQlFWWXNTVUZCY1VJc1VVRkJha01zUTBGQk1FTXNTMEZCU1N4RFFVRktMRWxCUVZNc1EwRkJWRHRCUVVGWExGbEJRVWNzU1VGQlJTeEZRVUZGTEZkQlFVWXNRMEZCWXl4TlFVRmtMRWRCUVhGQ0xFTkJRWFpDTEVWQlFYbENMRVZCUVVVc1kwRkJSaXhEUVVGcFFpeERRVUZxUWl4RFFVRTFRaXhGUVVGblJEdEJRVUZETEdWQlFVa3NTVUZCUlN4RlFVRkZMRU5CUVVZc1JVRkJTeXhWUVVGWUxFVkJRWE5DTEV0QlFVY3NRMEZCZWtJN1FVRkJORUlzWTBGQlJTeFhRVUZHTEVOQlFXTXNRMEZCWkN4TFFVRnJRaXhGUVVGRkxGZEJRVVlzUTBGQll5eERRVUZrTEUxQlFXMUNMRU5CUVhKRExFbEJRWGRETEVWQlFVVXNWMEZCUml4RFFVRmpMRTFCUVdRc1EwRkJjVUlzUTBGQmNrSXNSVUZCZFVJc1EwRkJka0lzUTBGQmVFTXNSVUZCYTBVc1IwRkJiRVU3UVVGQk5VSXNWMEZCYTBjc1JVRkJSU3hYUVVGR0xFTkJRV01zU1VGQlpDeERRVUZ0UWl4RFFVRnVRaXhIUVVGelFpeEZRVUZGTEd0Q1FVRkdMRU5CUVhGQ0xFTkJRWEpDTEVsQlFYZENMRVZCUVVVc1EwRkJSaXhGUVVGTExGRkJRVzVFTzBGQlFUUkVPMEZCUVRGT0xFOUJRVEJPTEVWQlFVVXNWMEZCUml4RFFVRmpMRWxCUVdRc1EwRkJiVUlzVlVGQlV5eERRVUZVTEVWQlFWY3NRMEZCV0N4RlFVRmhPMEZCUVVNc1pVRkJUeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFhRVUZXTEVkQlFYTkNMRWxCUVVVc1EwRkJlRUlzUjBGQk1FSXNTVUZCUlN4RFFVRnVRenRCUVVGeFF5eFBRVUYwUlR0QlFVRjNSVHRCUVVGRExFZEJRWFIzTUVJc1JVRkJkWGN3UWl4RlFVRkZMRk5CUVVZc1EwRkJXU3hOUVVGYUxFZEJRVzFDTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFVkJRVVVzVDBGQlJpeEhRVUZWTEVWQlFVVXNWMEZCUml4RFFVRmpMRkZCUVdRc1EwRkJkVUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNTMEZCYWtNc1JVRkJkME1zVVVGQmVFTXNRMEZCYVVRc1lVRkJha1FzUTBGQlZpeEZRVUV3UlN4RlFVRkZMRlZCUVVZc1IwRkJZU3hGUVVGRkxFOUJRVVlzUTBGQlZTeE5RVUZxUnl4RlFVRjNSeXhGUVVGRkxGbEJRVVlzU1VGQlowSXNSVUZCUlN4VlFVRnNRaXhKUVVFNFFpeE5RVUZKTEVWQlFVVXNXVUZCY0VNc1MwRkJiVVFzUlVGQlJTeFpRVUZHTEVkQlFXVXNSVUZCUlN4WlFVRkdMRWRCUVdVc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQk0wWXNRMEZCZUVjc1JVRkJiVTRzUlVGQlJTeFZRVUZHTEVsQlFXTXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJlRUlzUzBGQmRVTXNSVUZCUlN4WlFVRkdMRWRCUVdVc1EwRkJkRVFzUTBGQmJrNHNSVUZCTkZFc1JVRkJSU3h0UWtGQlJpeEZRVUUxVVN4RlFVRnZVeXhGUVVGRkxGRkJRVVlzUlVGQmNGTXNSVUZCYVZRc1JVRkJSU3hoUVVGR0xFVkJRV3BVTEVWQlFXMVZMRVZCUVVVc1YwRkJSaXhGUVVGdVZTeEZRVUZ0Vml4RlFVRkZMRmxCUVVZc1JVRkJibFlzUlVGQmIxY3NSVUZCUlN4bFFVRkdMRVZCUVhCWExFVkJRWGRZTEVWQlFVVXNVMEZCUml4RlFVRjRXQ3hGUVVGeldTeEZRVUZGTEZWQlFVWXNSVUZCZEZrc1JVRkJjVm9zUlVGQlJTeGhRVUZHTEVWQlFYSmFMRVZCUVhWaExFVkJRVVVzYTBKQlFVWXNSVUZCZG1Fc1JVRkJPR0lzUlVGQlJTeGxRVUZHTEVWQlFUbGlMRVZCUVd0a0xFVkJRVVVzWlVGQlJpeERRVUZyUWl4RFFVRkRMRU5CUVc1Q0xFVkJRWEZDTEVOQlFVTXNRMEZCZEVJc1EwRkJiR1FzUlVGQk1tVXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzWVVGQlppeEpRVUU0UWl4RlFVRkZMRVZCUVVVc1YwRkJTaXhGUVVGcFFpeFJRVUZxUWl4SFFVRTBRaXhGUVVFMVFpeERRVUVyUWl4aFFVRXZRaXhGUVVFMlF5eEZRVUZGTEdGQlFTOURMRU5CUVhwblFpeEZRVUYxYTBJc1JVRkJSU3hsUVVGR0xFTkJRV3RDTEZsQlFWVXNUMEZCVHl4RlFVRkZMRmxCUVc1Q0xFZEJRV2RETEVWQlFVVXNXVUZCYkVNc1IwRkJLME1zUTBGQmFrVXNRMEZCZG10Q0xFVkJRVEp2UWl4RlFVRkZMRmRCUVVZc1JVRkJNMjlDTEVWQlFUSndRaXhGUVVGRkxGbEJRVVlzUlVGQk0zQkNMRVZCUVRSeFFpeEZRVUZGTEUxQlFVWXNSMEZCVXl4RFFVRkRMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRV2h6UWl4RlFVRjVjMElzUlVGQlJTeFJRVUZHTEVWQlFYcHpRaXhGUVVGemRFSXNSVUZCUlN4UFFVRkdMRU5CUVZVc1QwRkJWaXhEUVVGclFpeFJRVUZzUWl4RlFVRXlRaXhEUVVGRExFTkJRVVFzUTBGQk0wSXNRMEZCZEhSQ08wRkJRWE4yUWl4SFFVRjBhVEpDTEVWQlFYVnBNa0lzUlVGQlJTeFRRVUZHTEVOQlFWa3NUVUZCV2l4SFFVRnRRaXhaUVVGVk8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNHNRMEZCVnl4RlFVRkZMRTFCUVVZc1JVRkJWU3hMUVVGV0xFOUJRVzlDTEVWQlFVVXNWMEZCZEVJc1MwRkJiME1zWVVGQllTeEZRVUZGTEZkQlFXWXNSMEZCTkVJc1JVRkJSU3hYUVVGR0xFZEJRV01zVDBGQlR5eFZRVUZRTEVOQlFXdENMRmxCUVZVN1FVRkJReXhSUVVGRkxGZEJRVVlzUjBGQll5eEZRVUZGTEUxQlFVWXNSVUZCVlN4TFFVRldMRVZCUVdRc1JVRkJaME1zUlVGQlJTeGxRVUZHTEVWQlFXaERMRVZCUVc5RUxFVkJRVVVzVTBGQlJpeEpRVUZoTEVWQlFVVXNWMEZCUml4RlFVRnFSVHRCUVVGcFJpeExRVUU1Unl4RlFVRXJSeXhGUVVFdlJ5eERRVUU1UlR0QlFVRnJUU3hIUVVGc2VESkNMRVZCUVcxNE1rSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1YwRkJXaXhIUVVGM1FpeEZRVUZGTEZOQlFVWXNRMEZCV1N4WFFVRmFMRWRCUVhkQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVN4RFFVRmlMRVZCUVdVN1FVRkJReXhSUVVGSkxFbEJRVVVzU1VGQlRpeERRVUZYTEVsQlFVY3NTVUZCUlN4aFFVRlhMRTlCUVU4c1EwRkJiRUlzUjBGQmIwSXNRMEZCUXl4RFFVRkVMRTFCUVUwc1NVRkJSU3hEUVVGU0xFbEJRVmNzUTBGQldDeEhRVUZoTEVWQlFVVXNWVUZCUml4SFFVRmhMRU5CUVRsRExFZEJRV2RFTEVOQlFVTXNRMEZCUkN4TFFVRkxMRU5CUVV3c1IwRkJUeXhGUVVGRkxFTkJRVlFzUjBGQlZ5eERRVUUzUkN4RlFVRXJSQ3hGUVVGRkxGVkJRVVlzUjBGQllTeERRVUZpTEVsQlFXZENMRWxCUVVVc1EwRkJiRUlzU1VGQmNVSXNTVUZCUlN4RlFVRkZMRlZCUVVZc1IwRkJZU3hEUVVGMFJ5eEZRVUYzUnl4UFFVRk5MRU5CUVVNc1EwRkJVQ3hEUVVGVExFVkJRVVVzVFVGQlJpeEpRVUZYTEVOQlFVTXNRMEZCUkN4TFFVRkxMRU5CUVV3c1IwRkJUeXhGUVVGRkxGZEJRVVlzUTBGQll5eFJRVUZrTEVkQlFYbENMRTFCUVhwQ0xFVkJRVkFzUjBGQmVVTXNSVUZCUlN4WFFVRkdMRU5CUVdNc1VVRkJaQ3hEUVVGMVFpeExRVUZMTEU5QlFVd3NRMEZCWVN4TFFVRndReXhGUVVFeVF5eEZRVUV6UXl4RFFVRTRReXhEUVVFNVF5eEZRVUZwUkN4TlFVRnFSQ3hGUVVGd1JDeEZRVUU0Unl4RlFVRkZMRTlCUVVZc1IwRkJWU3hGUVVGRkxGZEJRVVlzUTBGQll5eFJRVUZrTEVOQlFYVkNMRXRCUVVzc1QwRkJUQ3hEUVVGaExFdEJRWEJETEVOQlFYaElMRVZCUVcxTExFVkJRVVVzVjBGQlJpeERRVUZqTEZGQlFXUXNRMEZCZFVJc1MwRkJTeXhQUVVGTUxFTkJRV0VzUzBGQmNFTXNSVUZCTWtNc1RVRkJNME1zUlVGQmJrc3NSVUZCZFU0c1JVRkJSU3hYUVVGR0xFTkJRV01zVFVGQlpDeERRVUZ4UWl4RlFVRkZMRTlCUVhaQ0xFTkJRWFpPTEVWQlFYVlFMRVZCUVVVc1dVRkJSaXhIUVVGbExFVkJRVVVzVDBGQmVGRXNSVUZCWjFJc1JVRkJSU3hOUVVGR0xFVkJRV2hTTzBGQlFUSlNMRWRCUVRGMU0wSXNSVUZCTW5VelFpeEZRVUZGTEZOQlFVWXNRMEZCV1N4TlFVRmFMRWRCUVcxQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCU1N4RFFVRktPMEZCUVVFc1VVRkJUU3hEUVVGT08wRkJRVUVzVVVGQlVTeEpRVUZGTEVsQlFWWTdRVUZCUVN4UlFVRmxMRWxCUVVVc1JVRkJha0lzUTBGQmIwSXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzUjBGQlppeExRVUZ4UWl4SlFVRkZMRU5CUVVNc1EwRkJlRUlzUjBGQk1rSXNTVUZCUlN4VlFVRlJMRVZCUVVVc1dVRkJWaXhIUVVGMVFpeExRVUZMTEVsQlFVd3NRMEZCVlN4RFFVRldMRWxCUVdFc1NVRkJjRU1zUjBGQmVVTXNTMEZCZEVVc1JVRkJORVVzU1VGQlJTeFRRVUZQTEVWQlFVVXNXVUZCVkN4SFFVRnpRaXhMUVVGTExFbEJRVXdzUTBGQlZTeERRVUZXTEVsQlFXRXNTVUZCYmtNc1IwRkJkME1zUzBGQmRFZ3NSVUZCTkVnc1JVRkJSU3hGUVVGRkxGbEJRVW9zU1VGQmEwSXNRMEZCT1Vrc1JVRkJaMG9zUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4cFFrRkJVQ3hIUVVGNVFpeEZRVUZGTEZkQlFVWXNRMEZCWXl4SFFVRmtMRU5CUVd0Q0xFTkJRV3hDTEVOQlFYcENMRWxCUVN0RExFbEJRVVVzUlVGQlJpeEZRVUZMTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1kwRkJVQ3hKUVVGMVFpeEZRVUZGTEVWQlFVVXNVVUZCU2l4SlFVRmpMR1ZCUVdFc1EwRkJZaXhIUVVGbExFbEJRV1lzUjBGQmIwSXNRMEZCY0VJc1IwRkJjMElzUjBGQmNFTXNSVUZCZDBNc1JVRkJSU3hYUVVGR0xFTkJRV01zUjBGQlpDeERRVUZyUWl4RFFVRnNRaXhEUVVFdlJDeExRVUZ6Uml4RlFVRkZMRVZCUVVVc1VVRkJTaXhKUVVGakxHbENRVUZsTEVOQlFXWXNSMEZCYVVJc1NVRkJha0lzUjBGQmMwSXNRMEZCZEVJc1IwRkJkMElzVVVGQmRFTXNSVUZCSzBNc1JVRkJSU3hYUVVGR0xFTkJRV01zUjBGQlpDeERRVUZyUWl4RFFVRnNRaXhEUVVGeVNTeERRVUZ3UkN4RFFVRm9TanRCUVVGblZ5eEhRVUU1YmpSQ0xFVkJRU3R1TkVJc1JVRkJSU3hUUVVGR0xFTkJRVmtzWVVGQldpeEhRVUV3UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTRzUTBGQlZ5eERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hSUVVGbUxFZEJRWGRDTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGVkJRV1lzU1VGQk1rSXNSVUZCUlN4TFFVRkdMRU5CUVZFc1IwRkJVaXhEUVVGWkxFVkJRVU1zVTBGQlVTeFRRVUZQTEVWQlFVVXNUMEZCUml4RFFVRlZMR0ZCUVRGQ0xFVkJRVm9zUTBGQmJrUXNTVUZCTUVjc1JVRkJSU3hMUVVGR0xFTkJRVkVzVFVGQlVpeERRVUZsTEVWQlFVVXNUMEZCUml4RFFVRlZMRXRCUVZZc1IwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1EwRkJReXhEUVVFdlFpeEpRVUZyUXl4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVFelJDeEhRVUY1UlN4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFZRVUZtTEVsQlFUSkNMRVZCUVVVc1MwRkJSaXhEUVVGUkxFZEJRVklzUTBGQldTeEZRVUZETEZOQlFWRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1lVRkJWaXhIUVVGM1FpeE5RVUZxUXl4RlFVRmFMRU5CUVRsTkxFZEJRWEZSTEVWQlFVVXNVMEZCUml4SFFVRlpMRVZCUVVVc1MwRkJSaXhEUVVGUkxFdEJRVklzUlVGQmFsSXNSVUZCYVZNc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeExRVUZHTEVOQlFWRXNUVUZCVWl4RlFVRTVVeXhGUVVFclZDeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hSUVVGbUxFbEJRWGxDTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxHRkJRWGhETEVsQlFYVkVMRVZCUVVVc1ZVRkJSaXhIUVVGaExFdEJRVXNzU1VGQlRDeERRVUZWTEVWQlFVVXNVMEZCUml4SFFVRlpMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRV2hETEVOQlFXSXNSVUZCTWtRc1JVRkJSU3hYUVVGR0xFTkJRV01zUzBGQlpDeERRVUZ2UWl4TFFVRkxMRWxCUVV3c1EwRkJWU3hGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEZkQlFVWXNRMEZCWXl4UlFVRmtMRU5CUVhWQ0xHTkJRWFpDTEVWQlFYVkRMRTFCUVRsRUxFTkJRWEJDTEVOQlFXeElMRWxCUVRoTkxFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR0ZCUVdZc1IwRkJOa0lzUlVGQlJTeFhRVUZHTEVOQlFXTXNTMEZCWkN4RFFVRnZRaXhOUVVGSkxFVkJRVVVzVlVGQk1VSXNRMEZCTjBJc1NVRkJiMFVzUlVGQlJTeFZRVUZHTEVkQlFXRXNTMEZCU3l4SlFVRk1MRU5CUVZVc1JVRkJSU3hUUVVGYUxFTkJRV0lzUlVGQmIwTXNSVUZCUlN4WFFVRkdMRU5CUVdNc1RVRkJaQ3hEUVVGeFFpeExRVUZMTEVsQlFVd3NRMEZCVlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGV0xFZEJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFTkJRVU1zUTBGQkwwSXNTVUZCYTBNc1JVRkJSU3hYUVVGR0xFTkJRV01zVVVGQlpDeERRVUYxUWl4alFVRjJRaXhGUVVGMVF5eE5RVUZ1Uml4RFFVRnlRaXhEUVVGNFJ5eERRVUUzWjBJc1EwRkJkWFZDTEVsQlFVa3NTVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGV0xFZEJRV3RDTEZWQlFXeENMRU5CUVRaQ0xFTkJRVU1zUTBGQk9VSXNTVUZCYVVNc1JVRkJSU3hQUVVGR0xFTkJRVlVzUzBGQlZpeEhRVUZyUWl4TFFVRnNRaXhGUVVGMlF5eERRVUZwUlN4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGhRVUZtTEVsQlFUaENMRVZCUVVVc1YwRkJSaXhEUVVGakxGRkJRV1FzUTBGQmRVSXNZMEZCZGtJc1JVRkJkVU1zUzBGQmRrTXNRMEZCTmtNc1JVRkJSU3hWUVVGR0xFZEJRV0VzUTBGQk1VUXNRMEZCT1VJN1FVRkJNa1lzUjBGQmJHbzJRaXhGUVVGdGFqWkNMRVZCUVVVc1UwRkJSaXhEUVVGWkxFOUJRVm9zUjBGQmIwSXNXVUZCVlR0QlFVRkRMRkZCUVVrc1EwRkJTanRCUVVGQkxGRkJRVTBzU1VGQlJTeEpRVUZTTEVOQlFXRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1NVRkJWaXhEUVVGbExGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVR0QlFVRkRMRlZCUVVVc1JVRkJSU3hWUVVGR0xFZEJRV0VzUTBGQllpeEhRVUZsTEVOQlFVTXNRMEZCYkVJc1JVRkJiMElzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1IwRkJaaXhIUVVGdFFpeEZRVUZGTEVOQlFVWXNSVUZCU3l4SFFVRk1MRU5CUVZNc1JVRkJReXhWUVVGVExGVkJRVllzUlVGQmNVSXNUMEZCVFN4RFFVRXpRaXhGUVVFMlFpeExRVUZKTEVOQlFXcERMRVZCUVcxRExGRkJRVThzUlVGQlJTeFBRVUZHTEVOQlFWVXNUVUZCVml4SFFVRnBRaXhEUVVFelJDeEZRVUUyUkN4VFFVRlJMRU5CUVhKRkxFVkJRVlFzUTBGQmJrSXNSMEZCY1Vjc1JVRkJSU3hEUVVGR0xFVkJRVXNzUjBGQlRDeERRVUZUTEVWQlFVTXNWVUZCVXl4VlFVRldMRVZCUVhGQ0xFMUJRVXNzUTBGQk1VSXNSVUZCTkVJc1MwRkJTU3hEUVVGb1F5eEZRVUZyUXl4UlFVRlBMRVZCUVVVc1QwRkJSaXhEUVVGVkxFMUJRVllzUjBGQmFVSXNRMEZCTVVRc1JVRkJORVFzVTBGQlVTeERRVUZ3UlN4RlFVRlVMRU5CUVhwSU8wRkJRVEJOTEV0QlFYWlBMRWRCUVhsUExFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RlFVRkZMRmxCUVdZc1JVRkJOa0lzUjBGQk4wSXNRMEZCYVVNc1JVRkJReXhSUVVGUExFVkJRVVVzVDBGQlJpeERRVUZWTEUxQlFWWXNSMEZCYVVJc1EwRkJla0lzUlVGQk1rSXNVMEZCVVN4RFFVRnVReXhGUVVGcVF5eERRVUY2VHp0QlFVRnBWQ3hIUVVGb05UWkNMRVZCUVdrMU5rSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1UwRkJXaXhIUVVGelFpeFpRVUZWTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhKUVVGSExFMUJRVWtzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCWkN4SlFVRTBRaXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4alFVRXpReXhKUVVFeVJDeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hSUVVFM1JTeEZRVUZ6Ump0QlFVRkRMRlZCUVVrc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeEZRVUZXTEVOQlFXRXNSVUZCUlN4WlFVRm1MRVZCUVRaQ0xGZEJRVGRDTEVOQlFYbERMRU5CUVVNc1EwRkJNVU1zUTBGQlRpeERRVUZ0UkN4RlFVRkZMRXRCUVVZc1EwRkJVU3hIUVVGU0xFTkJRVmtzVVVGQldpeEZRVUZ4UWl4RFFVRnlRanRCUVVGM1FqdEJRVUZETEVkQlFXaHROMElzUlVGQmFXMDNRaXhGUVVGRkxGTkJRVVlzUTBGQldTeFRRVUZhTEVkQlFYTkNMRVZCUVVVc1UwRkJSaXhEUVVGWkxHTkJRVm9zUjBGQk1rSXNXVUZCVlR0QlFVRkRMRkZCUVVrc1EwRkJTanRCUVVGQkxGRkJRVTBzUTBGQlRqdEJRVUZCTEZGQlFWRXNRMEZCVWp0QlFVRkJMRkZCUVZVc1EwRkJWanRCUVVGQkxGRkJRVmtzUTBGQldqdEJRVUZCTEZGQlFXTXNTVUZCUlN4SlFVRm9RanRCUVVGQkxGRkJRWEZDTEVsQlFVVXNRMEZCUXl4RFFVRjRRaXhEUVVFd1FpeEpRVUZITEdGQlFWY3NSVUZCUlN4SlFVRkdMRU5CUVU4c1ZVRkJWU3hEUVVGV0xFTkJRVkFzUTBGQldDeEpRVUZwUXl4SlFVRkZMRlZCUVZVc1EwRkJWaXhEUVVGR0xFVkJRV1VzU1VGQlJTeFZRVUZWTEVOQlFWWXNRMEZCYWtJc1JVRkJPRUlzU1VGQlJTeFZRVUZxUlN4SlFVRTJSU3hoUVVGWExFVkJRVVVzU1VGQlJpeERRVUZQTEZWQlFWVXNRMEZCVml4RFFVRlFMRU5CUVZnc1MwRkJhME1zU1VGQlJTeFZRVUZWTEVOQlFWWXNRMEZCUml4RlFVRmxMRWxCUVVVc1ZVRkJWU3hEUVVGV0xFTkJRV3BDTEVWQlFUaENMRWxCUVVVc1ZVRkJWU3hEUVVGV0xFTkJRV2hETEVWQlFUWkRMR2xDUVVGbExGVkJRVlVzUTBGQlZpeERRVUZtTEVsQlFUWkNMRmxCUVZVc1JVRkJSU3hKUVVGR0xFTkJRVThzVlVGQlZTeERRVUZXTEVOQlFWQXNRMEZCZGtNc1IwRkJORVFzU1VGQlJTeFpRVUU1UkN4SFFVRXlSU3hMUVVGTExFTkJRVXdzUzBGQlV5eFZRVUZWTEVOQlFWWXNRMEZCVkN4TFFVRjNRaXhKUVVGRkxGRkJRVEZDTEVOQlFURktMRU5CUVRkRkxFVkJRVFJSTEdGQlFWY3NRMEZCTVZJc1JVRkJORklzUlVGQlJTeFBRVUZHTEVOQlFWVXNRMEZCVml4SlFVRmhMRU5CUVdJc1EwRkJOVklzUzBGQloxUXNTVUZCUnl4bFFVRmhMRU5CUVdoQ0xFVkJRV3RDTEVWQlFVVXNTVUZCUml4RFFVRlBMRU5CUVZBc1JVRkJVeXhWUVVGVExFTkJRVlFzUlVGQlZ5eERRVUZZTEVWQlFXRTdRVUZCUXl4UlFVRkZMRTlCUVVZc1EwRkJWU3hEUVVGV0xFbEJRV0VzUTBGQllqdEJRVUZsTEV0QlFYUkRMRVZCUVd4Q0xFdEJRU3RFTEVsQlFVY3NhVUpCUVdVc1EwRkJiRUlzUlVGQmIwSXNTMEZCU1N4RFFVRktMRWxCUVZNc1EwRkJWRHRCUVVGWExGVkJRVWNzV1VGQlZTeEZRVUZGTEVsQlFVWXNRMEZCVHl4RlFVRkZMRTlCUVVZc1EwRkJWU3hWUVVGcVFpeERRVUZpTEVWQlFUQkRMRVZCUVVVc1QwRkJSaXhEUVVGVkxGVkJRVllzUjBGQmNVSXNRMEZCUXl4RlFVRkZMRU5CUVVZc1EwRkJSQ3hEUVVGeVFpeERRVUV4UXl4TFFVRXdSVHRCUVVGRExHRkJRVWtzU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4VlFVRldMRU5CUVhGQ0xFMUJRWEpDTEVkQlFUUkNMRU5CUVd4RExFVkJRVzlETEV0QlFVY3NRMEZCZGtNN1FVRkJNRU1zV1VGQlJTeFBRVUZHTEVOQlFWVXNWVUZCVml4RFFVRnhRaXhEUVVGeVFpeEZRVUYzUWl4VlFVRjRRaXhMUVVGeFF5eEZRVUZGTEVOQlFVWXNSVUZCU3l4VlFVRXhReXhKUVVGelJDeEZRVUZGTEU5QlFVWXNRMEZCVlN4VlFVRldMRU5CUVhGQ0xFMUJRWEpDTEVOQlFUUkNMRU5CUVRWQ0xFVkJRVGhDTEVOQlFUbENMRU5CUVhSRUxFVkJRWFZHTEVkQlFYWkdPMEZCUVRGRExGTkJRWEZKTEVWQlFVVXNUMEZCUml4RFFVRlZMRlZCUVZZc1EwRkJjVUlzU1VGQmNrSXNRMEZCTUVJc1JVRkJSU3hEUVVGR0xFTkJRVEZDTzBGQlFXZERPMEZCUVROUUxFdEJRVEpRTEUxQlFVa3NSVUZCUlN4TlFVRkdMRWxCUVZjc1JVRkJSU3hOUVVGR0xFVkJRV1k3UVVGQk1rSXNSMEZCYURFNFFpeEZRVUZwTVRoQ0xFVkJRVVVzVTBGQlJpeERRVUZaTEZkQlFWb3NSMEZCZDBJc1dVRkJWVHRCUVVGRExGRkJRVWtzU1VGQlJTeEpRVUZPTEVOQlFWY3NSVUZCUlN4aFFVRkdMRWxCUVd0Q0xFVkJRVVVzVTBGQlJpeEZRVUZzUWl4RlFVRm5ReXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4SlFVRm1MRWRCUVc5Q0xFVkJRVVVzVFVGQlJpeERRVUZUTEVWQlFVVXNUMEZCUml4RFFVRlZMRVZCUVVVc1dVRkJXaXhEUVVGVUxFTkJRWEJDTEVkQlFYZEVMRVZCUVVVc1QwRkJSaXhGUVVGNFJpeEZRVUZ2Unl4RlFVRkZMRTlCUVVZc1EwRkJWU3hQUVVGV0xFTkJRV3RDTEdGQlFXeENMRVZCUVdkRExFTkJRVU1zUTBGQlJDeERRVUZvUXl4RFFVRndSenRCUVVGNVNTeEhRVUY0WnpsQ0xFVkJRWGxuT1VJc1JVRkJSU3hUUVVGR0xFTkJRVmtzVVVGQldpeEhRVUZ4UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTQ3UVVGQlFTeFJRVUZYTEVsQlFVVXNVMEZCVXl4SlFVRlVMRU5CUVdNc1MwRkJNMElzUTBGQmFVTXNSVUZCUlN4WlFVRkdMRWRCUVdVc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCWml4SFFVRjNRaXhMUVVGNFFpeEhRVUU0UWl4TlFVRTNReXhGUVVGdlJDeFZRVUZSTEVWQlFVVXNXVUZCVml4SFFVRjFRaXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZXTEVOQlFXMUNMR2RDUVVGdVFpeERRVUYyUWl4SFFVRTBSQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeFhRVUZXTEVOQlFYTkNMR2RDUVVGMFFpeERRVUZvU0N4RlFVRjNTaXhMUVVGTExFTkJRVXdzUzBGQlV5eEZRVUZGTEdkQ1FVRllMRWxCUVRaQ0xFdEJRVXNzUTBGQlRDeExRVUZUTEVWQlFVVXNZVUZCZUVNc1NVRkJkVVFzUzBGQlN5eERRVUZNTEV0QlFWTXNSVUZCUlN4WlFVRnNSU3hKUVVGblJpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hOUVVGbUxFdEJRWGRDTEVWQlFVVXNZMEZCUml4SFFVRnBRaXhEUVVGRExFTkJRVEZETEVOQlFYaFBMRVZCUVhGU0xFVkJRVVVzVDBGQlJpeERRVUZWTEVsQlFWWXNTMEZCYVVJc1dVRkJWU3hQUVVGUExFVkJRVVVzVDBGQlJpeERRVUZWTEUxQlFUTkNMRWRCUVd0RExFVkJRVVVzVDBGQlJpeERRVUZWTEUxQlFWWXNSMEZCYVVJc1EwRkJha0lzUzBGQmNVSXNSVUZCUlN4UFFVRkdMRU5CUVZVc1RVRkJWaXhIUVVGcFFpeERRVUYwUXl4RFFVRnNReXhIUVVFeVJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4TlFVRldMRWRCUVdsQ0xFVkJRVVVzVVVGQlJpeERRVUZYTEUxQlFYaElMRU5CUVhKU0xFVkJRWEZhTEV0QlFVc3NRMEZCVEN4TFFVRlRMRVZCUVVVc1ZVRkJXQ3hMUVVGM1FpeEZRVUZGTEZGQlFVWXNSMEZCVnl4WlFVRllMRVZCUVhkQ0xFVkJRVVVzWVVGQlJpeEhRVUZuUWl4alFVRjRReXhGUVVGMVJDeEZRVUZGTEdOQlFVWXNSMEZCYVVJc1lVRkJlRVVzUlVGQmMwWXNTMEZCU3l4RFFVRk1MRXRCUVZNc1JVRkJSU3h0UWtGQldDeEpRVUZuUXl4TFFVRkxMRU5CUVV3c1MwRkJVeXhGUVVGRkxHbENRVUV6UXl4TFFVRXJSQ3hGUVVGRkxGRkJRVVlzUjBGQlZ5eERRVUZETEVOQlFUTkZMRU5CUVRsSExFTkJRWEphTEVWQlFXdHNRaXhMUVVGTExFTkJRVXdzUzBGQlV5eEZRVUZGTEZsQlFWZ3NTMEZCTUVJc1JVRkJSU3hSUVVGR0xFZEJRVmNzWTBGQldDeEZRVUV3UWl4RlFVRkZMR0ZCUVVZc1IwRkJaMElzWjBKQlFURkRMRVZCUVRKRUxFVkJRVVVzWTBGQlJpeEhRVUZwUWl4bFFVRTFSU3hGUVVFMFJpeExRVUZMTEVOQlFVd3NTMEZCVXl4RlFVRkZMRzFDUVVGWUxFbEJRV2RETEV0QlFVc3NRMEZCVEN4TFFVRlRMRVZCUVVVc1kwRkJNME1zUzBGQk5FUXNSVUZCUlN4UlFVRkdMRWRCUVZjc1EwRkJReXhEUVVGNFJTeERRVUYwU0N4RFFVRnNiRUlzUlVGQmIzaENMRXRCUVVzc1EwRkJUQ3hMUVVGVExFVkJRVVVzWlVGQldDeExRVUUyUWl4RlFVRkZMRkZCUVVZc1IwRkJWeXhwUWtGQldDeEZRVUUyUWl4RlFVRkZMR0ZCUVVZc1IwRkJaMElzYlVKQlFUZERMRVZCUVdsRkxFVkJRVVVzWTBGQlJpeEhRVUZwUWl4clFrRkJiRVlzUlVGQmNVY3NTMEZCU3l4RFFVRk1MRXRCUVZNc1JVRkJSU3h0UWtGQldDeEpRVUZuUXl4TFFVRkxMRU5CUVV3c1MwRkJVeXhGUVVGRkxHbENRVUV6UXl4TFFVRXJSQ3hGUVVGRkxGRkJRVVlzUjBGQlZ5eERRVUZETEVOQlFUTkZMRU5CUVd4SkxFTkJRWEI0UWl4RlFVRnhLMElzUzBGQlN5eERRVUZNTEV0QlFWTXNSVUZCUlN4WFFVRllMRXRCUVhsQ0xFVkJRVVVzVVVGQlJpeEhRVUZYTEdGQlFWZ3NSVUZCZVVJc1JVRkJSU3hoUVVGR0xFZEJRV2RDTEdWQlFYcERMRVZCUVhsRUxFVkJRVVVzWTBGQlJpeEhRVUZwUWl4alFVRXhSU3hGUVVGNVJpeExRVUZMTEVOQlFVd3NTMEZCVXl4RlFVRkZMRmRCUVZnc1MwRkJlVUlzUlVGQlJTeFJRVUZHTEVkQlFWY3NRMEZCUXl4RFFVRnlReXhEUVVGc1NDeERRVUZ5SzBJc1JVRkJaMjlETEV0QlFVc3NRMEZCVEN4TFFVRlRMRVZCUVVVc1UwRkJXQ3hKUVVGelFpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRkZCUVRkQ0xFdEJRWGRETEVWQlFVVXNVVUZCUml4SFFVRlhMRmRCUVZnc1JVRkJkVUlzUlVGQlJTeGhRVUZHTEVkQlFXZENMRmRCUVhaRExFVkJRVzFFTEVWQlFVVXNZMEZCUml4SFFVRnBRaXhaUVVFMVJ5eERRVUZvYjBNc1JVRkJNSFpETEVWQlFVVXNhVUpCUVVZc1IwRkJiMElzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCVml4SlFVRjNRaXhUUVVGUExFVkJRVVVzVVVGQmFrTXNTVUZCTWtNc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFJRVUZvTUVNN1FVRkJlVEJETEVkQlFXNDFMMElzUlVGQmJ6VXZRaXhGUVVGRkxGTkJRVVlzUTBGQldTeGxRVUZhTEVkQlFUUkNMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zVVVGQlNTeERRVUZLTzBGQlFVRXNVVUZCVFN4RFFVRk9PMEZCUVVFc1VVRkJVU3hEUVVGU08wRkJRVUVzVVVGQlZTeERRVUZXTzBGQlFVRXNVVUZCV1N4SlFVRkZMRWxCUVdRc1EwRkJiVUlzU1VGQlJ5eEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVZZc1EwRkJaU3hqUVVGbUxFVkJRU3RDTEZkQlFTOUNMRU5CUVRKRExIbERRVUV6UXl4RlFVRnpSaXhKUVVGMFJpeERRVUV5Uml4aFFVRXpSaXhGUVVGNVJ5eE5RVUY2Unl4RFFVRkdMRVZCUVcxSUxFVkJRVVVzVDBGQlJpeERRVUZWTEVWQlFWWXNRMEZCWVN4RFFVRmlMRVZCUVdkQ0xGRkJRV2hDTEVOQlFYbENMR1ZCUVhwQ0xFTkJRVzVJTEVWQlFUWktMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEZWQlFTOUxMRVZCUVRCTU8wRkJRVU1zVlVGQlNTeEpRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1IwRkJkVUlzUTBGQmRrSXNTVUZCTUVJc1EwRkJNVUlzUjBGQk5FSXNRMEZCTlVJc1IwRkJPRUlzUTBGQmNFTXNRMEZCYzBNc1NVRkJSU3hMUVVGTExFdEJRVXdzUTBGQlZ5eEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRWRCUVhWQ0xFTkJRV3hETEVOQlFVWXNSVUZCZFVNc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCWml4TFFVRXdRaXhMUVVGSExFTkJRVWdzU1VGQlRTeExRVUZITEVWQlFVVXNWVUZCUml4SFFVRmhMRU5CUVdJc1IwRkJaU3hEUVVGNFFpeEhRVUV3UWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hMUVVGV0xFTkJRV2RDTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVhCQ0xFVkJRWE5DTEVsQlFVVXNRMEZCUml4SFFVRkpMRU5CUVRGQ0xFVkJRVFpDTEZGQlFUZENMRU5CUVhORExHTkJRWFJETEVWQlFYTkVMRWxCUVhSRUxFTkJRVEpFTEdGQlFUTkVMRVZCUVhsRkxFOUJRWHBGTEVOQlFURkNMRWxCUVRaSExFbEJRVVVzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCVml4SFFVRjFRaXhEUVVGNlFpeEZRVUV5UWl4RlFVRkZMRXRCUVVZc1EwRkJVU3hKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUZLTEVkQlFVMHNRMEZCWkN4RlFVRm5RaXhKUVVGRkxFTkJRVVlzUjBGQlNTeERRVUZ3UWl4RlFVRjFRaXhSUVVGMlFpeERRVUZuUXl4alFVRm9ReXhGUVVGblJDeEpRVUZvUkN4RFFVRnhSQ3hoUVVGeVJDeEZRVUZ0UlN4UFFVRnVSU3hEUVVGNFNTeEhRVUZ4VGl4TlFVRkpMRU5CUVVvc1IwRkJUU3hGUVVGRkxFVkJRVVlzUTBGQlN5eEZRVUZGTEUxQlFVWXNSMEZCVXl4RFFVRlVMRWRCUVZjc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQk1VSXNSVUZCZDBNc1VVRkJlRU1zUTBGQmFVUXNZMEZCYWtRc1EwRkJUaXhIUVVGMVJTeE5RVUZKTEVWQlFVVXNWVUZCUml4SFFVRmhMRU5CUVdwQ0xFbEJRVzlDTEVWQlFVVXNSVUZCUml4RFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRV1lzUlVGQk5rSXNVVUZCTjBJc1EwRkJjME1zWTBGQmRFTXNRMEZCTVZVc1EwRkJka01zUlVGQmQyRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1JVRkJWaXhEUVVGaExFTkJRV0lzUlVGQlowSXNVVUZCYUVJc1EwRkJlVUlzWTBGQmVrSXNRMEZCZUdFN1FVRkJhV1FzUzBGQmJISkNMRTFCUVhWeVFpeExRVUZITEVOQlFVZ3NTVUZCVFN4TFFVRkhMRVZCUVVVc1ZVRkJSaXhIUVVGaExFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFXaERMRWRCUVRaRExFVkJRVVVzVDBGQlJpeERRVUZWTEV0QlFWWXNRMEZCWjBJc1EwRkJhRUlzUlVGQmEwSXNTVUZCUlN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVFNVFpeEZRVUUwUXl4UlFVRTFReXhEUVVGeFJDeGpRVUZ5UkN4RlFVRnhSU3hKUVVGeVJTeERRVUV3UlN4aFFVRXhSU3hGUVVGM1JpeFBRVUY0Uml4RFFVRTNReXhIUVVFNFNTeEZRVUZGTEUxQlFVWXNTVUZCVlN4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVGd1FpeEhRVUZwUXl4RlFVRkZMRkZCUVVZc1EwRkJWeXhqUVVGWUxFVkJRVEpDTEVsQlFUTkNMRU5CUVdkRExHRkJRV2hETEVWQlFUaERMRTlCUVRsRExFTkJRV3BETEVsQlFYbEdMRWxCUVVVc1JVRkJSU3hWUVVGR0xFZEJRV0VzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCZWtJc1JVRkJjME1zU1VGQlJTeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hSUVVGbUxFZEJRWGRDTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1IwRkJkVUlzUTBGQkwwTXNSMEZCYVVRc1EwRkJla1lzUlVGQk1rWXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJWaXhKUVVGM1FpeEZRVUZGTEU5QlFVWXNRMEZCVlN4alFVRnNReXhKUVVGclJDeEZRVUZGTEZWQlFVWXNSMEZCWVN4RFFVRmlMRWRCUVdVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQk0wVXNSMEZCZDBZc1JVRkJSU3hMUVVGR0xFTkJRVkVzUzBGQlJ5eEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRWRCUVhWQ0xFTkJRVEZDTEVOQlFWSXNSVUZCY1VNc1NVRkJSU3hEUVVGMlF5eEZRVUV3UXl4UlFVRXhReXhEUVVGdFJDeGpRVUZ1UkN4RlFVRnRSU3hKUVVGdVJTeERRVUYzUlN4aFFVRjRSU3hGUVVGelJpeFBRVUYwUml4RFFVRjRSaXhIUVVGMVRDeEZRVUZGTEV0QlFVWXNRMEZCVVN4RFFVRlNMRVZCUVZVc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUYwUWl4RlFVRnZReXhSUVVGd1F5eERRVUUyUXl4alFVRTNReXhGUVVFMlJDeEpRVUUzUkN4RFFVRnJSU3hoUVVGc1JTeEZRVUZuUml4UFFVRm9SaXhEUVVFelZ5eERRVUU1U1N4RFFVRnRiRUlzWlVGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4UlFVRjJRaXhKUVVGcFF5eHJRa0ZCWjBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQk0wUXNTVUZCY1VVc1JVRkJSU3hSUVVGR0xFVkJRWEpGTzBGQlFXdEdMRWRCUVRONWFVTXNSVUZCTkhscFF5eEZRVUZGTEZOQlFVWXNRMEZCV1N4aFFVRmFMRWRCUVRCQ0xGbEJRVlU3UVVGQlF5eFJRVUZKTEVOQlFVbzdRVUZCUVN4UlFVRk5MRU5CUVU0N1FVRkJRU3hSUVVGUkxFTkJRVkk3UVVGQlFTeFJRVUZWTEVsQlFVVXNTVUZCV2l4RFFVRnBRaXhKUVVGSExFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVdZc1MwRkJjMElzUlVGQlJTeFBRVUZHTEVOQlFWVXNWVUZCVml4SFFVRnhRaXhEUVVGRExFTkJRVFZETEVkQlFTdERMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEZGQlFXWXNTVUZCZVVJc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNTVUZCZUVNc1MwRkJLME1zU1VGQlJTeEpRVUZHTEVWQlFVOHNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQk4wVXNRMEZCYkVRc1JVRkJOa2s3UVVGQlF5eFhRVUZKTEVsQlFVVXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzVlVGQlppeEhRVUV3UWl4RlFVRkZMRTlCUVVZc1EwRkJWU3haUVVGV0xFZEJRWFZDTEVOQlFXcEVMRWRCUVcxRUxFVkJRVVVzVDBGQlJpeERRVUZWTEZsQlFTOUVMRVZCUVRSRkxFbEJRVVVzUlVGQlJTeFZRVUZ3Uml4RlFVRXJSaXhKUVVGRkxFVkJRVVVzVlVGQlJpeEhRVUZoTEVOQlFUbEhMRVZCUVdkSUxFdEJRVWNzUTBGQmJrZzdRVUZCY1Vnc1dVRkJSU3hKUVVGRkxFTkJRVW9zUlVGQlRTeEZRVUZGTEVWQlFVVXNUMEZCUml4RFFVRlZMRU5CUVZZc1EwRkJSaXhGUVVGblFpeExRVUZvUWl4RFFVRnpRaXhEUVVGRExFTkJRWFpDTEVWQlFUQkNMRWxCUVRGQ0xFTkJRU3RDTEVsQlFTOUNMRVZCUVc5RExFVkJRWEJETEVWQlFYZERMRWxCUVhoRExFTkJRVFpETEd0Q1FVRTNReXhGUVVGblJTeEpRVUZGTEVWQlFVVXNWVUZCY0VVc1JVRkJaMFlzVTBGQmFFWXNRMEZCTUVZc1JVRkJSU3hYUVVFMVJpeEZRVUY1Unl4UlFVRjZSeXhEUVVGclNDeGpRVUZzU0N4RFFVRk9PMEZCUVhKSUxFOUJRVFpRTEV0QlFVa3NTVUZCUlN4RFFVRk9MRVZCUVZFc1NVRkJSU3hKUVVGRkxFVkJRVVVzVlVGQlpDeEZRVUY1UWl4TFFVRkhMRU5CUVRWQ08wRkJRVGhDTEZsQlFVVXNRMEZCUml4RlFVRkpMRVZCUVVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzUTBGQlZpeERRVUZHTEVWQlFXZENMRXRCUVdoQ0xFTkJRWE5DTEVOQlFVTXNRMEZCZGtJc1JVRkJNRUlzU1VGQk1VSXNRMEZCSzBJc1NVRkJMMElzUlVGQmIwTXNSVUZCY0VNc1JVRkJkME1zU1VGQmVFTXNRMEZCTmtNc2EwSkJRVGRETEVWQlFXZEZMRWxCUVVVc1JVRkJSU3hWUVVGd1JTeEZRVUZuUml4UlFVRm9SaXhEUVVGNVJpeEZRVUZGTEZkQlFUTkdMRVZCUVhkSExGRkJRWGhITEVOQlFXbElMR05CUVdwSUxFTkJRVW83UVVGQk9VSXNUMEZCYlVzc1JVRkJSU3hYUVVGR0xFTkJRV01zU1VGQlpDeERRVUZ0UWl4bFFVRnVRaXhGUVVGdlF5eEpRVUZ3UXl4RFFVRjVReXhOUVVGNlF5eEZRVUZwUkN4SlFVRnFSQ3hEUVVGelJDeFpRVUZWTzBGQlFVTXNWVUZCUlN4SlFVRkdMRVZCUVZFc1NVRkJVaXhEUVVGaExFbEJRV0lzUlVGQmEwSXNSVUZCYkVJN1FVRkJjMElzVDBGQmRrWTdRVUZCZVVZN1FVRkJReXhIUVVFeEsycERMRVZCUVRJcmFrTXNSVUZCUlN4VFFVRkdMRU5CUVZrc1UwRkJXaXhIUVVGelFpeFZRVUZUTEVOQlFWUXNSVUZCVnp0QlFVRkRMRkZCUVVrc1NVRkJSU3hKUVVGT0xFTkJRVmNzUzBGQlJ5eEZRVUZGTEZGQlFVWXNSVUZCU0N4RlFVRm5RaXhGUVVGRkxGZEJRVVlzUjBGQll5eERRVUU1UWp0QlFVRm5ReXhIUVVGNGFtdERMRVZCUVhscWEwTXNSVUZCUlN4VFFVRkdMRU5CUVZrc1lVRkJXaXhIUVVFd1FpeFZRVUZUTEVOQlFWUXNSVUZCVnp0QlFVRkRMRkZCUVVrc1NVRkJSU3hKUVVGT08wRkJRVUVzVVVGQlZ5eEpRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRktMRVZCUVZrc1JVRkJXaXhEUVVGbExHTkJRV1lzU1VGQkswSXNSVUZCUlN4RlFVRkZMRTFCUVVvc1EwRkJMMElzUjBGQk1rTXNSVUZCUlN4RlFVRkZMRTFCUVVvc1JVRkJXU3hQUVVGYUxFTkJRVzlDTEdOQlFYQkNMRU5CUVhoRU8wRkJRVUVzVVVGQk5FWXNTVUZCUlN4VFFVRlRMRVZCUVVVc1NVRkJSaXhEUVVGUExHdENRVUZRTEVOQlFWUXNRMEZCT1VZc1EwRkJiVWtzVFVGQlNTeEpRVUZGTEVOQlFVNHNSMEZCVXl4RlFVRkZMRlZCUVVZc1NVRkJZeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFpRVUY0UWl4SFFVRnhReXhGUVVGRkxGbEJRVVlzUTBGQlpTeERRVUZtTEVWQlFXbENMRU5CUVVNc1EwRkJiRUlzUlVGQmIwSXNRMEZCUXl4RFFVRnlRaXhEUVVGeVF5eEhRVUUyUkN4RlFVRkZMRmxCUVVZc1EwRkJaU3hEUVVGbUxFTkJRWFJGTzBGQlFYZEdMRWRCUVRGNmEwTXNSVUZCTW5wclF5eEZRVUZGTEZOQlFVWXNRMEZCV1N4WlFVRmFMRWRCUVhsQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTEVOQlFWZ3NSVUZCWVN4RFFVRmlMRVZCUVdVN1FVRkJReXhSUVVGSkxFTkJRVW83UVVGQlFTeFJRVUZOTEVOQlFVNDdRVUZCUVN4UlFVRlJMRU5CUVZJN1FVRkJRU3hSUVVGVkxFTkJRVlk3UVVGQlFTeFJRVUZaTEVOQlFWbzdRVUZCUVN4UlFVRmpMRWxCUVVVc1NVRkJhRUk3UVVGQlFTeFJRVUZ4UWl4SlFVRkZMRWxCUVhaQ0xFTkJRVFJDTEVsQlFVY3NTVUZCUlN4TFFVRkhMRU5CUVVNc1EwRkJUaXhGUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4VFFVRlFMRWxCUVd0Q0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR05CUVdwRExFbEJRV2xFTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFbEJRV1lzU1VGQmNVSXNSVUZCUlN4WlFVRkdMRXRCUVdsQ0xFTkJRWHBHTEVOQlFWZ3NSVUZCZFVjc1NVRkJSeXhEUVVGRExFTkJRVVFzUzBGQlN5eERRVUZNTEVsQlFWRXNSVUZCUlN4UlFVRkdMRU5CUVZjc1EwRkJXQ3hEUVVGU0xFVkJRWE5DTEVsQlFVVXNRMEZCZUVJc1JVRkJNRUlzU1VGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4RFFVRldMRU5CUVRWQ0xFVkJRWGxETEVsQlFVVXNSVUZCUlN4UFFVRkdMRU5CUVZVc1JVRkJSU3haUVVGYUxFTkJRVE5ETEVWQlFYRkZMRVZCUVVVc1YwRkJSaXhIUVVGakxGTkJRVThzUlVGQlJTeFRRVUZVTEVkQlFXMUNMRU5CUVc1Q0xFZEJRWEZDTEVWQlFVVXNVMEZCTVVjc1JVRkJiMGdzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1VVRkJaaXhKUVVGNVFpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hWUVVGNFF5eExRVUZ4UkN4SlFVRkZMRU5CUVVZc1NVRkJTeXhKUVVGRkxFVkJRVVVzVjBGQlJpeExRVUZuUWl4RlFVRkZMRTlCUVVZc1EwRkJWU3hqUVVGMFJpeERRVUYyU0N4RlFVRTJUaXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4SlFVRm1MRXRCUVhOQ0xFbEJRVVVzUlVGQlJTeFpRVUZLTEVWQlFXbENMRU5CUVVNc1EwRkJSQ3hMUVVGTExFTkJRVXdzUjBGQlR5eEZRVUZGTEZsQlFVWXNRMEZCWlN4RFFVRm1MRVZCUVdsQ0xGbEJRVlU3UVVGQlF5eFJRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRmFPMEZCUVdVc1MwRkJNME1zUTBGQlVDeEhRVUZ2UkN4RlFVRkZMRk5CUVVZc1EwRkJXU3hEUVVGYUxFTkJRVE5HTEVWQlFUZE9MRXRCUVRaVkxFbEJRVWNzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1VVRkJaaXhKUVVGNVFpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hWUVVGNFF5eExRVUZ4UkN4SlFVRkZMRU5CUVVZc1NVRkJTeXhKUVVGRkxFVkJRVVVzVlVGQlJpeEhRVUZoTEVWQlFVVXNUMEZCUml4RFFVRlZMR05CUVc1R0xFTkJRVWdzUlVGQmMwY3NRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzU1VGQlppeExRVUZ6UWl4SlFVRkZMRVZCUVVVc1dVRkJTaXhGUVVGcFFpeERRVUZETEVOQlFVUXNTMEZCU3l4RFFVRk1MRWRCUVU4c1JVRkJSU3haUVVGR0xFTkJRV1VzUTBGQlppeEZRVUZwUWl4WlFVRlZPMEZCUVVNc1VVRkJSU3hUUVVGR0xFTkJRVmtzUTBGQldqdEJRVUZsTEV0QlFUTkRMRU5CUVZBc1IwRkJiMFFzUlVGQlJTeFRRVUZHTEVOQlFWa3NRMEZCV2l4RFFVRXpSaXhGUVVGMFJ5eExRVUZ4VGp0QlFVRkRMRlZCUVVjc1JVRkJSU3hQUVVGR0xFTkJRVlVzVVVGQlZpeEpRVUZ2UWl4alFVRmpMRVZCUVVVc1lVRkJhRUlzUTBGQmNFSXNSVUZCYlVRc1NVRkJSU3hKUVVGRkxFTkJRVVlzUjBGQlNTeEZRVUZGTEZWQlFVWXNSMEZCWVN4RlFVRkZMRTlCUVVZc1EwRkJWU3hqUVVGMlFpeEpRVUYxUXl4RFFVRjJReXhIUVVGNVF5eEZRVUZGTEZWQlFVWXNSMEZCWVN4RlFVRkZMRlZCUVVZc1IwRkJZU3hGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUUzUlN4SFFVRTBSaXhGUVVGRkxGVkJRVVlzUjBGQllTeERRVUUzUnl4SFFVRXJSeXhMUVVGSExFVkJRVVVzVlVGQlRDeEhRVUZuUWl4RlFVRkZMRlZCUVVZc1IwRkJZU3hGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUYyUWl4SlFVRjFReXhEUVVGMlF5eEhRVUY1UXl4RFFVRjZReXhIUVVFeVF5eEpRVUZGTEVWQlFVVXNWVUZCTDBRc1IwRkJNRVVzUTBGQk9VOHNSVUZCWjFBc1JVRkJSU3hUUVVGR0xFZEJRVmtzUTBGQlF5eERRVUUzVUN4RlFVRXJVQ3hGUVVGRkxFOUJRVVlzUTBGQlZTeFBRVUZXTEVOQlFXdENMR05CUVd4Q0xFVkJRV2xETEVOQlFVTXNRMEZCUkN4RlFVRkhMRVZCUVVVc1dVRkJUQ3hGUVVGclFpeERRVUZzUWl4RFFVRnFReXhEUVVFdlVDeEZRVUZ6VkN4SlFVRkZMRVZCUVVVc1dVRkJNVlFzUlVGQmRWVXNSVUZCUlN4WlFVRkdMRWRCUVdVc1EwRkJkRllzUlVGQmQxWXNSVUZCUlN4bFFVRkdMRU5CUVd0Q0xFVkJRVVVzV1VGQmNFSXNRMEZCZUZZc1JVRkJNRmdzUlVGQlJTeFBRVUZHTEVOQlFWVXNVVUZCVml4SlFVRnZRaXhEUVVGRExFbEJRVVVzUTBGQlF5eEpRVUZGTEVWQlFVVXNXVUZCUml4RlFVRklMRVZCUVhGQ0xFdEJRWEpDTEVOQlFUSkNMRlZCUVROQ0xFTkJRVWdzUlVGQk1rTXNWVUZCTTBNc1NVRkJkVVFzUlVGQlJTeFBRVUZHTEVOQlFWVXNXVUZCY2tZc1NVRkJiVWNzUlVGQlJTeGxRVUZHTEVOQlFXdENMRVZCUVVVc1dVRkJjRUlzUTBGQk4yUXNSVUZCSzJZc1JVRkJSU3hWUVVGR0xFVkJRUzltTEVWQlFUaG5RaXhGUVVGRkxGbEJRVVlzUlVGQk9XZENMRVZCUVN0b1FpeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hKUVVGcWFrSXNSVUZCYzJwQ0xFOUJRVTBzUTBGQlF5eERRVUZFTEV0QlFVc3NRMEZCVEN4SlFVRlJMRVZCUVVVc1dVRkJSaXhEUVVGbExFTkJRV1lzUjBGQmEwSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1EwRkJXaXhGUVVGakxGbEJRVlU3UVVGQlF5eFZRVUZGTEZOQlFVWXNRMEZCV1N4RFFVRmFPMEZCUVdVc1QwRkJlRU1zUTBGQk1VSXNTVUZCY1VVc1JVRkJSU3hUUVVGR0xFTkJRVmtzUTBGQldpeERRVUZ5UlN4RlFVRnZSaXhMUVVGTExFVkJRVVVzWVVGQlJpeEZRVUV2Uml4RFFVRnBTQ3hEUVVGRExFTkJRVVFzUzBGQlN5eERRVUZNTEVkQlFVOHNSVUZCUlN4WlFVRkdMRU5CUVdVc1EwRkJaaXhGUVVGcFFpeFpRVUZWTzBGQlFVTXNWVUZCUlN4VFFVRkdMRU5CUVZrc1EwRkJXanRCUVVGbExFOUJRVE5ETEVOQlFWQXNSMEZCYjBRc1JVRkJSU3hUUVVGR0xFTkJRVmtzUTBGQldpeERRVUZ3UkR0QlFVRnRSVHRCUVVGRExFZEJRWEoyYmtNc1JVRkJjM1p1UXl4RlFVRkZMRk5CUVVZc1EwRkJXU3hUUVVGYUxFZEJRWE5DTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRTFCUVdZc1NVRkJkVUlzUlVGQlJTeFZRVUZHTEVkQlFXRXNSVUZCUlN4UFFVRkdMRU5CUVZVc1dVRkJPVU1zUzBGQk5rUXNSVUZCUlN4VlFVRkdMRU5CUVdFc1NVRkJZaXhKUVVGdlFpeEZRVUZGTEZWQlFVWXNRMEZCWVN4SlFVRmlMRVZCUVdwR0xFZEJRWE5ITEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFbEJRV1lzU1VGQmNVSXNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQk5VTXNTVUZCTUVRc1JVRkJSU3hMUVVGR0xFTkJRVkVzU1VGQlVpeEZRVUZvU3l4RlFVRXJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZXTEVOQlFXMUNMR1ZCUVc1Q0xFTkJRUzlMTzBGQlFXMU9MRWRCUVhJdmJrTXNSVUZCY3k5dVF5eEZRVUZGTEZOQlFVWXNRMEZCV1N4alFVRmFMRWRCUVRKQ0xGbEJRVlU3UVVGQlF5eFJRVUZKTEVOQlFVbzdRVUZCUVN4UlFVRk5MRU5CUVU0N1FVRkJRU3hSUVVGUkxFTkJRVkk3UVVGQlFTeFJRVUZWTEVOQlFWWTdRVUZCUVN4UlFVRlpMRWxCUVVVc1NVRkJaQ3hEUVVGdFFpeFBRVUZQTEVsQlFVVXNSVUZCUlN4WFFVRkdMRU5CUVdNc1RVRkJaQ3hIUVVGeFFpeEZRVUZGTEZkQlFVWXNRMEZCWXl4SlFVRnlReXhGUVVFd1F5eEpRVUZGTEVWQlFVVXNWMEZCUml4RFFVRmpMRTFCUVdRc1IwRkJjVUlzUlVGQlJTeFhRVUZHTEVOQlFXTXNTVUZCTDBVc1JVRkJiMFlzU1VGQlJTeExRVUZMTEV0QlFVd3NRMEZCVnl4RFFVRllMRVZCUVdFc1EwRkJZaXhEUVVGMFJpeEZRVUZ6Unl4RFFVRkRMRWxCUVVVc1MwRkJTeXhMUVVGTUxFTkJRVmNzVFVGQlNTeERRVUZLTEVkQlFVMHNTMEZCU3l4RlFVRjBRaXhEUVVGSUxFbEJRVGhDTEVOQlFUbENMRXRCUVd0RExFbEJRVVVzVFVGQlNTeExRVUZMTEVkQlFVd3NRMEZCVXl4RFFVRlVMRU5CUVhoRExFTkJRWFJITEVWQlFUSktMRXRCUVVjc1JVRkJTQ3hKUVVGUExFdEJRVWNzUTBGQlZpeEhRVUZaTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxFZEJRV1lzUjBGQmJVSXNUVUZCYmtJc1IwRkJNRUlzVDBGQmRFTXNSMEZCT0VNc1MwRkJSeXhIUVVGSUxFbEJRVkVzUzBGQlJ5eEhRVUZZTEVkQlFXVXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hQUVVGR0xFTkJRVlVzUjBGQlppeEhRVUZ0UWl4TlFVRnVRaXhIUVVFd1FpeFBRVUY2UXl4SFFVRnBSQ3hMUVVGSExFZEJRVWdzU1VGQlVTeExRVUZITEVkQlFWZ3NSMEZCWlN4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeEhRVUZtTEVkQlFXMUNMRTlCUVc1Q0xFZEJRVEpDTEUxQlFURkRMRWRCUVdsRUxFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR1ZCUVdZc1IwRkJLMElzUzBGQlJ5eEZRVUZJTEVsQlFVOHNTMEZCUnl4SFFVRldMRWRCUVdNc1RVRkJaQ3hIUVVGeFFpeEpRVUZ3UkN4SFFVRjVSQ3hWUVVFelZ6dEJRVUZ6V0N4SFFVRnlObTlETEVWQlFYTTJiME1zUlVGQlJTeFRRVUZHTEVOQlFWa3NVVUZCV2l4SFFVRnhRaXhWUVVGVExFTkJRVlFzUlVGQlZ6dEJRVUZETEZGQlFVa3NRMEZCU2p0QlFVRkJMRkZCUVUwc1EwRkJUanRCUVVGQkxGRkJRVkVzU1VGQlJTeEpRVUZXTEVOQlFXVXNTVUZCUnl4RlFVRkZMRkZCUVVZc1IwRkJWeXhEUVVGRExFTkJRVm9zUlVGQll5eEZRVUZGTEU5QlFVWXNSMEZCVlN4RFFVRkRMRU5CUVhwQ0xFVkJRVEpDTEVWQlFVVXNVMEZCYUVNc1JVRkJNRU1zVDBGQlR5eEZRVUZGTEZOQlFVWXNSMEZCV1N4RFFVRkRMRU5CUVdJc1JVRkJaU3hEUVVGRExFTkJRWFpDTEVOQlFYbENMRWxCUVVjc1JVRkJSU3hYUVVGR0xFZEJRV01zUTBGQlF5eERRVUZtTEVWQlFXbENMRVZCUVVVc1YwRkJSaXhIUVVGakxFVkJRVVVzUlVGQlJTeFhRVUZHTEVOQlFXTXNWMEZCWkN4SFFVRXdRaXhGUVVFMVFpeERRVUV2UWl4RlFVRXJSQ3hMUVVGTExFTkJRVXdzUzBGQlV5eEZRVUZGTEZkQlFVWXNRMEZCWXl4SlFVRjZSaXhGUVVFNFJpeFBRVUZOTEVOQlFVTXNRMEZCVUN4RFFVRlRMRWxCUVVjc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFhRVUZHTEVOQlFXTXNUMEZCYmtJc1NVRkJORUlzUlVGQlJTeFBRVUZHTEVOQlFWVXNUMEZCVml4RFFVRnJRaXhOUVVGc1FpeEZRVUY1UWl4RFFVRkRMRU5CUVVRc1JVRkJSeXhGUVVGRkxHTkJRVVlzUlVGQlNDeERRVUY2UWl4RFFVRTFRaXhGUVVFMlJTeEZRVUZGTEZkQlFVWXNRMEZCWXl4WFFVRmtMRWxCUVRKQ0xFVkJRVVVzVjBGQlJpeERRVUZqTEZGQlFYcElMRVZCUVd0Sk8wRkJRVU1zWTBGQlR5eEpRVUZGTEVWQlFVVXNZMEZCUml4RlFVRlVMRWRCUVRaQ0xFdEJRVWtzVFVGQlNpeERRVUZYTEV0QlFVa3NUVUZCU2p0QlFVRlhMR05CUVVVc1JVRkJSU3hQUVVGR0xFTkJRVlVzV1VGQlZpeEhRVUYxUWl4RlFVRkZMR05CUVVZc1EwRkJhVUlzUlVGQlJTeFpRVUZHTEVkQlFXVXNSVUZCUlN4aFFVRkdMRVZCUVdoRExFTkJRWFpDTEVkQlFUQkZMRVZCUVVVc1dVRkJSaXhIUVVGbExFVkJRVVVzWVVGQlJpeEZRVUV6Uml4RlFVRTJSeXhGUVVGRkxHZENRVUZHTEVkQlFXMUNMRU5CUVdoSkxFTkJRV3RKTEUxQlFVMHNTMEZCU1N4UFFVRktMRU5CUVZrc1MwRkJTU3hKUVVGS08wRkJRVk1zWTBGQlJTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRldMRWRCUVhWQ0xFVkJRVVVzWTBGQlJpeERRVUZwUWl4RlFVRkZMRmxCUVVZc1IwRkJaU3hGUVVGRkxHRkJRVVlzUlVGQmFFTXNRMEZCZGtJc1IwRkJNRVVzUlVGQlJTeFpRVUZHTEVkQlFXVXNSVUZCUlN4aFFVRkdMRVZCUVROR0xFVkJRVFpITEVWQlFVVXNaMEpCUVVZc1IwRkJiVUlzUTBGQmFFa3NRMEZCYUU0c1EwRkJhMVlzWTBGQldTeERRVUZhTEV0QlFXZENMRVZCUVVVc1dVRkJSaXhEUVVGbExFTkJRV1lzUjBGQmEwSXNSVUZCUlN4WFFVRkdMRWRCUVdNc1JVRkJhRU1zUlVGQmJVTXNSVUZCUlN4UFFVRkdMRU5CUVZVc1QwRkJWaXhEUVVGclFpeFBRVUZzUWl4RlFVRXdRaXhEUVVGRExFTkJRVVFzUlVGQlJ5eERRVUZJTEVOQlFURkNMRU5CUVc1RU8wRkJRWEZHTEV0QlFURnBRaXhOUVVFcmFVSXNSVUZCUlN4WFFVRkdMRU5CUVdNc1RVRkJaQ3hMUVVGMVFpeEZRVUZGTEZkQlFVWXNRMEZCWXl4SlFVRnlReXhMUVVFMFF5eEZRVUZGTEZsQlFVWXNRMEZCWlN4RlFVRkZMRmxCUVdwQ0xFZEJRU3RDTEVWQlFVVXNWMEZCUml4SFFVRmpMRVZCUVhwR08wRkJRVFpHTEVkQlFUVjNjVU1zUlVGQk5uZHhReXhGUVVGRkxGTkJRVVlzUTBGQldTeFpRVUZhTEVkQlFYbENMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNHNRMEZCVnl4SlFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNTMEZCWml4SlFVRnpRaXhuUWtGQlpTeFJRVUZtTEVsQlFYbENMRU5CUVVNc1EwRkJSQ3hMUVVGTExFVkJRVVVzVDBGQlJpeERRVUZWTEV0QlFUbEVMRWxCUVhGRkxFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRk5CUVdZc1NVRkJNRUlzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4SlFVRkdMRU5CUVU4c1QwRkJVQ3hEUVVGbExFOUJRV1lzUTBGQmRFY3NRMEZCU0N4RlFVRnJTU3hSUVVGUExFVkJRVVVzVjBGQlJpeERRVUZqTEZkQlFXUXNSMEZCTUVJc1JVRkJSU3hoUVVGR0xFbEJRV2xDTEV0QlFVc3NRMEZCVEN4TFFVRlRMRVZCUVVVc1lVRkJSaXhEUVVGblFpeFBRVUV4UXl4SFFVRnJSQ3hGUVVGRkxHRkJRVVlzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzVFVGQk1VVXNSMEZCYVVZc1EwRkJNMGNzUlVGQk5rY3NSVUZCUlN4WFFVRkdMRU5CUVdNc1VVRkJaQ3hIUVVGMVFpeEZRVUZGTEZOQlFVWXNSMEZCV1N4RlFVRkZMRTlCUVVZc1EwRkJWU3hqUVVFeFNpeEZRVUY1U3l4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeGxRVUZtTEV0QlFXbERMRVZCUVVVc1YwRkJSaXhEUVVGakxGRkJRV1FzUjBGQmRVSXNSVUZCUlN4VlFVRkdMRWRCUVdFc1JVRkJSU3hQUVVGR0xFTkJRVlVzWTBGQkwwVXNRMEZCZWtzc1JVRkJkMUVzUlVGQlJTeEpRVUZHTEVOQlFVOHNUVUZCZEZJc1IwRkJPRklzUzBGQlNTeFBRVUZLTzBGQlFWa3NWVUZCUlN4VlFVRkdMRU5CUVdFc1EwRkJZaXhGUVVGblFpeE5RVUZOTEV0QlFVa3NUVUZCU2p0QlFVRlhMRlZCUVVVc1UwRkJSaXhEUVVGWkxFTkJRVm9zUlVGQlpTeE5RVUZOTEV0QlFVa3NTMEZCU2p0QlFVRlZMRlZCUVVVc1VVRkJSaXhEUVVGWExFTkJRVmdzUlVGQk1WYzdRVUZCZVZnc1IwRkJlSHB5UXl4RlFVRjVlbkpETEVWQlFVVXNVMEZCUml4RFFVRlpMRk5CUVZvc1IwRkJjMElzVlVGQlV5eERRVUZVTEVWQlFWYzdRVUZCUXl4UlFVRkpMRU5CUVVvN1FVRkJRU3hSUVVGTkxFTkJRVTQ3UVVGQlFTeFJRVUZSTEVOQlFWSTdRVUZCUVN4UlFVRlZMRU5CUVZZN1FVRkJRU3hSUVVGWkxFTkJRVm83UVVGQlFTeFJRVUZqTEVOQlFXUTdRVUZCUVN4UlFVRm5RaXhKUVVGRkxFbEJRV3hDTEVOQlFYVkNMRTlCUVU4c1NVRkJSU3hMUVVGTExFTkJRVXdzUzBGQlV5eEZRVUZGTEdGQlFWZ3NSMEZCZVVJc1JVRkJSU3hoUVVGR0xFTkJRV2RDTEU5QlFYcERMRWRCUVdsRUxFbEJRVzVFTEVWQlFYZEVMRVZCUVVVc1EwRkJReXhGUVVGRkxGRkJRVWdzU1VGQllTeEZRVUZGTEZOQlFXWXNTVUZCTUVJc1MwRkJSeXhOUVVGSkxFVkJRVVVzVFVGQmNrTXNUVUZCSzBNc1NVRkJSU3hGUVVGRkxFOUJRVVlzUTBGQlZTeEZRVUZGTEZsQlFWb3NRMEZCUml4RlFVRTBRaXhGUVVGRkxGZEJRVVlzUTBGQll5eEpRVUZrTEVkQlFXMUNMRXRCUVVzc1EwRkJUQ3hMUVVGVExFTkJRVlFzUjBGQlZ5eEZRVUZGTEVOQlFVWXNSVUZCU3l4TFFVRm9RaXhIUVVGelFpeEZRVUZGTEU5QlFYWkZMRVZCUVN0RkxFVkJRVVVzVjBGQlJpeERRVUZqTEVsQlFXUXNSMEZCYlVJc1MwRkJTeXhEUVVGTUxFdEJRVk1zUTBGQlZDeEhRVUZYTEVWQlFVVXNRMEZCUml4RlFVRkxMRXRCUVdoQ0xFZEJRWE5DTEVWQlFVVXNUMEZCTVVnc1JVRkJhMGtzUlVGQlJTeFhRVUZHTEVOQlFXTXNWMEZCWkN4SFFVRXdRaXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZMTEVsQlFVd3NRMEZCVlN4TFFVRkxMRWRCUVV3c1EwRkJVeXhGUVVGRkxGZEJRVVlzUTBGQll5eEpRVUZrTEVkQlFXMUNMRVZCUVVVc1YwRkJSaXhEUVVGakxFMUJRVEZETEVWQlFXbEVMRU5CUVdwRUxFTkJRVllzUTBGQldDeERRVUUxU2l4RlFVRjFUeXhKUVVGRkxFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NTVUZCVEN4RFFVRlZMRXRCUVVzc1IwRkJUQ3hEUVVGVExFVkJRVVVzVjBGQlJpeERRVUZqTEVsQlFXUXNSMEZCYlVJc1JVRkJSU3hYUVVGR0xFTkJRV01zVFVGQk1VTXNSVUZCYVVRc1EwRkJha1FzUTBGQlZpeERRVUZZTEVOQlFYcFBMRVZCUVc5VUxFTkJRVU1zUlVGQlJTeFBRVUZHTEVOQlFWVXNaVUZCV0N4SlFVRTBRaXhEUVVGRExFVkJRVVVzVDBGQkwwSXNTVUZCZDBNc1NVRkJSU3hEUVVFeFF5eEpRVUUyUXl4RlFVRkZMRk5CUVVZc1IwRkJXU3hEUVVGRExFTkJRV0lzUlVGQlpTeERRVUZETEVOQlFUZEVMRXRCUVdsRkxFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMR1ZCUVdZc1MwRkJhVU1zUlVGQlJTeFhRVUZHTEVOQlFXTXNWMEZCWkN4SFFVRXdRaXhEUVVFelJDeEhRVUU0UkN4SlFVRkZMRVZCUVVVc1kwRkJSaXhGUVVGb1JTeEZRVUZ0Uml4TFFVRkxMRU5CUVV3c1MwRkJVeXhGUVVGRkxHRkJRVmdzU1VGQk1FSXNSVUZCUlN4WFFVRkdMRU5CUVdNc1YwRkJaQ3hIUVVFd1FpeERRVUZ3UkN4TFFVRjNSQ3hGUVVGRkxFOUJRVVlzUjBGQlZTeERRVUZETEVOQlFWZ3NSVUZCWVN4RlFVRkZMR05CUVVZc1JVRkJja1VzUTBGQmJrWXNSVUZCTkVzc1NVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRWRCUVdZc1IwRkJiVUlzUTBGQmJrSXNSMEZCY1VJc1EwRkJReXhEUVVGMlFpeExRVUV5UWl4RlFVRkZMRmRCUVVZc1EwRkJZeXhKUVVGa0xFZEJRVzFDTEVWQlFVVXNWMEZCUml4RFFVRmpMRTFCUVdwRExFZEJRWGRETEVOQlFYaERMRWRCUVRCRExFTkJRVU1zUTBGQmRFVXNRMEZCT1Vzc1JVRkJkVkFzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1pVRkJaaXhMUVVGcFF5eEpRVUZGTEVWQlFVVXNWMEZCUml4RFFVRmpMRWxCUVdRc1IwRkJiVUlzUlVGQlJTeFhRVUZHTEVOQlFXTXNUVUZCYWtNc1IwRkJkME1zUTBGQmVFTXNSMEZCTUVNc1EwRkJReXhEUVVFNVJTeERRVUYyVUN4RlFVRjNWU3hKUVVGRkxFVkJRVVVzVjBGQlJpeERRVUZqTEZkQlFYaFdMRVZCUVc5WExFVkJRVVVzVjBGQlJpeERRVUZqTEU5QlFXUXNSMEZCYzBJc1EwRkJReXhEUVVFeldDeEZRVUUyV0N4RFFVRkRMRU5CUVVRc1MwRkJTeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZtTEV0QlFUQkNMRTFCUVVrc1JVRkJSU3haUVVGT0xFbEJRVzlDTEZsQlFWVXNRMEZCT1VJc1NVRkJhVU1zUlVGQlJTeFpRVUZHTEVsQlFXZENMRVZCUVVVc1YwRkJSaXhGUVVGb1FpeEpRVUZwUXl4WFFVRlRMRU5CUVhKSExFMUJRVEJITEVsQlFVVXNSVUZCUlN4WFFVRkdMRU5CUVdNc1YwRkJaQ3hIUVVFd1FpeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRjBReXhGUVVGdFJDeEZRVUZGTEZkQlFVWXNRMEZCWXl4UFFVRmtMRWRCUVhOQ0xFTkJRVU1zUTBGQmNFd3NRMEZCTjFnc1JVRkJiMnBDTEVOQlFVTXNRMEZCUkN4TFFVRkxMRVZCUVVVc1QwRkJSaXhEUVVGVkxGRkJRV1lzUjBGQmQwSXNSVUZCUlN4VFFVRkdMRWRCUVZrc1NVRkJSU3hKUVVGRkxFTkJRWGhETEVkQlFUQkRMRVZCUVVVc1UwRkJSaXhIUVVGWkxFbEJRVVVzUzBGQlJ5eEZRVUZGTEV0QlFVWXNRMEZCVVN4TlFVRlNMRXRCUVdsQ0xFVkJRVVVzVTBGQmRFSXNTVUZCYVVNc1EwRkJOMjlDTEVWQlFTdHZRaXhEUVVGRExFTkJRVVFzUzBGQlN5eEZRVUZGTEU5QlFVWXNRMEZCVlN4bFFVRm1MRXRCUVdsRExFVkJRVVVzVTBGQlJpeEhRVUZaTEVsQlFVVXNTVUZCUlN4RFFVRnFSQ3hEUVVFdmIwSXNSVUZCYlhOQ0xFTkJRVU1zUTBGQlJDeExRVUZMTEVWQlFVVXNUMEZCUml4RFFVRlZMRWxCUVdZc1NVRkJjVUlzUTBGQlF5eERRVUZFTEV0QlFVc3NSVUZCUlN4UFFVRkdMRU5CUVZVc1UwRkJjRU1zUzBGQlowUXNRMEZCUXl4RFFVRkVMRXRCUVVzc1JVRkJSU3hUUVVGUUxFbEJRV3RDTEVWQlFVVXNVMEZCUml4SFFVRlpMRWxCUVZvc1JVRkJhVUlzUTBGQlF5eERRVUZ3UXl4SlFVRjFReXhMUVVGTExFVkJRVVVzVFVGQlJpeERRVUZUTEVWQlFVVXNVMEZCV0N4RFFVRTFSaXhEUVVGd2QwSXNRMEZCYmxjc1EwRkJMMFE3UVVGQk1uaERMRWRCUVRkdmRVTXNSVUZCT0c5MVF5eEZRVUZGTEZOQlFVWXNRMEZCV1N4VlFVRmFMRWRCUVhWQ0xGVkJRVk1zUTBGQlZDeEZRVUZYTzBGQlFVTXNVVUZCU1N4RFFVRktPMEZCUVVFc1VVRkJUU3hKUVVGRkxFbEJRVklzUTBGQllTeEpRVUZITEVWQlFVVXNWMEZCUml4SFFVRmpMRU5CUVVNc1EwRkJaaXhGUVVGcFFpeE5RVUZKTEVWQlFVVXNWMEZCUml4RFFVRmpMRmRCUVd4Q0xFbEJRU3RDTEVWQlFVVXNWVUZCUml4SlFVRmpMRVZCUVVVc1QwRkJSaXhEUVVGVkxGbEJRVE5GTEVWQlFYZEdMRTlCUVU4c1JVRkJSU3hYUVVGR0xFZEJRV01zUlVGQlpDeEZRVUZwUWl4RFFVRkRMRU5CUVhwQ0xFTkJRVEpDTEV0QlFVc3NRMEZCVEN4TFFVRlRMRVZCUVVVc1lVRkJXQ3hKUVVFd1FpeExRVUZMTEVOQlFVd3NTMEZCVXl4RlFVRkZMR0ZCUVVZc1EwRkJaMElzVDBGQmJrUXNTMEZCTmtRc1NVRkJSU3hGUVVGRkxHRkJRVVlzUTBGQlowSXNUMEZCYUVJc1EwRkJkMElzUTBGQmVFSXNRMEZCTDBRc1IwRkJNa1lzUlVGQlJTeFhRVUZHTEVOQlFXTXNUVUZCWkN4SFFVRnhRaXhGUVVGRkxGZEJRVVlzUTBGQll5eEpRVUZrTEVkQlFXMUNMRXRCUVVzc1EwRkJUQ3hMUVVGVExFTkJRVlFzUjBGQlZ5eEZRVUZGTEV0QlFXSXNSMEZCYlVJc1JVRkJSU3hQUVVGNFNpeEZRVUZuU3l4RlFVRkZMRmRCUVVZc1EwRkJZeXhOUVVGa0xFZEJRWEZDTEVWQlFVVXNWMEZCUml4RFFVRmpMRWxCUVdRc1IwRkJiVUlzUzBGQlN5eERRVUZNTEV0QlFWTXNRMEZCVkN4SFFVRlhMRVZCUVVVc1MwRkJZaXhIUVVGdFFpeEZRVUZGTEU5QlFUZE9MRVZCUVhGUExFVkJRVVVzVVVGQlJpeEhRVUZYTEVOQlFVTXNRMEZCYWxBN1FVRkJiVkFzUjBGQmNHbDJReXhGUVVGeGFYWkRMRVZCUVVVc1UwRkJSaXhEUVVGWkxHTkJRVm9zUjBGQk1rSXNSVUZCUlN4VFFVRkdMRU5CUVZrc1lVRkJXaXhIUVVFd1FpeFpRVUZWTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhUUVVGUExFVkJRVVVzV1VGQlZDeExRVUYzUWl4RlFVRkZMRTFCUVVZc1NVRkJWeXhGUVVGRkxGZEJRVVlzUTBGQll5eFJRVUZrTEVOQlFYVkNMRXRCUVVzc1QwRkJUQ3hEUVVGaExFdEJRWEJETEVWQlFUSkRMRTFCUVRORExFVkJRVmdzUlVGQkswUXNSVUZCUlN4WlFVRkdMRU5CUVdVc1VVRkJaaXhEUVVGM1FpeEZRVUZGTEZkQlFURkNMRU5CUVM5RUxFVkJRWE5ITEVWQlFVVXNUVUZCUml4RlFVRTVTRHRCUVVFd1NTeEhRVUV4ZG5aRExFVkJRVEoyZGtNc1JVRkJSU3hUUVVGR0xFTkJRVmtzVFVGQldpeEhRVUZ0UWl4WlFVRlZPMEZCUVVNc1VVRkJTU3hKUVVGRkxFbEJRVTRzUTBGQlZ5eEZRVUZGTEdWQlFVWXNSVUZCYTBJc1JVRkJSU3hQUVVGd1FpeEZRVUUyUWl4TlFVRTNRaXhKUVVGelF5eEZRVUZGTEV0QlFVWXNTVUZCVXl4RlFVRkZMRXRCUVVZc1EwRkJVU3hOUVVGU0xFVkJRUzlETEVWQlFXZEZMRVZCUVVVc1ZVRkJSaXhKUVVGakxFVkJRVVVzVVVGQlJpeERRVUZYTEVsQlFWZ3NRMEZCWjBJc1JVRkJSU3hQUVVGR0xFTkJRVlVzVTBGQk1VSXNRMEZCWkN4SlFVRnZSQ3hGUVVGRkxGVkJRVVlzUTBGQllTeE5RVUZpTEVWQlFYQklMRVZCUVRCSkxFVkJRVVVzVlVGQlJpeEpRVUZqTEVWQlFVVXNVVUZCUml4RFFVRlhMRWxCUVZnc1EwRkJaMElzUlVGQlJTeFBRVUZHTEVOQlFWVXNVMEZCTVVJc1EwRkJaQ3hKUVVGdlJDeEZRVUZGTEZWQlFVWXNRMEZCWVN4TlFVRmlMRVZCUVRsTUxFVkJRVzlPTEVWQlFVVXNUMEZCUml4RFFVRlZMRmRCUVZZc1EwRkJjMElzYzBSQlFYUkNMRVZCUVRoRkxFbEJRVGxGTEVOQlFXMUdMR0ZCUVc1R0xFVkJRV2xITEUxQlFXcEhMRVZCUVhsSExFZEJRWHBITEVOQlFUWkhMRTlCUVRkSExFVkJRWEZJTEVWQlFYSklMRU5CUVhCT08wRkJRVFpWTEVkQlFXcHVkME1zUlVGQmEyNTNReXhGUVVGRkxGTkJRVVlzUTBGQldTeFBRVUZhTEVkQlFXOUNMRlZCUVZNc1EwRkJWQ3hGUVVGWE8wRkJRVU1zVVVGQlNTeEpRVUZGTEVsQlFVNHNRMEZCVnl4RlFVRkZMRTlCUVVZc1EwRkJWU3hQUVVGV0xFTkJRV3RDTEZOQlFXeENMRVZCUVRSQ0xFTkJRVU1zUTBGQlJDeEZRVUZITEVOQlFVZ3NRMEZCTlVJc1IwRkJiVU1zUlVGQlJTeFBRVUZHTEVWQlFXNURPMEZCUVN0RExFZEJRVFZ6ZDBNc1JVRkJObk4zUXl4RlFVRkZMRk5CUVVZc1EwRkJXU3haUVVGYUxFZEJRWGxDTEZsQlFWVTdRVUZCUXl4UlFVRkpMRWxCUVVVc1NVRkJUaXhEUVVGWExFdEJRVXNzUzBGQlRDeERRVUZYTEVWQlFVVXNUMEZCUml4RFFVRlZMRmxCUVZZc1IwRkJkVUlzUTBGQmJFTXNSMEZCY1VNc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNUVUZCWml4SlFVRjFRaXhGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRTVReXhKUVVFMFJDeERRVUZETEVWQlFVVXNUMEZCUml4RFFVRlZMRkZCUVhaRkxFdEJRV3RHTEVWQlFVVXNWVUZCUml4RFFVRmhMRmRCUVdJc1EwRkJlVUlzWjBKQlFYcENMRVZCUVRKRExFbEJRVE5ETEVOQlFXZEVMR1ZCUVdoRUxFVkJRV2RGTEU5QlFXaEZMRWRCUVhsRkxFVkJRVVVzVlVGQlJpeERRVUZoTEZkQlFXSXNRMEZCZVVJc1owSkJRWHBDTEVWQlFUSkRMRWxCUVRORExFTkJRV2RFTEdWQlFXaEVMRVZCUVdkRkxFOUJRV2hGTEVOQlFYcEZMRVZCUVd0S0xFMUJRVWtzUlVGQlJTeFpRVUZPTEVsQlFXOUNMRVZCUVVVc1ZVRkJSaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNaMEpCUVhSQ0xFVkJRWGRETEVsQlFYaERMRU5CUVRaRExHVkJRVGRETEVWQlFUWkVMRTFCUVRkRUxFZEJRWEZGTEVWQlFVVXNWVUZCUml4RFFVRmhMRmRCUVdJc1EwRkJlVUlzWjBKQlFYcENMRVZCUVRKRExFbEJRVE5ETEVOQlFXZEVMR1ZCUVdoRUxFVkJRV2RGTEU5QlFXaEZMRU5CUVhwR0xFbEJRVzFMTEVWQlFVVXNXVUZCUml4SlFVRm5RaXhGUVVGRkxGVkJRVVlzUjBGQllTeEZRVUZGTEU5QlFVWXNRMEZCVlN4WlFVRjJReXhKUVVGeFJDeERRVUZETEVOQlFVUXNTMEZCU3l4RlFVRkZMRTlCUVVZc1EwRkJWU3hWUVVGd1JTeEpRVUZuUml4RlFVRkZMRlZCUVVZc1EwRkJZU3hSUVVGaUxFTkJRWE5DTEdkQ1FVRjBRaXhGUVVGM1F5eEpRVUY0UXl4RFFVRTJReXhsUVVFM1F5eEZRVUUyUkN4TlFVRTNSQ3hIUVVGeFJTeEZRVUZGTEZWQlFVWXNRMEZCWVN4WFFVRmlMRU5CUVhsQ0xHZENRVUY2UWl4RlFVRXlReXhKUVVFelF5eERRVUZuUkN4bFFVRm9SQ3hGUVVGblJTeFBRVUZvUlN4RFFVRnlTaXhKUVVFclRpeEZRVUZGTEZsQlFVWXNTVUZCWjBJc1JVRkJSU3hWUVVGR0xFZEJRV0VzUTBGQk4wSXNTVUZCWjBNc1EwRkJReXhEUVVGRUxFdEJRVXNzUlVGQlJTeFBRVUZHTEVOQlFWVXNWVUZCTDBNc1MwRkJORVFzUlVGQlJTeFZRVUZHTEVOQlFXRXNVVUZCWWl4RFFVRnpRaXhuUWtGQmRFSXNSVUZCZDBNc1NVRkJlRU1zUTBGQk5rTXNaVUZCTjBNc1JVRkJOa1FzVFVGQk4wUXNSMEZCY1VVc1JVRkJSU3hWUVVGR0xFTkJRV0VzVjBGQllpeERRVUY1UWl4blFrRkJla0lzUlVGQk1rTXNTVUZCTTBNc1EwRkJaMFFzWlVGQmFFUXNSVUZCWjBVc1QwRkJhRVVzUTBGQmFra3NRMEZCZEcxQ0xFTkJRWEpETzBGQlFYVXhRaXhIUVVGdWJIbERMRVZCUVc5c2VVTXNSVUZCUlN4VFFVRkdMRU5CUVZrc1ZVRkJXaXhIUVVGMVFpeFpRVUZWTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhUUVVGUExFVkJRVVVzUzBGQlZDeExRVUZwUWl4RlFVRkZMRXRCUVVZc1EwRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEZRVUZ0UWl4WFFVRnVRaXhEUVVFclFpeGpRVUV2UWl4RlFVRXJReXhIUVVFdlF5eEpRVUZ4UkN4RlFVRkZMRXRCUVVZc1EwRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEZRVUZ0UWl4RlFVRnVRaXhEUVVGelFpeExRVUZMTEV0QlFVd3NRMEZCVnl4RlFVRkZMRmxCUVVZc1IwRkJaU3hGUVVGRkxFOUJRVVlzUTBGQlZTeGpRVUZ3UXl4RFFVRjBRaXhGUVVFeVJTeFJRVUV6UlN4RFFVRnZSaXhqUVVGd1JpeERRVUYwUlR0QlFVRXlTeXhIUVVFMWVYbERMRVZCUVRaNWVVTXNSVUZCUlN4VFFVRkdMRU5CUVZrc1ZVRkJXaXhIUVVGMVFpeFpRVUZWTzBGQlFVTXNVVUZCU1N4SlFVRkZMRWxCUVU0c1EwRkJWeXhGUVVGRkxFOUJRVVlzUTBGQlZTeFJRVUZXTEV0QlFYRkNMRk5CUVZNc1JVRkJSU3hOUVVGWUxFbEJRVzFDTEVWQlFVVXNWMEZCUml4SFFVRmpMRU5CUVVNc1EwRkJiRU1zUjBGQmIwTXNSVUZCUlN4WFFVRkdMRWRCUVdNc1EwRkJReXhEUVVGNFJUdEJRVUV5UlN4SFFVRnlObmxETEVWQlFYTTJlVU1zUlVGQlJTeEZRVUZHTEVOQlFVc3NTMEZCVEN4SFFVRlhMRmxCUVZVN1FVRkJReXhSUVVGSkxFTkJRVW83UVVGQlFTeFJRVUZOTEVOQlFVNDdRVUZCUVN4UlFVRlJMRWxCUVVVc1NVRkJWanRCUVVGQkxGRkJRV1VzU1VGQlJTeFZRVUZWTEVOQlFWWXNRMEZCYWtJN1FVRkJRU3hSUVVFNFFpeEpRVUZGTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhMUVVGb1FpeERRVUZ6UWl4SlFVRjBRaXhEUVVFeVFpeFRRVUV6UWl4RlFVRnhReXhEUVVGeVF5eERRVUZvUXp0QlFVRkJMRkZCUVhkRkxFbEJRVVVzUlVGQlJTeE5RVUUxUlN4RFFVRnRSaXhMUVVGSkxFbEJRVVVzUTBGQlRpeEZRVUZSTEVsQlFVVXNRMEZCVml4RlFVRlpMRWRCUVZvN1FVRkJaMElzVlVGQlJ5eHZRa0ZCYVVJc1EwRkJha0lzZVVOQlFXbENMRU5CUVdwQ0xFMUJRVzlDTEV0QlFVc3NRMEZCVEN4TFFVRlRMRU5CUVRkQ0xFZEJRU3RDTEVWQlFVVXNRMEZCUml4RlFVRkxMRXRCUVV3c1IwRkJWeXhKUVVGSkxFTkJRVW9zUTBGQlRTeEZRVUZGTEVOQlFVWXNRMEZCVGl4RlFVRlhMRU5CUVZnc1EwRkJNVU1zUjBGQmQwUXNTVUZCUlN4RlFVRkZMRU5CUVVZc1JVRkJTeXhMUVVGTUxFTkJRVmNzUTBGQldDeEZRVUZqTEV0QlFXUXNRMEZCYjBJc1JVRkJSU3hEUVVGR0xFVkJRVXNzUzBGQmVrSXNSVUZCSzBJc1EwRkJMMElzUTBGQk1VUXNSVUZCTkVZc1MwRkJTeXhEUVVGTUxFdEJRVk1zUTBGQmVFY3NSVUZCTUVjc1QwRkJUeXhEUVVGUU8wRkJRVEZJTEV0QlFXMUpMRTlCUVU4c1EwRkJVRHRCUVVGVExFZEJRVE53ZWtNN1FVRkJOSEI2UXl4RFFVRXpNbnBETEVOQlFVUWlMQ0ptYVd4bElqb2laMlZ1WlhKaGRHVmtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCbEtIUXNiaXh5S1h0bWRXNWpkR2x2YmlCektHOHNkU2w3YVdZb0lXNWJiMTBwZTJsbUtDRjBXMjlkS1h0MllYSWdZVDEwZVhCbGIyWWdjbVZ4ZFdseVpUMDlYQ0ptZFc1amRHbHZibHdpSmlaeVpYRjFhWEpsTzJsbUtDRjFKaVpoS1hKbGRIVnliaUJoS0c4c0lUQXBPMmxtS0drcGNtVjBkWEp1SUdrb2J5d2hNQ2s3ZG1GeUlHWTlibVYzSUVWeWNtOXlLRndpUTJGdWJtOTBJR1pwYm1RZ2JXOWtkV3hsSUNkY0lpdHZLMXdpSjF3aUtUdDBhSEp2ZHlCbUxtTnZaR1U5WENKTlQwUlZURVZmVGs5VVgwWlBWVTVFWENJc1puMTJZWElnYkQxdVcyOWRQWHRsZUhCdmNuUnpPbnQ5ZlR0MFcyOWRXekJkTG1OaGJHd29iQzVsZUhCdmNuUnpMR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnVQWFJiYjExYk1WMWJaVjA3Y21WMGRYSnVJSE1vYmo5dU9tVXBmU3hzTEd3dVpYaHdiM0owY3l4bExIUXNiaXh5S1gxeVpYUjFjbTRnYmx0dlhTNWxlSEJ2Y25SemZYWmhjaUJwUFhSNWNHVnZaaUJ5WlhGMWFYSmxQVDFjSW1aMWJtTjBhVzl1WENJbUpuSmxjWFZwY21VN1ptOXlLSFpoY2lCdlBUQTdienh5TG14bGJtZDBhRHR2S3lzcGN5aHlXMjlkS1R0eVpYUjFjbTRnYzMwcElpd2lMeW9nVjJWaUlFWnZiblFnVEc5aFpHVnlJSFl4TGpZdU1qZ2dMU0FvWXlrZ1FXUnZZbVVnVTNsemRHVnRjeXdnUjI5dloyeGxMaUJNYVdObGJuTmxPaUJCY0dGamFHVWdNaTR3SUNvdktHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdZV0VvWVN4aUxHTXBlM0psZEhWeWJpQmhMbU5oYkd3dVlYQndiSGtvWVM1aWFXNWtMR0Z5WjNWdFpXNTBjeWw5Wm5WdVkzUnBiMjRnWW1Fb1lTeGlMR01wZTJsbUtDRmhLWFJvY205M0lFVnljbTl5S0NrN2FXWW9NanhoY21kMWJXVnVkSE11YkdWdVozUm9LWHQyWVhJZ1pEMUJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNNaWs3Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3ZG1GeUlHTTlRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpLVHRCY25KaGVTNXdjbTkwYjNSNWNHVXVkVzV6YUdsbWRDNWhjSEJzZVNoakxHUXBPM0psZEhWeWJpQmhMbUZ3Y0d4NUtHSXNZeWw5ZlhKbGRIVnliaUJtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJoTG1Gd2NHeDVLR0lzWVhKbmRXMWxiblJ6S1gxOVpuVnVZM1JwYjI0Z2NDaGhMR0lzWXlsN2NEMUdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXVZbWx1WkNZbUxURWhQVVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVpYVc1a0xuUnZVM1J5YVc1bktDa3VhVzVrWlhoUFppaGNJbTVoZEdsMlpTQmpiMlJsWENJcFAyRmhPbUpoTzNKbGRIVnliaUJ3TG1Gd2NHeDVLRzUxYkd3c1lYSm5kVzFsYm5SektYMTJZWElnY1QxRVlYUmxMbTV2ZDN4OFpuVnVZM1JwYjI0b0tYdHlaWFIxY200cmJtVjNJRVJoZEdWOU8yWjFibU4wYVc5dUlHTmhLR0VzWWlsN2RHaHBjeTVoUFdFN2RHaHBjeTV2UFdKOGZHRTdkR2hwY3k1alBYUm9hWE11Ynk1a2IyTjFiV1Z1ZEgxMllYSWdaR0U5SVNGM2FXNWtiM2N1Um05dWRFWmhZMlU3Wm5WdVkzUnBiMjRnZENoaExHSXNZeXhrS1h0aVBXRXVZeTVqY21WaGRHVkZiR1Z0Wlc1MEtHSXBPMmxtS0dNcFptOXlLSFpoY2lCbElHbHVJR01wWXk1b1lYTlBkMjVRY205d1pYSjBlU2hsS1NZbUtGd2ljM1I1YkdWY0lqMDlaVDlpTG5OMGVXeGxMbU56YzFSbGVIUTlZMXRsWFRwaUxuTmxkRUYwZEhKcFluVjBaU2hsTEdOYlpWMHBLVHRrSmlaaUxtRndjR1Z1WkVOb2FXeGtLR0V1WXk1amNtVmhkR1ZVWlhoMFRtOWtaU2hrS1NrN2NtVjBkWEp1SUdKOVpuVnVZM1JwYjI0Z2RTaGhMR0lzWXlsN1lUMWhMbU11WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb1lpbGJNRjA3WVh4OEtHRTlaRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MEtUdGhMbWx1YzJWeWRFSmxabTl5WlNoakxHRXViR0Z6ZEVOb2FXeGtLWDFtZFc1amRHbHZiaUIyS0dFcGUyRXVjR0Z5Wlc1MFRtOWtaU1ltWVM1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLR0VwZlZ4dVpuVnVZM1JwYjI0Z2R5aGhMR0lzWXlsN1lqMWlmSHhiWFR0alBXTjhmRnRkTzJadmNpaDJZWElnWkQxaExtTnNZWE56VG1GdFpTNXpjR3hwZENndlhGeHpLeThwTEdVOU1EdGxQR0l1YkdWdVozUm9PMlVyUFRFcGUyWnZjaWgyWVhJZ1pqMGhNU3huUFRBN1p6eGtMbXhsYm1kMGFEdG5LejB4S1dsbUtHSmJaVjA5UFQxa1cyZGRLWHRtUFNFd08ySnlaV0ZyZldaOGZHUXVjSFZ6YUNoaVcyVmRLWDFpUFZ0ZE8yWnZjaWhsUFRBN1pUeGtMbXhsYm1kMGFEdGxLejB4S1h0bVBTRXhPMlp2Y2loblBUQTdaenhqTG14bGJtZDBhRHRuS3oweEtXbG1LR1JiWlYwOVBUMWpXMmRkS1h0bVBTRXdPMkp5WldGcmZXWjhmR0l1Y0hWemFDaGtXMlZkS1gxaExtTnNZWE56VG1GdFpUMWlMbXB2YVc0b1hDSWdYQ0lwTG5KbGNHeGhZMlVvTDF4Y2N5c3ZaeXhjSWlCY0lpa3VjbVZ3YkdGalpTZ3ZYbHhjY3l0OFhGeHpLeVF2TEZ3aVhDSXBmV1oxYm1OMGFXOXVJSGtvWVN4aUtYdG1iM0lvZG1GeUlHTTlZUzVqYkdGemMwNWhiV1V1YzNCc2FYUW9MMXhjY3lzdktTeGtQVEFzWlQxakxteGxibWQwYUR0a1BHVTdaQ3NyS1dsbUtHTmJaRjA5UFdJcGNtVjBkWEp1SVRBN2NtVjBkWEp1SVRGOVhHNW1kVzVqZEdsdmJpQmxZU2hoS1h0eVpYUjFjbTRnWVM1dkxteHZZMkYwYVc5dUxtaHZjM1J1WVcxbGZIeGhMbUV1Ykc5allYUnBiMjR1YUc5emRHNWhiV1Y5Wm5WdVkzUnBiMjRnZWloaExHSXNZeWw3Wm5WdVkzUnBiMjRnWkNncGUyMG1KbVVtSm1ZbUppaHRLR2NwTEcwOWJuVnNiQ2w5WWoxMEtHRXNYQ0pzYVc1clhDSXNlM0psYkRwY0luTjBlV3hsYzJobFpYUmNJaXhvY21WbU9tSXNiV1ZrYVdFNlhDSmhiR3hjSW4wcE8zWmhjaUJsUFNFeExHWTlJVEFzWnoxdWRXeHNMRzA5WTN4OGJuVnNiRHRrWVQ4b1lpNXZibXh2WVdROVpuVnVZM1JwYjI0b0tYdGxQU0V3TzJRb0tYMHNZaTV2Ym1WeWNtOXlQV1oxYm1OMGFXOXVLQ2w3WlQwaE1EdG5QVVZ5Y205eUtGd2lVM1I1YkdWemFHVmxkQ0JtWVdsc1pXUWdkRzhnYkc5aFpGd2lLVHRrS0NsOUtUcHpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVLQ2w3WlQwaE1EdGtLQ2w5TERBcE8zVW9ZU3hjSW1obFlXUmNJaXhpS1gxY2JtWjFibU4wYVc5dUlFRW9ZU3hpTEdNc1pDbDdkbUZ5SUdVOVlTNWpMbWRsZEVWc1pXMWxiblJ6UW5sVVlXZE9ZVzFsS0Z3aWFHVmhaRndpS1Zzd1hUdHBaaWhsS1h0MllYSWdaajEwS0dFc1hDSnpZM0pwY0hSY0lpeDdjM0pqT21KOUtTeG5QU0V4TzJZdWIyNXNiMkZrUFdZdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbFBXWjFibU4wYVc5dUtDbDdaM3g4ZEdocGN5NXlaV0ZrZVZOMFlYUmxKaVpjSW14dllXUmxaRndpSVQxMGFHbHpMbkpsWVdSNVUzUmhkR1VtSmx3aVkyOXRjR3hsZEdWY0lpRTlkR2hwY3k1eVpXRmtlVk4wWVhSbGZId29aejBoTUN4akppWmpLRzUxYkd3cExHWXViMjVzYjJGa1BXWXViMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxQVzUxYkd3c1hDSklSVUZFWENJOVBXWXVjR0Z5Wlc1MFRtOWtaUzUwWVdkT1lXMWxKaVpsTG5KbGJXOTJaVU5vYVd4a0tHWXBLWDA3WlM1aGNIQmxibVJEYUdsc1pDaG1LVHR6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1ozeDhLR2M5SVRBc1l5WW1ZeWhGY25KdmNpaGNJbE5qY21sd2RDQnNiMkZrSUhScGJXVnZkWFJjSWlrcEtYMHNaSHg4TlVVektUdHlaWFIxY200Z1puMXlaWFIxY200Z2JuVnNiSDA3Wm5WdVkzUnBiMjRnUWlncGUzUm9hWE11WVQwd08zUm9hWE11WXoxdWRXeHNmV1oxYm1OMGFXOXVJRU1vWVNsN1lTNWhLeXM3Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3WVM1aExTMDdSQ2hoS1gxOVpuVnVZM1JwYjI0Z1JTaGhMR0lwZTJFdVl6MWlPMFFvWVNsOVpuVnVZM1JwYjI0Z1JDaGhLWHN3UFQxaExtRW1KbUV1WXlZbUtHRXVZeWdwTEdFdVl6MXVkV3hzS1gwN1puVnVZM1JwYjI0Z1JpaGhLWHQwYUdsekxtRTlZWHg4WENJdFhDSjlSaTV3Y205MGIzUjVjR1V1WXoxbWRXNWpkR2x2YmloaEtYdG1iM0lvZG1GeUlHSTlXMTBzWXowd08yTThZWEpuZFcxbGJuUnpMbXhsYm1kMGFEdGpLeXNwWWk1d2RYTm9LR0Z5WjNWdFpXNTBjMXRqWFM1eVpYQnNZV05sS0M5YlhGeFhYMTByTDJjc1hDSmNJaWt1ZEc5TWIzZGxja05oYzJVb0tTazdjbVYwZFhKdUlHSXVhbTlwYmloMGFHbHpMbUVwZlR0bWRXNWpkR2x2YmlCSEtHRXNZaWw3ZEdocGN5NWpQV0U3ZEdocGN5NW1QVFE3ZEdocGN5NWhQVndpYmx3aU8zWmhjaUJqUFNoaWZIeGNJbTQwWENJcExtMWhkR05vS0M5ZUtGdHVhVzlkS1NoYk1TMDVYU2trTDJrcE8yTW1KaWgwYUdsekxtRTlZMXN4WFN4MGFHbHpMbVk5Y0dGeWMyVkpiblFvWTFzeVhTd3hNQ2twZldaMWJtTjBhVzl1SUdaaEtHRXBlM0psZEhWeWJpQklLR0VwSzF3aUlGd2lLeWhoTG1ZclhDSXdNRndpS1N0Y0lpQXpNREJ3ZUNCY0lpdEpLR0V1WXlsOVpuVnVZM1JwYjI0Z1NTaGhLWHQyWVhJZ1lqMWJYVHRoUFdFdWMzQnNhWFFvTHl4Y1hITXFMeWs3Wm05eUtIWmhjaUJqUFRBN1l6eGhMbXhsYm1kMGFEdGpLeXNwZTNaaGNpQmtQV0ZiWTEwdWNtVndiR0ZqWlNndld5ZGNJbDB2Wnl4Y0lsd2lLVHN0TVNFOVpDNXBibVJsZUU5bUtGd2lJRndpS1h4OEwxNWNYR1F2TG5SbGMzUW9aQ2svWWk1d2RYTm9LRndpSjF3aUsyUXJYQ0luWENJcE9tSXVjSFZ6YUNoa0tYMXlaWFIxY200Z1lpNXFiMmx1S0Z3aUxGd2lLWDFtZFc1amRHbHZiaUJLS0dFcGUzSmxkSFZ5YmlCaExtRXJZUzVtZldaMWJtTjBhVzl1SUVnb1lTbDdkbUZ5SUdJOVhDSnViM0p0WVd4Y0lqdGNJbTljSWowOVBXRXVZVDlpUFZ3aWIySnNhWEYxWlZ3aU9sd2lhVndpUFQwOVlTNWhKaVlvWWoxY0ltbDBZV3hwWTF3aUtUdHlaWFIxY200Z1luMWNibVoxYm1OMGFXOXVJR2RoS0dFcGUzWmhjaUJpUFRRc1l6MWNJbTVjSWl4a1BXNTFiR3c3WVNZbUtDaGtQV0V1YldGMFkyZ29MeWh1YjNKdFlXeDhiMkpzYVhGMVpYeHBkR0ZzYVdNcEwya3BLU1ltWkZzeFhTWW1LR005WkZzeFhTNXpkV0p6ZEhJb01Dd3hLUzUwYjB4dmQyVnlRMkZ6WlNncEtTd29aRDFoTG0xaGRHTm9LQzhvV3pFdE9WMHdNSHh1YjNKdFlXeDhZbTlzWkNrdmFTa3BKaVprV3pGZEppWW9MMkp2YkdRdmFTNTBaWE4wS0dSYk1WMHBQMkk5Tnpvdld6RXRPVjB3TUM4dWRHVnpkQ2hrV3pGZEtTWW1LR0k5Y0dGeWMyVkpiblFvWkZzeFhTNXpkV0p6ZEhJb01Dd3hLU3d4TUNrcEtTazdjbVYwZFhKdUlHTXJZbjA3Wm5WdVkzUnBiMjRnYUdFb1lTeGlLWHQwYUdsekxtTTlZVHQwYUdsekxtWTlZUzV2TG1SdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkRHQwYUdsekxtZzlZanQwYUdsekxtRTlibVYzSUVZb1hDSXRYQ0lwTzNSb2FYTXVhajBoTVNFOVBXSXVaWFpsYm5Sek8zUm9hWE11WnowaE1TRTlQV0l1WTJ4aGMzTmxjMzFtZFc1amRHbHZiaUJwWVNoaEtYdGhMbWNtSm5jb1lTNW1MRnRoTG1FdVl5aGNJbmRtWENJc1hDSnNiMkZrYVc1blhDSXBYU2s3U3loaExGd2liRzloWkdsdVoxd2lLWDFtZFc1amRHbHZiaUJNS0dFcGUybG1LR0V1WnlsN2RtRnlJR0k5ZVNoaExtWXNZUzVoTG1Nb1hDSjNabHdpTEZ3aVlXTjBhWFpsWENJcEtTeGpQVnRkTEdROVcyRXVZUzVqS0Z3aWQyWmNJaXhjSW14dllXUnBibWRjSWlsZE8ySjhmR011Y0hWemFDaGhMbUV1WXloY0luZG1YQ0lzWENKcGJtRmpkR2wyWlZ3aUtTazdkeWhoTG1Zc1l5eGtLWDFMS0dFc1hDSnBibUZqZEdsMlpWd2lLWDFtZFc1amRHbHZiaUJMS0dFc1lpeGpLWHRwWmloaExtb21KbUV1YUZ0aVhTbHBaaWhqS1dFdWFGdGlYU2hqTG1Nc1NpaGpLU2s3Wld4elpTQmhMbWhiWWwwb0tYMDdablZ1WTNScGIyNGdhbUVvS1h0MGFHbHpMbU05ZTMxOVpuVnVZM1JwYjI0Z2EyRW9ZU3hpTEdNcGUzWmhjaUJrUFZ0ZExHVTdabTl5S0dVZ2FXNGdZaWxwWmloaUxtaGhjMDkzYmxCeWIzQmxjblI1S0dVcEtYdDJZWElnWmoxaExtTmJaVjA3WmlZbVpDNXdkWE5vS0dZb1lsdGxYU3hqS1NsOWNtVjBkWEp1SUdSOU8yWjFibU4wYVc5dUlFMG9ZU3hpS1h0MGFHbHpMbU05WVR0MGFHbHpMbVk5WWp0MGFHbHpMbUU5ZENoMGFHbHpMbU1zWENKemNHRnVYQ0lzZTF3aVlYSnBZUzFvYVdSa1pXNWNJanBjSW5SeWRXVmNJbjBzZEdocGN5NW1LWDFtZFc1amRHbHZiaUJPS0dFcGUzVW9ZUzVqTEZ3aVltOWtlVndpTEdFdVlTbDlablZ1WTNScGIyNGdUeWhoS1h0eVpYUjFjbTVjSW1ScGMzQnNZWGs2WW14dlkyczdjRzl6YVhScGIyNDZZV0p6YjJ4MWRHVTdkRzl3T2kwNU9UazVjSGc3YkdWbWREb3RPVGs1T1hCNE8yWnZiblF0YzJsNlpUb3pNREJ3ZUR0M2FXUjBhRHBoZFhSdk8yaGxhV2RvZERwaGRYUnZPMnhwYm1VdGFHVnBaMmgwT201dmNtMWhiRHR0WVhKbmFXNDZNRHR3WVdSa2FXNW5PakE3Wm05dWRDMTJZWEpwWVc1ME9tNXZjbTFoYkR0M2FHbDBaUzF6Y0dGalpUcHViM2R5WVhBN1ptOXVkQzFtWVcxcGJIazZYQ0lyU1NoaExtTXBLMXdpTzF3aUt5aGNJbVp2Ym5RdGMzUjViR1U2WENJclNDaGhLU3RjSWp0bWIyNTBMWGRsYVdkb2REcGNJaXNvWVM1bUsxd2lNREJjSWlrclhDSTdYQ0lwZlR0bWRXNWpkR2x2YmlCUUtHRXNZaXhqTEdRc1pTeG1LWHQwYUdsekxtYzlZVHQwYUdsekxtbzlZanQwYUdsekxtRTlaRHQwYUdsekxtTTlZenQwYUdsekxtWTlaWHg4TTBVek8zUm9hWE11YUQxbWZIeDJiMmxrSURCOVVDNXdjbTkwYjNSNWNHVXVjM1JoY25ROVpuVnVZM1JwYjI0b0tYdDJZWElnWVQxMGFHbHpMbU11Ynk1a2IyTjFiV1Z1ZEN4aVBYUm9hWE1zWXoxeEtDa3NaRDF1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2Ymloa0xHVXBlMloxYm1OMGFXOXVJR1lvS1h0eEtDa3RZejQ5WWk1bVAyVW9LVHBoTG1admJuUnpMbXh2WVdRb1ptRW9ZaTVoS1N4aUxtZ3BMblJvWlc0b1puVnVZM1JwYjI0b1lTbDdNVHc5WVM1c1pXNW5kR2cvWkNncE9uTmxkRlJwYldWdmRYUW9aaXd5TlNsOUxHWjFibU4wYVc5dUtDbDdaU2dwZlNsOVppZ3BmU2tzWlQxdWRXeHNMR1k5Ym1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b1lTeGtLWHRsUFhObGRGUnBiV1Z2ZFhRb1pDeGlMbVlwZlNrN1VISnZiV2x6WlM1eVlXTmxLRnRtTEdSZEtTNTBhR1Z1S0daMWJtTjBhVzl1S0NsN1pTWW1LR05zWldGeVZHbHRaVzkxZENobEtTeGxQVzUxYkd3cE8ySXVaeWhpTG1FcGZTeG1kVzVqZEdsdmJpZ3BlMkl1YWloaUxtRXBmU2w5TzJaMWJtTjBhVzl1SUZFb1lTeGlMR01zWkN4bExHWXNaeWw3ZEdocGN5NTJQV0U3ZEdocGN5NUNQV0k3ZEdocGN5NWpQV003ZEdocGN5NWhQV1E3ZEdocGN5NXpQV2Q4ZkZ3aVFrVlRZbk4zZVZ3aU8zUm9hWE11WmoxN2ZUdDBhR2x6TG5jOVpYeDhNMFV6TzNSb2FYTXVkVDFtZkh4dWRXeHNPM1JvYVhNdWJUMTBhR2x6TG1vOWRHaHBjeTVvUFhSb2FYTXVaejF1ZFd4c08zUm9hWE11WnoxdVpYY2dUU2gwYUdsekxtTXNkR2hwY3k1ektUdDBhR2x6TG1nOWJtVjNJRTBvZEdocGN5NWpMSFJvYVhNdWN5azdkR2hwY3k1cVBXNWxkeUJOS0hSb2FYTXVZeXgwYUdsekxuTXBPM1JvYVhNdWJUMXVaWGNnVFNoMGFHbHpMbU1zZEdocGN5NXpLVHRoUFc1bGR5QkhLSFJvYVhNdVlTNWpLMXdpTEhObGNtbG1YQ0lzU2loMGFHbHpMbUVwS1R0aFBVOG9ZU2s3ZEdocGN5NW5MbUV1YzNSNWJHVXVZM056VkdWNGREMWhPMkU5Ym1WM0lFY29kR2hwY3k1aExtTXJYQ0lzYzJGdWN5MXpaWEpwWmx3aUxFb29kR2hwY3k1aEtTazdZVDFQS0dFcE8zUm9hWE11YUM1aExuTjBlV3hsTG1OemMxUmxlSFE5WVR0aFBXNWxkeUJIS0Z3aWMyVnlhV1pjSWl4S0tIUm9hWE11WVNrcE8yRTlUeWhoS1R0MGFHbHpMbW91WVM1emRIbHNaUzVqYzNOVVpYaDBQV0U3WVQxdVpYY2dSeWhjSW5OaGJuTXRjMlZ5YVdaY0lpeEtLSFJvYVhNdVlTa3BPMkU5WEc1UEtHRXBPM1JvYVhNdWJTNWhMbk4wZVd4bExtTnpjMVJsZUhROVlUdE9LSFJvYVhNdVp5azdUaWgwYUdsekxtZ3BPMDRvZEdocGN5NXFLVHRPS0hSb2FYTXViU2w5ZG1GeUlGSTllMFE2WENKelpYSnBabHdpTEVNNlhDSnpZVzV6TFhObGNtbG1YQ0o5TEZNOWJuVnNiRHRtZFc1amRHbHZiaUJVS0NsN2FXWW9iblZzYkQwOVBWTXBlM1poY2lCaFBTOUJjSEJzWlZkbFlrdHBkRnhjTHloYk1DMDVYU3NwS0Q4NlhGd3VLRnN3TFRsZEt5a3BMeTVsZUdWaktIZHBibVJ2ZHk1dVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MEtUdFRQU0VoWVNZbUtEVXpOajV3WVhKelpVbHVkQ2hoV3pGZExERXdLWHg4TlRNMlBUMDljR0Z5YzJWSmJuUW9ZVnN4WFN3eE1Da21KakV4UGoxd1lYSnpaVWx1ZENoaFd6SmRMREV3S1NsOWNtVjBkWEp1SUZOOVVTNXdjbTkwYjNSNWNHVXVjM1JoY25ROVpuVnVZM1JwYjI0b0tYdDBhR2x6TG1ZdWMyVnlhV1k5ZEdocGN5NXFMbUV1YjJabWMyVjBWMmxrZEdnN2RHaHBjeTVtVzF3aWMyRnVjeTF6WlhKcFpsd2lYVDEwYUdsekxtMHVZUzV2Wm1aelpYUlhhV1IwYUR0MGFHbHpMa0U5Y1NncE8xVW9kR2hwY3lsOU8xeHVablZ1WTNScGIyNGdiR0VvWVN4aUxHTXBlMlp2Y2loMllYSWdaQ0JwYmlCU0tXbG1LRkl1YUdGelQzZHVVSEp2Y0dWeWRIa29aQ2ttSm1JOVBUMWhMbVpiVWx0a1hWMG1KbU05UFQxaExtWmJVbHRrWFYwcGNtVjBkWEp1SVRBN2NtVjBkWEp1SVRGOVpuVnVZM1JwYjI0Z1ZTaGhLWHQyWVhJZ1lqMWhMbWN1WVM1dlptWnpaWFJYYVdSMGFDeGpQV0V1YUM1aExtOW1abk5sZEZkcFpIUm9MR1E3S0dROVlqMDlQV0V1Wmk1elpYSnBaaVltWXowOVBXRXVabHRjSW5OaGJuTXRjMlZ5YVdaY0lsMHBmSHdvWkQxVUtDa21KbXhoS0dFc1lpeGpLU2s3WkQ5eEtDa3RZUzVCUGoxaExuYy9WQ2dwSmlac1lTaGhMR0lzWXlrbUppaHVkV3hzUFQwOVlTNTFmSHhoTG5VdWFHRnpUM2R1VUhKdmNHVnlkSGtvWVM1aExtTXBLVDlXS0dFc1lTNTJLVHBXS0dFc1lTNUNLVHB0WVNoaEtUcFdLR0VzWVM1MktYMW1kVzVqZEdsdmJpQnRZU2hoS1h0elpYUlVhVzFsYjNWMEtIQW9ablZ1WTNScGIyNG9LWHRWS0hSb2FYTXBmU3hoS1N3MU1DbDlablZ1WTNScGIyNGdWaWhoTEdJcGUzTmxkRlJwYldWdmRYUW9jQ2htZFc1amRHbHZiaWdwZTNZb2RHaHBjeTVuTG1FcE8zWW9kR2hwY3k1b0xtRXBPM1lvZEdocGN5NXFMbUVwTzNZb2RHaHBjeTV0TG1FcE8ySW9kR2hwY3k1aEtYMHNZU2tzTUNsOU8yWjFibU4wYVc5dUlGY29ZU3hpTEdNcGUzUm9hWE11WXoxaE8zUm9hWE11WVQxaU8zUm9hWE11Wmowd08zUm9hWE11YlQxMGFHbHpMbW85SVRFN2RHaHBjeTV6UFdOOWRtRnlJRmc5Ym5Wc2JEdFhMbkJ5YjNSdmRIbHdaUzVuUFdaMWJtTjBhVzl1S0dFcGUzWmhjaUJpUFhSb2FYTXVZVHRpTG1jbUpuY29ZaTVtTEZ0aUxtRXVZeWhjSW5kbVhDSXNZUzVqTEVvb1lTa3VkRzlUZEhKcGJtY29LU3hjSW1GamRHbDJaVndpS1Ywc1cySXVZUzVqS0Z3aWQyWmNJaXhoTG1Nc1NpaGhLUzUwYjFOMGNtbHVaeWdwTEZ3aWJHOWhaR2x1WjF3aUtTeGlMbUV1WXloY0luZG1YQ0lzWVM1akxFb29ZU2t1ZEc5VGRISnBibWNvS1N4Y0ltbHVZV04wYVhabFhDSXBYU2s3U3loaUxGd2labTl1ZEdGamRHbDJaVndpTEdFcE8zUm9hWE11YlQwaE1EdHVZU2gwYUdsektYMDdYRzVYTG5CeWIzUnZkSGx3WlM1b1BXWjFibU4wYVc5dUtHRXBlM1poY2lCaVBYUm9hWE11WVR0cFppaGlMbWNwZTNaaGNpQmpQWGtvWWk1bUxHSXVZUzVqS0Z3aWQyWmNJaXhoTG1Nc1NpaGhLUzUwYjFOMGNtbHVaeWdwTEZ3aVlXTjBhWFpsWENJcEtTeGtQVnRkTEdVOVcySXVZUzVqS0Z3aWQyWmNJaXhoTG1Nc1NpaGhLUzUwYjFOMGNtbHVaeWdwTEZ3aWJHOWhaR2x1WjF3aUtWMDdZM3g4WkM1d2RYTm9LR0l1WVM1aktGd2lkMlpjSWl4aExtTXNTaWhoS1M1MGIxTjBjbWx1WnlncExGd2lhVzVoWTNScGRtVmNJaWtwTzNjb1lpNW1MR1FzWlNsOVN5aGlMRndpWm05dWRHbHVZV04wYVhabFhDSXNZU2s3Ym1Fb2RHaHBjeWw5TzJaMWJtTjBhVzl1SUc1aEtHRXBlekE5UFMwdFlTNW1KaVpoTG1vbUppaGhMbTAvS0dFOVlTNWhMR0V1WnlZbWR5aGhMbVlzVzJFdVlTNWpLRndpZDJaY0lpeGNJbUZqZEdsMlpWd2lLVjBzVzJFdVlTNWpLRndpZDJaY0lpeGNJbXh2WVdScGJtZGNJaWtzWVM1aExtTW9YQ0ozWmx3aUxGd2lhVzVoWTNScGRtVmNJaWxkS1N4TEtHRXNYQ0poWTNScGRtVmNJaWtwT2t3b1lTNWhLU2w5TzJaMWJtTjBhVzl1SUc5aEtHRXBlM1JvYVhNdWFqMWhPM1JvYVhNdVlUMXVaWGNnYW1FN2RHaHBjeTVvUFRBN2RHaHBjeTVtUFhSb2FYTXVaejBoTUgxdllTNXdjbTkwYjNSNWNHVXViRzloWkQxbWRXNWpkR2x2YmloaEtYdDBhR2x6TG1NOWJtVjNJR05oS0hSb2FYTXVhaXhoTG1OdmJuUmxlSFI4ZkhSb2FYTXVhaWs3ZEdocGN5NW5QU0V4SVQwOVlTNWxkbVZ1ZEhNN2RHaHBjeTVtUFNFeElUMDlZUzVqYkdGemMyVnpPM0JoS0hSb2FYTXNibVYzSUdoaEtIUm9hWE11WXl4aEtTeGhLWDA3WEc1bWRXNWpkR2x2YmlCeFlTaGhMR0lzWXl4a0xHVXBlM1poY2lCbVBUQTlQUzB0WVM1b095aGhMbVo4ZkdFdVp5a21Kbk5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0MllYSWdZVDFsZkh4dWRXeHNMRzA5Wkh4OGJuVnNiSHg4ZTMwN2FXWW9NRDA5UFdNdWJHVnVaM1JvSmlabUtVd29ZaTVoS1R0bGJITmxlMkl1WmlzOVl5NXNaVzVuZEdnN1ppWW1LR0l1YWoxbUtUdDJZWElnYUN4c1BWdGRPMlp2Y2lob1BUQTdhRHhqTG14bGJtZDBhRHRvS3lzcGUzWmhjaUJyUFdOYmFGMHNiajF0VzJzdVkxMHNjajFpTG1Fc2VEMXJPM0l1WnlZbWR5aHlMbVlzVzNJdVlTNWpLRndpZDJaY0lpeDRMbU1zU2loNEtTNTBiMU4wY21sdVp5Z3BMRndpYkc5aFpHbHVaMXdpS1YwcE8wc29jaXhjSW1admJuUnNiMkZrYVc1blhDSXNlQ2s3Y2oxdWRXeHNPMmxtS0c1MWJHdzlQVDFZS1dsbUtIZHBibVJ2ZHk1R2IyNTBSbUZqWlNsN2RtRnlJSGc5TDBkbFkydHZMaXBHYVhKbFptOTRYRnd2S0Z4Y1pDc3BMeTVsZUdWaktIZHBibVJ2ZHk1dVlYWnBaMkYwYjNJdWRYTmxja0ZuWlc1MEtTeDRZVDB2VDFNZ1dDNHFWbVZ5YzJsdmJseGNMekV3WEZ3dUxpcFRZV1poY21rdkxtVjRaV01vZDJsdVpHOTNMbTVoZG1sbllYUnZjaTUxYzJWeVFXZGxiblFwSmlZdlFYQndiR1V2TG1WNFpXTW9kMmx1Wkc5M0xtNWhkbWxuWVhSdmNpNTJaVzVrYjNJcE8xeHVXRDE0UHpReVBIQmhjbk5sU1c1MEtIaGJNVjBzTVRBcE9uaGhQeUV4T2lFd2ZXVnNjMlVnV0QwaE1UdFlQM0k5Ym1WM0lGQW9jQ2hpTG1jc1lpa3NjQ2hpTG1nc1lpa3NZaTVqTEdzc1lpNXpMRzRwT25JOWJtVjNJRkVvY0NoaUxtY3NZaWtzY0NoaUxtZ3NZaWtzWWk1akxHc3NZaTV6TEdFc2JpazdiQzV3ZFhOb0tISXBmV1p2Y2lob1BUQTdhRHhzTG14bGJtZDBhRHRvS3lzcGJGdG9YUzV6ZEdGeWRDZ3BmWDBzTUNsOVpuVnVZM1JwYjI0Z2NHRW9ZU3hpTEdNcGUzWmhjaUJrUFZ0ZExHVTlZeTUwYVcxbGIzVjBPMmxoS0dJcE8zWmhjaUJrUFd0aEtHRXVZU3hqTEdFdVl5a3NaajF1WlhjZ1Z5aGhMbU1zWWl4bEtUdGhMbWc5WkM1c1pXNW5kR2c3WWowd08yWnZjaWhqUFdRdWJHVnVaM1JvTzJJOFl6dGlLeXNwWkZ0aVhTNXNiMkZrS0daMWJtTjBhVzl1S0dJc1pDeGpLWHR4WVNoaExHWXNZaXhrTEdNcGZTbDlPMloxYm1OMGFXOXVJSEpoS0dFc1lpbDdkR2hwY3k1alBXRTdkR2hwY3k1aFBXSjlYRzV5WVM1d2NtOTBiM1I1Y0dVdWJHOWhaRDFtZFc1amRHbHZiaWhoS1h0bWRXNWpkR2x2YmlCaUtDbDdhV1lvWmx0Y0lsOWZiWFJwWDJadWRFeHpkRndpSzJSZEtYdDJZWElnWXoxbVcxd2lYMTl0ZEdsZlptNTBUSE4wWENJclpGMG9LU3hsUFZ0ZExHZzdhV1lvWXlsbWIzSW9kbUZ5SUd3OU1EdHNQR011YkdWdVozUm9PMndyS3lsN2RtRnlJR3M5WTF0c1hTNW1iMjUwWm1GdGFXeDVPM1p2YVdRZ01DRTlZMXRzWFM1bWIyNTBVM1I1YkdVbUpuWnZhV1FnTUNFOVkxdHNYUzVtYjI1MFYyVnBaMmgwUHlob1BXTmJiRjB1Wm05dWRGTjBlV3hsSzJOYmJGMHVabTl1ZEZkbGFXZG9kQ3hsTG5CMWMyZ29ibVYzSUVjb2F5eG9LU2twT21VdWNIVnphQ2h1WlhjZ1J5aHJLU2w5WVNobEtYMWxiSE5sSUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdGlLQ2w5TERVd0tYMTJZWElnWXoxMGFHbHpMR1E5WXk1aExuQnliMnBsWTNSSlpDeGxQV011WVM1MlpYSnphVzl1TzJsbUtHUXBlM1poY2lCbVBXTXVZeTV2TzBFb2RHaHBjeTVqTENoakxtRXVZWEJwZkh4Y0ltaDBkSEJ6T2k4dlptRnpkQzVtYjI1MGN5NXVaWFF2YW5OaGNHbGNJaWtyWENJdlhDSXJaQ3RjSWk1cWMxd2lLeWhsUDF3aVAzWTlYQ0lyWlRwY0lsd2lLU3htZFc1amRHbHZiaWhsS1h0bFAyRW9XMTBwT2lobVcxd2lYMTlOYjI1dmRIbHdaVU52Ym1acFozVnlZWFJwYjI1Zlgxd2lLMXh1WkYwOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1l5NWhmU3hpS0NrcGZTa3VhV1E5WENKZlgwMXZibTkwZVhCbFFWQkpVMk55YVhCMFgxOWNJaXRrZldWc2MyVWdZU2hiWFNsOU8yWjFibU4wYVc5dUlITmhLR0VzWWlsN2RHaHBjeTVqUFdFN2RHaHBjeTVoUFdKOWMyRXVjSEp2ZEc5MGVYQmxMbXh2WVdROVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJc1l5eGtQWFJvYVhNdVlTNTFjbXh6Zkh4YlhTeGxQWFJvYVhNdVlTNW1ZVzFwYkdsbGMzeDhXMTBzWmoxMGFHbHpMbUV1ZEdWemRGTjBjbWx1WjNOOGZIdDlMR2M5Ym1WM0lFSTdZajB3TzJadmNpaGpQV1F1YkdWdVozUm9PMkk4WXp0aUt5c3BlaWgwYUdsekxtTXNaRnRpWFN4REtHY3BLVHQyWVhJZ2JUMWJYVHRpUFRBN1ptOXlLR005WlM1c1pXNW5kR2c3WWp4ak8ySXJLeWxwWmloa1BXVmJZbDB1YzNCc2FYUW9YQ0k2WENJcExHUmJNVjBwWm05eUtIWmhjaUJvUFdSYk1WMHVjM0JzYVhRb1hDSXNYQ0lwTEd3OU1EdHNQR2d1YkdWdVozUm9PMndyUFRFcGJTNXdkWE5vS0c1bGR5QkhLR1JiTUYwc2FGdHNYU2twTzJWc2MyVWdiUzV3ZFhOb0tHNWxkeUJIS0dSYk1GMHBLVHRGS0djc1puVnVZM1JwYjI0b0tYdGhLRzBzWmlsOUtYMDdablZ1WTNScGIyNGdkR0VvWVN4aUtYdGhQM1JvYVhNdVl6MWhPblJvYVhNdVl6MTFZVHQwYUdsekxtRTlXMTA3ZEdocGN5NW1QVnRkTzNSb2FYTXVaejFpZkh4Y0lsd2lmWFpoY2lCMVlUMWNJbWgwZEhCek9pOHZabTl1ZEhNdVoyOXZaMnhsWVhCcGN5NWpiMjB2WTNOelhDSTdablZ1WTNScGIyNGdkbUVvWVN4aUtYdG1iM0lvZG1GeUlHTTlZaTVzWlc1bmRHZ3NaRDB3TzJROFl6dGtLeXNwZTNaaGNpQmxQV0piWkYwdWMzQnNhWFFvWENJNlhDSXBPek05UFdVdWJHVnVaM1JvSmlaaExtWXVjSFZ6YUNobExuQnZjQ2dwS1R0MllYSWdaajFjSWx3aU96STlQV1V1YkdWdVozUm9KaVpjSWx3aUlUMWxXekZkSmlZb1pqMWNJanBjSWlrN1lTNWhMbkIxYzJnb1pTNXFiMmx1S0dZcEtYMTlYRzVtZFc1amRHbHZiaUIzWVNoaEtYdHBaaWd3UFQxaExtRXViR1Z1WjNSb0tYUm9jbTkzSUVWeWNtOXlLRndpVG04Z1ptOXVkSE1nZEc4Z2JHOWhaQ0ZjSWlrN2FXWW9MVEVoUFdFdVl5NXBibVJsZUU5bUtGd2lhMmwwUFZ3aUtTbHlaWFIxY200Z1lTNWpPMlp2Y2loMllYSWdZajFoTG1FdWJHVnVaM1JvTEdNOVcxMHNaRDB3TzJROFlqdGtLeXNwWXk1d2RYTm9LR0V1WVZ0a1hTNXlaWEJzWVdObEtDOGdMMmNzWENJclhDSXBLVHRpUFdFdVl5dGNJajltWVcxcGJIazlYQ0lyWXk1cWIybHVLRndpSlRkRFhDSXBPekE4WVM1bUxteGxibWQwYUNZbUtHSXJQVndpSm5OMVluTmxkRDFjSWl0aExtWXVhbTlwYmloY0lpeGNJaWtwT3pBOFlTNW5MbXhsYm1kMGFDWW1LR0lyUFZ3aUpuUmxlSFE5WENJclpXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHRXVaeWtwTzNKbGRIVnliaUJpZlR0bWRXNWpkR2x2YmlCNVlTaGhLWHQwYUdsekxtWTlZVHQwYUdsekxtRTlXMTA3ZEdocGN5NWpQWHQ5ZlZ4dWRtRnlJSHBoUFh0c1lYUnBianBjSWtKRlUySnpkM2xjSWl4Y0lteGhkR2x1TFdWNGRGd2lPbHdpWEZ4MU1EQmxOMXhjZFRBd1pqWmNYSFV3TUdaalhGeDFNREV4Wmx4Y2RUQXhOV1pjSWl4amVYSnBiR3hwWXpwY0lseGNkVEEwTXpsY1hIVXdORFJtWEZ4MU1EUXhObHdpTEdkeVpXVnJPbHdpWEZ4MU1ETmlNVnhjZFRBellqSmNYSFV3TTJFelhDSXNhMmh0WlhJNlhDSmNYSFV4Tnpnd1hGeDFNVGM0TVZ4Y2RURTNPREpjSWl4SVlXNTFiV0Z1T2x3aVhGeDFNVGM0TUZ4Y2RURTNPREZjWEhVeE56Z3lYQ0o5TEVGaFBYdDBhR2x1T2x3aU1Wd2lMR1Y0ZEhKaGJHbG5hSFE2WENJeVhDSXNYQ0psZUhSeVlTMXNhV2RvZEZ3aU9sd2lNbHdpTEhWc2RISmhiR2xuYUhRNlhDSXlYQ0lzWENKMWJIUnlZUzFzYVdkb2RGd2lPbHdpTWx3aUxHeHBaMmgwT2x3aU0xd2lMSEpsWjNWc1lYSTZYQ0kwWENJc1ltOXZhenBjSWpSY0lpeHRaV1JwZFcwNlhDSTFYQ0lzWENKelpXMXBMV0p2YkdSY0lqcGNJalpjSWl4elpXMXBZbTlzWkRwY0lqWmNJaXhjSW1SbGJXa3RZbTlzWkZ3aU9sd2lObHdpTEdSbGJXbGliMnhrT2x3aU5sd2lMR0p2YkdRNlhDSTNYQ0lzWENKbGVIUnlZUzFpYjJ4a1hDSTZYQ0k0WENJc1pYaDBjbUZpYjJ4a09sd2lPRndpTEZ3aWRXeDBjbUV0WW05c1pGd2lPbHdpT0Z3aUxIVnNkSEpoWW05c1pEcGNJamhjSWl4aWJHRmphenBjSWpsY0lpeG9aV0YyZVRwY0lqbGNJaXhzT2x3aU0xd2lMSEk2WENJMFhDSXNZanBjSWpkY0luMHNRbUU5ZTJrNlhDSnBYQ0lzYVhSaGJHbGpPbHdpYVZ3aUxHNDZYQ0p1WENJc2JtOXliV0ZzT2x3aWJsd2lmU3hjYmtOaFBTOWVLSFJvYVc1OEtEODZLRDg2WlhoMGNtRjhkV3gwY21FcExUOHBQMnhwWjJoMGZISmxaM1ZzWVhKOFltOXZhM3h0WldScGRXMThLRDg2S0Q4NmMyVnRhWHhrWlcxcGZHVjRkSEpoZkhWc2RISmhLUzAvS1Q5aWIyeGtmR0pzWVdOcmZHaGxZWFo1Zkd4OGNueGlmRnN4TFRsZE1EQXBQeWh1ZkdsOGJtOXliV0ZzZkdsMFlXeHBZeWsvSkM4N1hHNW1kVzVqZEdsdmJpQkVZU2hoS1h0bWIzSW9kbUZ5SUdJOVlTNW1MbXhsYm1kMGFDeGpQVEE3WXp4aU8yTXJLeWw3ZG1GeUlHUTlZUzVtVzJOZExuTndiR2wwS0Z3aU9sd2lLU3hsUFdSYk1GMHVjbVZ3YkdGalpTZ3ZYRndyTDJjc1hDSWdYQ0lwTEdZOVcxd2lialJjSWwwN2FXWW9Nanc5WkM1c1pXNW5kR2dwZTNaaGNpQm5PM1poY2lCdFBXUmJNVjA3WnoxYlhUdHBaaWh0S1dadmNpaDJZWElnYlQxdExuTndiR2wwS0Z3aUxGd2lLU3hvUFcwdWJHVnVaM1JvTEd3OU1EdHNQR2c3YkNzcktYdDJZWElnYXp0clBXMWJiRjA3YVdZb2F5NXRZWFJqYUNndlhsdGNYSGN0WFNza0x5a3BlM1poY2lCdVBVTmhMbVY0WldNb2F5NTBiMHh2ZDJWeVEyRnpaU2dwS1R0cFppaHVkV3hzUFQxdUtXczlYQ0pjSWp0bGJITmxlMnM5YmxzeVhUdHJQVzUxYkd3OVBXdDhmRndpWENJOVBXcy9YQ0p1WENJNlFtRmJhMTA3YmoxdVd6RmRPMmxtS0c1MWJHdzlQVzU4ZkZ3aVhDSTlQVzRwYmoxY0lqUmNJanRsYkhObElIWmhjaUJ5UFVGaFcyNWRMRzQ5Y2o5eU9tbHpUbUZPS0c0cFAxd2lORndpT200dWMzVmljM1J5S0RBc01TazdhejFiYXl4dVhTNXFiMmx1S0Z3aVhDSXBmWDFsYkhObElHczlYQ0pjSWp0ckppWm5MbkIxYzJnb2F5bDlNRHhuTG14bGJtZDBhQ1ltS0dZOVp5azdNejA5WkM1c1pXNW5kR2dtSmloa1BXUmJNbDBzWnoxYlhTeGtQV1EvWkM1emNHeHBkQ2hjSWl4Y0lpazZYRzVuTERBOFpDNXNaVzVuZEdnbUppaGtQWHBoVzJSYk1GMWRLU1ltS0dFdVkxdGxYVDFrS1NsOVlTNWpXMlZkZkh3b1pEMTZZVnRsWFNrbUppaGhMbU5iWlYwOVpDazdabTl5S0dROU1EdGtQR1l1YkdWdVozUm9PMlFyUFRFcFlTNWhMbkIxYzJnb2JtVjNJRWNvWlN4bVcyUmRLU2w5ZlR0bWRXNWpkR2x2YmlCRllTaGhMR0lwZTNSb2FYTXVZejFoTzNSb2FYTXVZVDFpZlhaaGNpQkdZVDE3UVhKcGJXODZJVEFzUTI5MWMybHVaVG9oTUN4VWFXNXZjem9oTUgwN1JXRXVjSEp2ZEc5MGVYQmxMbXh2WVdROVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdJOWJtVjNJRUlzWXoxMGFHbHpMbU1zWkQxdVpYY2dkR0VvZEdocGN5NWhMbUZ3YVN4MGFHbHpMbUV1ZEdWNGRDa3NaVDEwYUdsekxtRXVabUZ0YVd4cFpYTTdkbUVvWkN4bEtUdDJZWElnWmoxdVpYY2dlV0VvWlNrN1JHRW9aaWs3ZWloakxIZGhLR1FwTEVNb1lpa3BPMFVvWWl4bWRXNWpkR2x2YmlncGUyRW9aaTVoTEdZdVl5eEdZU2w5S1gwN1puVnVZM1JwYjI0Z1IyRW9ZU3hpS1h0MGFHbHpMbU05WVR0MGFHbHpMbUU5WW4xSFlTNXdjbTkwYjNSNWNHVXViRzloWkQxbWRXNWpkR2x2YmloaEtYdDJZWElnWWoxMGFHbHpMbUV1YVdRc1l6MTBhR2x6TG1NdWJ6dGlQMEVvZEdocGN5NWpMQ2gwYUdsekxtRXVZWEJwZkh4Y0ltaDBkSEJ6T2k4dmRYTmxMblI1Y0dWcmFYUXVibVYwWENJcEsxd2lMMXdpSzJJclhDSXVhbk5jSWl4bWRXNWpkR2x2YmloaUtYdHBaaWhpS1dFb1cxMHBPMlZzYzJVZ2FXWW9ZeTVVZVhCbGEybDBKaVpqTGxSNWNHVnJhWFF1WTI5dVptbG5KaVpqTGxSNWNHVnJhWFF1WTI5dVptbG5MbVp1S1h0aVBXTXVWSGx3Wld0cGRDNWpiMjVtYVdjdVptNDdabTl5S0haaGNpQmxQVnRkTEdZOU1EdG1QR0l1YkdWdVozUm9PMllyUFRJcFptOXlLSFpoY2lCblBXSmJabDBzYlQxaVcyWXJNVjBzYUQwd08yZzhiUzVzWlc1bmRHZzdhQ3NyS1dVdWNIVnphQ2h1WlhjZ1J5aG5MRzFiYUYwcEtUdDBjbmw3WXk1VWVYQmxhMmwwTG14dllXUW9lMlYyWlc1MGN6b2hNU3hqYkdGemMyVnpPaUV4TEdGemVXNWpPaUV3ZlNsOVkyRjBZMmdvYkNsN2ZXRW9aU2w5ZlN3eVJUTXBPbUVvVzEwcGZUdG1kVzVqZEdsdmJpQklZU2hoTEdJcGUzUm9hWE11WXoxaE8zUm9hWE11WmoxaU8zUm9hWE11WVQxYlhYMUlZUzV3Y205MGIzUjVjR1V1Ykc5aFpEMW1kVzVqZEdsdmJpaGhLWHQyWVhJZ1lqMTBhR2x6TG1ZdWFXUXNZejEwYUdsekxtTXVieXhrUFhSb2FYTTdZajhvWXk1ZlgzZGxZbVp2Ym5SbWIyNTBaR1ZqYTIxdlpIVnNaVjlmZkh3b1l5NWZYM2RsWW1admJuUm1iMjUwWkdWamEyMXZaSFZzWlY5ZlBYdDlLU3hqTGw5ZmQyVmlabTl1ZEdadmJuUmtaV05yYlc5a2RXeGxYMTliWWwwOVpuVnVZM1JwYjI0b1lpeGpLWHRtYjNJb2RtRnlJR2M5TUN4dFBXTXVabTl1ZEhNdWJHVnVaM1JvTzJjOGJUc3JLMmNwZTNaaGNpQm9QV011Wm05dWRITmJaMTA3WkM1aExuQjFjMmdvYm1WM0lFY29hQzV1WVcxbExHZGhLRndpWm05dWRDMTNaV2xuYUhRNlhDSXJhQzUzWldsbmFIUXJYQ0k3Wm05dWRDMXpkSGxzWlRwY0lpdG9Mbk4wZVd4bEtTa3BmV0VvWkM1aEtYMHNRU2gwYUdsekxtTXNLSFJvYVhNdVppNWhjR2w4ZkZ3aWFIUjBjSE02THk5bUxtWnZiblJrWldOckxtTnZiUzl6TDJOemN5OXFjeTljSWlrclpXRW9kR2hwY3k1aktTdGNJaTljSWl0aUsxd2lMbXB6WENJc1puVnVZM1JwYjI0b1lpbDdZaVltWVNoYlhTbDlLU2s2WVNoYlhTbDlPM1poY2lCWlBXNWxkeUJ2WVNoM2FXNWtiM2NwTzFrdVlTNWpMbU4xYzNSdmJUMW1kVzVqZEdsdmJpaGhMR0lwZTNKbGRIVnliaUJ1WlhjZ2MyRW9ZaXhoS1gwN1dTNWhMbU11Wm05dWRHUmxZMnM5Wm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY200Z2JtVjNJRWhoS0dJc1lTbDlPMWt1WVM1akxtMXZibTkwZVhCbFBXWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJRzVsZHlCeVlTaGlMR0VwZlR0WkxtRXVZeTUwZVhCbGEybDBQV1oxYm1OMGFXOXVLR0VzWWlsN2NtVjBkWEp1SUc1bGR5QkhZU2hpTEdFcGZUdFpMbUV1WXk1bmIyOW5iR1U5Wm5WdVkzUnBiMjRvWVN4aUtYdHlaWFIxY200Z2JtVjNJRVZoS0dJc1lTbDlPM1poY2lCYVBYdHNiMkZrT25Bb1dTNXNiMkZrTEZrcGZUdGNJbVoxYm1OMGFXOXVYQ0k5UFQxMGVYQmxiMllnWkdWbWFXNWxKaVprWldacGJtVXVZVzFrUDJSbFptbHVaU2htZFc1amRHbHZiaWdwZTNKbGRIVnliaUJhZlNrNlhDSjFibVJsWm1sdVpXUmNJaUU5UFhSNWNHVnZaaUJ0YjJSMWJHVW1KbTF2WkhWc1pTNWxlSEJ2Y25SelAyMXZaSFZzWlM1bGVIQnZjblJ6UFZvNktIZHBibVJ2ZHk1WFpXSkdiMjUwUFZvc2QybHVaRzkzTGxkbFlrWnZiblJEYjI1bWFXY21KbGt1Ykc5aFpDaDNhVzVrYjNjdVYyVmlSbTl1ZEVOdmJtWnBaeWtwTzMwb0tTazdYRzRpTENJdkx5Qk5iMlIxYkdVZ1RHbG1aVnh1YVcxd2IzSjBJQ2N1TDJkbGJtVnlZV3duWEc1Y2JtTnZibk4wSUdOdmJHOXljeUE5SUZzZ0ozQnBibXNuTENBbmNtVmtKeXdnSjJKc2RXVW5JRjFjYm1OdmJuTjBJRzF2UTI5c2IzSnpJRDBnV3lkaWJIVmxKeXdnSjI5eVlXNW5aU2RkWEc1Y2JpOHZJRmRsSUdoaGRtVWdSWE0ySUVkdmIyUnBaWE1nZEdoaGJtdHpJSFJ2SUVKaFltVnNYRzVqYjI1emRDQmhiR3hVYUdWRGIyeHZjbk1nUFNCYklDNHVMbU52Ykc5eWN5d2diVzlEYjJ4dmNuTWdYVnh1WVd4c1ZHaGxRMjlzYjNKekxtMWhjQ2hqSUQwK0lHTnZibk52YkdVdWJHOW5LR01wS1Z4dUlpd2lhVzF3YjNKMElDUWdabkp2YlNBbmFuRjFaWEo1SjF4dVhHNHZLbHh1SkNnbkkyTnlaV0YwWlY5amRYTjBiMjFsY2ljcExuTjFZbTFwZENobWRXNWpkR2x2YmlobEtYdGNiaUFnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNWNiaUFnSUNCMllYSWdabWx5YzNSZmJtRnRaU0E5SUNRb0p5Tm1hWEp6ZEY5dVlXMWxKeWt1ZG1Gc0tDa3VkSEpwYlNncE8xeHVJQ0FnSUNRb0p5Tm1hWEp6ZEY5dVlXMWxKeWt1ZG1Gc0tHWnBjbk4wWDI1aGJXVXBPMXh1SUNBZ0lIWmhjaUJzWVhOMFgyNWhiV1VnUFNBa0tDY2piR0Z6ZEY5dVlXMWxKeWt1ZG1Gc0tDa3VkSEpwYlNncE8xeHVJQ0FnSUNRb0p5TnNZWE4wWDI1aGJXVW5LUzUyWVd3b2JHRnpkRjl1WVcxbEtUdGNiaUFnSUNCMllYSWdaVzFoYVd3Z1BTQWtLQ2NqWlcxaGFXd25LUzUyWVd3b0tTNTBjbWx0S0NrN1hHNGdJQ0FnSkNnbkkyVnRZV2xzSnlrdWRtRnNLR1Z0WVdsc0tUdGNiaUFnSUNCMllYSWdjR0Z6YzNkdmNtUWdQU0FrS0NjamNHRnpjM2R2Y21RbktTNTJZV3dvS1R0Y2JpQWdJQ0JwWmlobWFYSnpkRjl1WVcxbElEMDlJRndpWENJcElIdGNiaUFnSUNBZ0lDQWdKQ2duSTJacGNuTjBYMjVoYldVbktTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LR3hoYzNSZmJtRnRaU0E5UFNCY0lsd2lLU0I3WEc0Z0lDQWdJQ0FnSUNRb0p5TnNZWE4wWDI1aGJXVW5LUzVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtS0dWdFlXbHNJRDA5SUZ3aVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSkNnbkkyVnRZV2xzSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCcFppaHdZWE56ZDI5eVpDQTlQU0JjSWx3aUtTQjdYRzRnSUNBZ0lDQWdJQ1FvSnlOd1lYTnpkMjl5WkNjcExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnY0dGeVlXMGdQU0I3WEc0Z0lDQWdJQ0FnSUZ3aVkzVnpkRzl0WlhKY0lqb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSm1hWEp6ZEY5dVlXMWxYQ0k2SUdacGNuTjBYMjVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW14aGMzUmZibUZ0WlZ3aU9pQnNZWE4wWDI1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltVnRZV2xzWENJNklHVnRZV2xzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0oyWlhKcFptbGxaRjlsYldGcGJGd2lPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKd1lYTnpkMjl5WkZ3aU9pQndZWE56ZDI5eVpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNHRnpjM2R2Y21SZlkyOXVabWx5YldGMGFXOXVYQ0k2SUhCaGMzTjNiM0prTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p6Wlc1a1gyVnRZV2xzWDNkbGJHTnZiV1ZjSWpvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0IyWVhJZ2RYSnNJRDBnSkNoMGFHbHpLUzVoZEhSeUtDZGhZM1JwYjI0bktUdGNibHh1WEc0Z0lDQWdkbUZ5SUhob2RIUndJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNGdJQ0FnZUdoMGRIQXViMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxJRDBnWm5WdVkzUnBiMjRvY21WemNHOXVjMlVwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNtVmhaSGxUZEdGMFpTQTlQU0EwSUNZbUlIUm9hWE11YzNSaGRIVnpJRDA5SURJd01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29jbVZ6Y0c5dWMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMmx1Wkc5M0xteHZZMkYwYVc5dUxtaHlaV1lnUFNBbkwyRmpZMjkxYm5Rbk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnSUNCNGFIUjBjQzV2Y0dWdUtGd2lVRTlUVkZ3aUxDQjFjbXdzSUhSeWRXVXBPMXh1SUNBZ0lIaG9kSFJ3TG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvWENKRGIyNTBaVzUwTFhSNWNHVmNJaXdnWENKaGNIQnNhV05oZEdsdmJpOXFjMjl1WENJcE8xeHVJQ0FnSUhob2RIUndMbk5sYm1Rb1NsTlBUaTV6ZEhKcGJtZHBabmtvY0dGeVlXMHBLVHRjYm4wcE8xeHVLaTljYmx4dUpDZ25JM1Z3WkdGMFpTMXdjbTltYVd4bEp5a3VjM1ZpYldsMEtHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNibHh1SUNBZ0lIWmhjaUJtYVhKemRGOXVZVzFsSUQwZ0pDZ25JMlpwY25OMFgyNWhiV1VuS1M1MllXd29LUzUwY21sdEtDazdYRzRnSUNBZ0pDZ25JMlpwY25OMFgyNWhiV1VuS1M1MllXd29abWx5YzNSZmJtRnRaU2s3WEc0Z0lDQWdkbUZ5SUd4aGMzUmZibUZ0WlNBOUlDUW9KeU5zWVhOMFgyNWhiV1VuS1M1MllXd29LUzUwY21sdEtDazdYRzRnSUNBZ0pDZ25JMnhoYzNSZmJtRnRaU2NwTG5aaGJDaHNZWE4wWDI1aGJXVXBPMXh1SUNBZ0lIWmhjaUJsYldGcGJDQTlJQ1FvSnlObGJXRnBiQ2NwTG5aaGJDZ3BMblJ5YVcwb0tUdGNiaUFnSUNBa0tDY2paVzFoYVd3bktTNTJZV3dvWlcxaGFXd3BPMXh1SUNBZ0lHbG1LR1pwY25OMFgyNWhiV1VnUFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnSUNBa0tDY2pabWx5YzNSZmJtRnRaU2NwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZb2JHRnpkRjl1WVcxbElEMDlJRndpWENJcElIdGNiaUFnSUNBZ0lDQWdKQ2duSTJ4aGMzUmZibUZ0WlNjcExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWW9aVzFoYVd3Z1BUMGdYQ0pjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWtLQ2NqWlcxaGFXd25LUzVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIQmhjbUZ0SUQwZ2UxeHVJQ0FnSUNBZ0lDQmNJbU4xYzNSdmJXVnlYQ0k2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpYVdSY0lqb2dKQ2duSTJOMWMzUnZiV1Z5WDJsa0p5a3VkbUZzS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1acGNuTjBYMjVoYldWY0lqb2dabWx5YzNSZmJtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2liR0Z6ZEY5dVlXMWxYQ0k2SUd4aGMzUmZibUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWlcxaGFXeGNJam9nWlcxaGFXeGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQjJZWElnZFhKc0lEMGdKQ2gwYUdsektTNWhkSFJ5S0NkaFkzUnBiMjRuS1R0Y2JseHVYRzRnSUNBZ2RtRnlJSGhvZEhSd0lEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WEc0Z0lDQWdlR2gwZEhBdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5KbFlXUjVVM1JoZEdVZ1BUMGdOQ0FtSmlCMGFHbHpMbk4wWVhSMWN5QTlQU0F5TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVzYjJOaGRHbHZiaTVvY21WbUlEMGdKeTloWTJOdmRXNTBKenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdlR2gwZEhBdWIzQmxiaWhjSWxCVlZGd2lMQ0IxY213c0lIUnlkV1VwTzF4dUlDQWdJSGhvZEhSd0xuTmxkRkpsY1hWbGMzUklaV0ZrWlhJb1hDSkRiMjUwWlc1MExYUjVjR1ZjSWl3Z1hDSmhjSEJzYVdOaGRHbHZiaTlxYzI5dVhDSXBPMXh1SUNBZ0lIaG9kSFJ3TG5ObGJtUW9TbE5QVGk1emRISnBibWRwWm5rb2NHRnlZVzBwS1R0Y2JuMHBPMXh1WEc0a0tDY2pZMmhoYm1kbExYQmhjM04zYjNKa0p5a3VjM1ZpYldsMEtHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCMllYSWdjSGRrSUQwZ0pDZ25JMk4xYzNSdmJXVnlYM0JoYzNOM2IzSmtKeWt1ZG1Gc0tDazdYRzRnSUNBZ2RtRnlJSEpsWDNCM1pDQTlJQ1FvSnlOamRYTjBiMjFsY2w5amIyNW1hWEp0WDNCaGMzTjNiM0prSnlrdWRtRnNLQ2s3WEc0Z0lDQWdhV1lvY0hka0lEMDlJRndpWENJcElIdGNiaUFnSUNBZ0lDQWdKQ2duSTJOMWMzUnZiV1Z5WDNCaGMzTjNiM0prSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1LSEIzWkNBaFBTQnlaVjl3ZDJRcElIdGNiaUFnSUNBZ0lDQWdKQ2duSTJOMWMzUnZiV1Z5WDJOdmJtWnBjbTFmY0dGemMzZHZjbVFuS1M1bWIyTjFjeWdwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEJoY21GdElEMGdlMXh1SUNBZ0lDQWdJQ0JjSW1OMWMzUnZiV1Z5WENJNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWFXUmNJam9nSkNnbkkyTjFjM1J2YldWeVgybGtKeWt1ZG1Gc0tDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luQmhjM04zYjNKa1hDSTZJSEIzWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0dGemMzZHZjbVJmWTI5dVptbHliV0YwYVc5dVhDSTZJSEpsWDNCM1pGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lIWmhjaUIxY213Z1BTQWtLSFJvYVhNcExtRjBkSElvSjJGamRHbHZiaWNwTzF4dVhHNWNiaUFnSUNCMllYSWdlR2gwZEhBZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVHRjYmlBZ0lDQjRhSFIwY0M1dmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJVZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y21WaFpIbFRkR0YwWlNBOVBTQTBJQ1ltSUhSb2FYTXVjM1JoZEhWeklEMDlJREl3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbXh2WTJGMGFXOXVMbWh5WldZZ1BTQW5MMkZqWTI5MWJuUW5PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQjRhSFIwY0M1dmNHVnVLRndpVUZWVVhDSXNJSFZ5YkN3Z2RISjFaU2s3WEc0Z0lDQWdlR2gwZEhBdWMyVjBVbVZ4ZFdWemRFaGxZV1JsY2loY0lrTnZiblJsYm5RdGRIbHdaVndpTENCY0ltRndjR3hwWTJGMGFXOXVMMnB6YjI1Y0lpazdYRzRnSUNBZ2VHaDBkSEF1YzJWdVpDaEtVMDlPTG5OMGNtbHVaMmxtZVNod1lYSmhiU2twTzF4dWZTazdYRzVjYmk4dklHRmpZMjkxYm5RZ2JXRndjeUJjYm1sbUtDUW9KeU5qZFhOMGIyMWxjbDl0WVhCekp5a3ViR1Z1WjNSb0tTQjdYRzVjYmlBZ0lDQXZMeUJzYjJGa0lHMWhjSE5jYmlBZ0lDQjJZWElnWVhCcFgzVnliQ0E5SUNkb2RIUndjem92TDI1dkxYTnRZV3hzTFhCc1lXNHVhR1Z5YjJ0MVlYQndMbU52YlM5aGNHa25PMXh1SUNBZ0lIWmhjaUJqZFhOMGIyMWxja2xrSUQwZ2JXVjBZUzV3WVdkbExtTjFjM1J2YldWeVNXUTdYRzRnSUNBZ2RtRnlJRzE1VFdGd2N6dGNiaUFnSUNCMllYSWdjMlZzWldOMFpXUk5ZWEFnUFNCN1hHNGdJQ0FnSUNBZ0lHbGtPaUF0TVN4Y2JpQWdJQ0FnSUNBZ2JXRndYMjVoYldVNklGd2lYQ0lzWEc0Z0lDQWdJQ0FnSUcxaGNGOXpaWFIwYVc1bk9pQmNJbHdpWEc0Z0lDQWdmVHRjYmx4dUlDQWdJQ1F1WjJWMFNsTlBUaWdnWVhCcFgzVnliQ0FySUZ3aUwyMWhjQzlzYjJGa0wxd2lJQ3NnWTNWemRHOXRaWEpKWkN3Z1puVnVZM1JwYjI0b0lISmxjM0J2Ym5ObElDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlnaGNtVnpjRzl1YzJVdVpYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzE1VFdGd2N5QTlJSEpsYzNCdmJuTmxMbVJoZEdFN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBkR1Z0WDJOMElEMGdKeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJWMGRHbHVaeUE5SUNjbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYlhsTllYQnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hWFJsYlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1jZ1BTQktVMDlPTG5CaGNuTmxLR2wwWlcwdWJXRndYM05sZEhScGJtY3BMblJ2VTNSeWFXNW5LQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRYMk4wSUQwZ0p5Y2dLeUJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aVlteHZZMnRmYldGd1hDSWdaR0YwWVMxcFpEMWNJaWNnS3lCcGRHVnRMbWxrSUNzZ0oxd2lJR1JoZEdFdGMyVjBkR2x1WnoxY0lpY2dLeUJ6WlhSMGFXNW5JQ3NnSjF3aUlHUmhkR0V0Ym1GdFpUMWNJaWNnS3lCcGRHVnRMbTFoY0Y5dVlXMWxJQ3NnSjF3aVBpY3JYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnp4a2FYWWdZMnhoYzNNOVhDSmliM2hjSWo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblBHbHRaeUJ6Y21NOVhDSW5JQ3NnZDJsdVpHOTNMbTFoY0Y5cFkyOXVYM1Z5YkNBcklDZGNJaUF2UGljclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjOGNENG5JQ3NnYVhSbGJTNXRZWEJmYm1GdFpTQXJJQ2M4TDNBK0p5dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6eGthWFlnWTJ4aGMzTTlYQ0oyWDJKdmNtUmxjbHdpUGp3dlpHbDJQaWNyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aWFGOWliM0prWlhKY0lqNDhMMlJwZGo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblBHUnBkaUJqYkdGemN6MWNJbTkyWlhKc1lYQXRMV0oxZEhSdmJuTmNJajRuSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6eGthWFkrSnl0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUEdKMWRIUnZiaUJqYkdGemN6MWNJbUoxZEhSdmJpQmlkWFIwYjI0dExXZHlaV1Z1SUdKMWRIUnZiaTB0WldScGRGd2lQa1ZrYVhROEwySjFkSFJ2Ymo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjOFluVjBkRzl1SUdOc1lYTnpQVndpWW5WMGRHOXVJR0oxZEhSdmJpMHRaR2x6WVdKc1pTQmlkWFIwYjI0dExXUmxiR1YwWlZ3aVBtUmxiR1YwWlR3dlluVjBkRzl1UGljclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5QQzlrYVhZK0p5dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6d3ZaR2wyUGljclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5QQzlrYVhZK0p5dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDYzhMMlJwZGo0bk8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duSTJOMWMzUnZiV1Z5WDIxaGNITWdMbTFoY0MxaWJHOWphM01uS1M1aGNIQmxibVFvYVhSbGJWOWpkQ2s3SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2NtVnpjRzl1YzJVcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OGdZMnhwWTJzZ2JXRndYRzRnSUNBZ0pDZ25JMk4xYzNSdmJXVnlYMjFoY0hNbktTNXZiaWduWTJ4cFkyc25MQ0FuTG1Kc2IyTnJYMjFoY0Y5dVpYY25MQ0JtZFc1amRHbHZiaWhsS1h0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFoY0Y5cFpDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCMllYSWdiV0Z3WDI1aGJXVWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQjJZWElnYldGd1gzTmxkSFJwYm1jZ1BTQmJYVHRjYmx4dUlDQWdJQ0FnSUNCelpXeGxZM1JsWkUxaGNDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ0WVhCZmFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYQmZibUZ0WlRvZ2JXRndYMjVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhCZmMyVjBkR2x1WnpvZ2JXRndYM05sZEhScGJtZGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBa0tDY2piV0Z3WDI1aGJXVW5LUzUyWVd3b0lITmxiR1ZqZEdWa1RXRndMbTFoY0Y5dVlXMWxLVHRjYmx4dUlDQWdJQ0FnSUNBa0tGd2lJMk4xYzNSdmJXVnlYMjFoY0hNdGJXOWtZV3hjSWlrdWJXOWtZV3dvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabUZrWlVSMWNtRjBhVzl1T2lBeE1EQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCbVlXUmxSR1ZzWVhrNklEQXVNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNiM05sUTJ4aGMzTTZJQ2RwWTI5dUxYSmxiVzkyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkc5elpWUmxlSFE2SUNkWUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdWelkyRndaVU5zYjNObE9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYVdOclEyeHZjMlU2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWtLQ2NqWTNWemRHOXRaWEpmYldGd2N5MXRiMlJoYkNBdVluVjBkRzl1SnlrdWNtVnRiM1psUTJ4aGMzTW9KMkoxZEhSdmJpMHRaM0psWlc0bktTNWhaR1JEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BPeUJjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzh2SUdOc2FXTnJJRzFoY0Z4dUlDQWdJQ1FvSnlOamRYTjBiMjFsY2w5dFlYQnpKeWt1YjI0b0oyTnNhV05ySnl3Z0p5NWlkWFIwYjI0dExXVmthWFFuTENCbWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtVnVkQ0E5SUNRb2RHaHBjeWt1Y0dGeVpXNTBjeWduTG1Kc2IyTnJYMjFoY0NjcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYldGd1gybGtJRDBnSkNod1lYSmxiblFwTG1SaGRHRW9KMmxrSnlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0WVhCZmJtRnRaU0E5SUNRb2NHRnlaVzUwS1M1a1lYUmhLQ2R1WVcxbEp5azdYRzRnSUNBZ0lDQWdJSFpoY2lCdFlYQmZjMlYwZEdsdVp5QTlJQ1FvY0dGeVpXNTBLUzVrWVhSaEtDZHpaWFIwYVc1bkp5ay9JQ1FvY0dGeVpXNTBLUzVrWVhSaEtDZHpaWFIwYVc1bkp5a3VjM0JzYVhRb1hDSXNYQ0lwT2lCYlhUdGNibHh1SUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRTFoY0NBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQnRZWEJmYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WVhCZmJtRnRaVG9nYldGd1gyNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRZWEJmYzJWMGRHbHVaem9nYldGd1gzTmxkSFJwYm1kY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvYzJWc1pXTjBaV1JOWVhBcE8xeHVJQ0FnSUNBZ0lDQWtLQ2NqYldGd1gyNWhiV1VuS1M1MllXd29JSE5sYkdWamRHVmtUV0Z3TG0xaGNGOXVZVzFsS1R0Y2JseHVJQ0FnSUNBZ0lDQWtLRndpSTJOMWMzUnZiV1Z5WDIxaGNITXRiVzlrWVd4Y0lpa3ViVzlrWVd3b2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1Ga1pVUjFjbUYwYVc5dU9pQXhNREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1ZV1JsUkdWc1lYazZJREF1TWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zYjNObFEyeGhjM002SUNkcFkyOXVMWEpsYlc5MlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaVlJsZUhRNklDZFlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnpZMkZ3WlVOc2IzTmxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2FXTnJRMnh2YzJVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FrS0NjalkzVnpkRzl0WlhKZmJXRndjeTF0YjJSaGJDQXVZblYwZEc5dUp5a3VjbVZ0YjNabFEyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1M1aFpHUkRiR0Z6Y3lnblluVjBkRzl1TFMxbmNtVmxiaWNwT3lCY2JseHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0pDZ25JMk4xYzNSdmJXVnlYMjFoY0hNdGJXOWtZV3duS1M1dmJpZ2tMbTF2WkdGc0xrOVFSVTRzSUdaMWJtTjBhVzl1S0dWMlpXNTBMQ0J0YjJSaGJDa2dlMXh1SUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc1pYUW5jeUJpZFdsc1pDQmhJR3hwYzNRZ2IyWWdZM1Z5Y21WdWRHeDVJSE5sYkdWamRHVmtJR052ZFc1MGNtbGxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29iV0Z3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb0lIWmhjaUJwSUdsdUlHMWhjQzVrWVhSaFVISnZkbWxrWlhJdVlYSmxZWE1nS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR0Z5WldFZ1BTQnRZWEF1WkdGMFlWQnliM1pwWkdWeUxtRnlaV0Z6V3lCcElGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NCaGNtVmhMbk5vYjNkQmMxTmxiR1ZqZEdWa0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtVmhMbk5vYjNkQmMxTmxiR1ZqZEdWa0lEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXRnJaU0IwYUdVZ1kyaGhjblFnZEdGclpTQnBiaUJ1WlhjZ1kyOXNiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSmxZUzUyWVd4cFpHRjBaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5MWJuUnlhV1Z6SUQwZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHazlNRHNnYVR4elpXeGxZM1JsWkUxaGNDNXRZWEJmYzJWMGRHbHVaeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoY21WaElEMGdiV0Z3TG1kbGRFOWlhbVZqZEVKNVNXUW9jMlZzWldOMFpXUk5ZWEF1YldGd1gzTmxkSFJwYm1kYmFWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Z3aVlYSmxZVDA5UFZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWhoY21WaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbVZoTG5Ob2IzZEJjMU5sYkdWamRHVmtJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUcxaGEyVWdkR2hsSUdOb1lYSjBJSFJoYTJVZ2FXNGdibVYzSUdOdmJHOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpsWVM1MllXeHBaR0YwWlNncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5SeWFXVnpMbkIxYzJnb0lHRnlaV0V1YVdRZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1kyOTFiblJ5YVdWektUdGNiaUFnSUNBZ0lDQWdmU3dnTlRBd0tUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlHeHZZV1JmYldGd2N5Z3BJSHRjYmlBZ0lDQWdJQ0FnSkNnbkkyTjFjM1J2YldWeVgyMWhjSE1nTG1Kc2IyTnJYMjFoY0NjcExtVmhZMmdvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0NFa0tIUm9hWE1wTG1oaGMwTnNZWE56S0NkaWJHOWphMTl0WVhCZmJtVjNKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tIUm9hWE1wTG5KbGJXOTJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnYVhSbGJWOWpkQ0E5SUNjbk8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJWMGRHbHVaeUE5SUNjbk8xeHVJQ0FnSUNBZ0lDQnRlVTFoY0hNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocGRHVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bklEMGdTbE5QVGk1d1lYSnpaU2hwZEdWdExtMWhjRjl6WlhSMGFXNW5LUzUwYjFOMGNtbHVaeWdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdFgyTjBJRDBnSnljZ0t5QmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnp4a2FYWWdZMnhoYzNNOVhDSmliRzlqYTE5dFlYQmNJaUJrWVhSaExXbGtQVndpSnlBcklHbDBaVzB1YVdRZ0t5QW5YQ0lnWkdGMFlTMXpaWFIwYVc1blBWd2lKeUFySUhObGRIUnBibWNnS3lBblhDSWdaR0YwWVMxdVlXMWxQVndpSnlBcklHbDBaVzB1YldGd1gyNWhiV1VnS3lBblhDSStKeXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aVltOTRYQ0krSnl0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5QR2x0WnlCemNtTTlYQ0luSUNzZ2QybHVaRzkzTG0xaGNGOXBZMjl1WDNWeWJDQXJJQ2RjSWlBdlBpY3JYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnp4d1BpY2dLeUJwZEdWdExtMWhjRjl1WVcxbElDc2dKend2Y0Q0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aWRsOWliM0prWlhKY0lqNDhMMlJwZGo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aWFGOWliM0prWlhKY0lqNDhMMlJwZGo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M4WkdsMklHTnNZWE56UFZ3aWIzWmxjbXhoY0MwdFluVjBkRzl1YzF3aVBpY3JYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDYzhaR2wyUGljclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5QR0oxZEhSdmJpQmpiR0Z6Y3oxY0ltSjFkSFJ2YmlCaWRYUjBiMjR0TFdkeVpXVnVJR0oxZEhSdmJpMHRaV1JwZEZ3aVBrVmthWFE4TDJKMWRIUnZiajRuSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6eGlkWFIwYjI0Z1kyeGhjM005WENKaWRYUjBiMjRnWW5WMGRHOXVMUzFrYVhOaFlteGxJR0oxZEhSdmJpMHRaR1ZzWlhSbFhDSStaR1ZzWlhSbFBDOWlkWFIwYjI0K0p5dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p6d3ZaR2wyUGljclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKend2WkdsMlBpY3JYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDYzhMMlJwZGo0bksxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUEM5a2FYWStKenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duSTJOMWMzUnZiV1Z5WDIxaGNITWdMbTFoY0MxaWJHOWphM01uS1M1aGNIQmxibVFvYVhSbGJWOWpkQ2s3SUZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBa0tDY2pjMkYyWlMxNWIzVnlMVzFoY0NCcGJuQjFkQzVpZFhSMGIyNG5LUzVqYkdsamF5aG1kVzVqZEdsdmJpaGxLWHRjYmlBZ0lDQWdJQ0FnYVdZb0pDaDBhR2x6S1M1b1lYTkRiR0Z6Y3lnblluVjBkRzl1TFMxa2FYTmhZbXhsWkNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUcxaGNGOXVZVzFsSUQwZ0pDNTBjbWx0S0NRb0p5TnRZWEJmYm1GdFpTY3BMblpoYkNncEtUdGNiaUFnSUNBZ0lDQWdhV1lvYldGd1gyNWhiV1VnUFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duSTIxaGNGOXVZVzFsSnlrdVptOWpkWE1vS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ1FvSnlOellYWmxMWGx2ZFhJdGJXRndJQzVpZFhSMGIyNG5LUzV5WlcxdmRtVkRiR0Z6Y3lnblluVjBkRzl1TFMxbmNtVmxiaWNwTG1Ga1pFTnNZWE56S0NkaWRYUjBiMjR0TFdScGMyRmliR1ZrSnlrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaGpiM1Z1ZEhKcFpYTXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRnlZVzF6SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGd09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1E2SUhObGJHVmpkR1ZrVFdGd0xtbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklHMWhjRjl1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1jNklHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCamRYTjBiMjFsY2w5cFpEb2diV1YwWVM1d1lXZGxMbU4xYzNSdmJXVnlTV1JjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWh3WVhKaGJYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNRdVlXcGhlQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmNHOXpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXc2SUdGd2FWOTFjbXdnS3lBbkwyMWhjQzl6WVhabEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJSEJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0hKbGMzQnZibk5sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JYbE5ZWEJ6SUQwZ2NtVnpjRzl1YzJVdVpHRjBZVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5TnpZWFpsTFhsdmRYSXRiV0Z3SUM1aWRYUjBiMjRuS1M1eVpXMXZkbVZEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BMbUZrWkVOc1lYTnpLQ2RpZFhSMGIyNHRMV2R5WldWdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duSTIxaGNGOXVZVzFsSnlrdWRtRnNLQ2NuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9YQ0lqWTNWemRHOXRaWEpmYldGd2N5MXRiMlJoYkNCaExtTnNiM05sTFcxdlpHRnNYQ0lnS1M1MGNtbG5aMlZ5S0NCY0ltTnNhV05yWENJZ0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3h2WVdSZmJXRndjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZVZVhCbE9pQW5hbk52YmlkY2JpQWdJQ0FnSUNBZ2ZTazdJRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnWkdWc1pYUmxJRzFoY0Z4dVhHNGdJQ0FnTHk4Z1kyeHBZMnNnYldGd1hHNGdJQ0FnSkNnbkkyTjFjM1J2YldWeVgyMWhjSE1uS1M1dmJpZ25ZMnhwWTJzbkxDQW5MbUoxZEhSdmJpMHRaR1ZzWlhSbEp5d2dablZ1WTNScGIyNG9aU2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWEpsYm5RZ1BTQWtLSFJvYVhNcExuQmhjbVZ1ZEhNb0p5NWliRzlqYTE5dFlYQW5LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMWhjRjlwWkNBOUlDUW9jR0Z5Wlc1MEtTNWtZWFJoS0NkcFpDY3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JXRndYMjVoYldVZ1BTQWtLSEJoY21WdWRDa3VaR0YwWVNnbmJtRnRaU2NwTzF4dUlDQWdJQ0FnSUNCMllYSWdiV0Z3WDNObGRIUnBibWNnUFNBa0tIQmhjbVZ1ZENrdVpHRjBZU2duYzJWMGRHbHVaeWNwUHlBa0tIQmhjbVZ1ZENrdVpHRjBZU2duYzJWMGRHbHVaeWNwTG5Od2JHbDBLRndpTEZ3aUtUb2dXMTA3WEc1Y2JpQWdJQ0FnSUNBZ2MyVnNaV04wWldSTllYQWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nYldGd1gybGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRndYMjVoYldVNklHMWhjRjl1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGd1gzTmxkSFJwYm1jNklHMWhjRjl6WlhSMGFXNW5YRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBa0tDY2paR1ZzWlhSbFgzbHZkWEpmYldGd0lITndZVzR1WkdWc1pYUmxYMjFoY0MwdGJtRnRaU2NwTG1oMGJXd29iV0Z3WDI1aGJXVXBPMXh1WEc0Z0lDQWdJQ0FnSUNRb1hDSWpZM1Z6ZEc5dFpYSmZiV0Z3Y3kxdGIyUmhiRjlrWld4bGRHVmNJaWt1Ylc5a1lXd29lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRmtaVVIxY21GMGFXOXVPaUF4TURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtWVdSbFJHVnNZWGs2SURBdU1peGNiaUFnSUNBZ0lDQWdJQ0FnSUdOc2IzTmxRMnhoYzNNNklDZHBZMjl1TFhKbGJXOTJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiRzl6WlZSbGVIUTZJQ2RZSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z6WTJGd1pVTnNiM05sT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNhV05yUTJ4dmMyVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnSkNnbllTNWpZVzVqWld3dGJXOWtZV3duS1M1amJHbGpheWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBa0tGd2lMbTF2WkdGc0lHRXVZMnh2YzJVdGJXOWtZV3hjSWlBcExuUnlhV2RuWlhJb0lGd2lZMnhwWTJ0Y0lpQXBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdKQ2duSTJSbGJHVjBaUzE1YjNWeUxXMWhjQ0JwYm5CMWRDNWlkWFIwYjI0bktTNWpiR2xqYXlobWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDQWdhV1lvSkNoMGFHbHpLUzVvWVhORGJHRnpjeWduWW5WMGRHOXVMUzFrYVhOaFlteGxaQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JsTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0pDZ25JMlJsYkdWMFpTMTViM1Z5TFcxaGNDQXVZblYwZEc5dUp5a3VjbVZ0YjNabFEyeGhjM01vSjJKMWRIUnZiaTB0WjNKbFpXNG5LUzVoWkdSRGJHRnpjeWduWW5WMGRHOXVMUzFrYVhOaFlteGxaQ2NwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdTbE5QVGk1emRISnBibWRwWm5rb1kyOTFiblJ5YVdWektUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNtRnRjeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ6Wld4bFkzUmxaRTFoY0M1cFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR04xYzNSdmJXVnlYMmxrT2lCdFpYUmhMbkJoWjJVdVkzVnpkRzl0WlhKSlpGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktGd2ljR0Z5WVcxelhDSXBYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0hCaGNtRnRjeWs3WEc1Y2JpQWdJQ0FnSUNBZ0pDNWhhbUY0S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHdiM04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ1lYQnBYM1Z5YkNBcklDY3ZiV0Z3TDJSbGJHVjBaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoT2lCd1lYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkV05qWlhOek9pQm1kVzVqZEdsdmJpaHlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzE1VFdGd2N5QTlJSEpsYzNCdmJuTmxMbVJoZEdFN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2NqYzJGMlpTMTViM1Z5TFcxaGNDQXVZblYwZEc5dUp5a3VjbVZ0YjNabFEyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1M1aFpHUkRiR0Z6Y3lnblluVjBkRzl1TFMxbmNtVmxiaWNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDaGNJaU5qZFhOMGIyMWxjbDl0WVhCekxXMXZaR0ZzWDJSbGJHVjBaU0JoTG1Oc2IzTmxMVzF2WkdGc1hDSWdLUzUwY21sbloyVnlLQ0JjSW1Oc2FXTnJYQ0lnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZZV1JmYldGd2N5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRlVlWEJsT2lBbmFuTnZiaWRjYmlBZ0lDQWdJQ0FnZlNrN0lGeHVJQ0FnSUgwcE8xeHVmVnh1WEc1Y2JseHVJaXdpYVcxd2IzSjBJRmRsWWtadmJuUWdabkp2YlNBbmQyVmlabTl1ZEd4dllXUmxjaWRjYmx4dUx5OGdUR0Y2ZVNCc2IyRmtJRzltSUdadmJuUnpJR1p5YjIwZ1IyOXZaMnhsTENCVWVYQmxhMmwwSUdGdVpDQnRiM0psWEc0dkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkSGx3Wld0cGRDOTNaV0ptYjI1MGJHOWhaR1Z5WEc1WFpXSkdiMjUwTG14dllXUW9lMXh1SUNCbmIyOW5iR1U2SUh0Y2JpQWdJQ0JtWVcxcGJHbGxjem9nV3lkUGNHVnVJRk5oYm5NblhWeHVJQ0I5WEc1OUtWeHVJaXdpYVcxd2IzSjBJQ2N1TDJweGRXVnllU2RjYm1sdGNHOXlkQ0FuTGk5bWIyNTBjeWRjYm1sdGNHOXlkQ0FuTGk5dGIyUmhiQ2RjYm1sdGNHOXlkQ0FuTGk5emJHbGpheWRjYm1sdGNHOXlkQ0FuTGk5dFlYQW5YRzVwYlhCdmNuUWdKeTR2WVdOamIzVnVkQ2RjYm1sdGNHOXlkQ0FuTGk5d2NtOWtkV04wWDIxaGNDZGNibHh1WEc0a0tHUnZZM1Z0Wlc1MEtTNXlaV0ZrZVNobWRXNWpkR2x2YmlncElIdGNibHh1SUNBZ0lDOHFJRTVoWjJsbllYUnBiMjRnS2k5Y2JpQWdJQ0FrS0NjamJtRjJMWFJ2WjJkc1pTY3BMbU5zYVdOcktHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJR2xtS0NRb2RHaHBjeWt1YVhNb1hDSTZZMmhsWTJ0bFpGd2lLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG1OdmJuUmxiblF0ZDNKaGNDY3BMbU56Y3lnbmRISmhibk5tYjNKdEp5d2dKM1J5WVc1emJHRjBaVmdvT0RnbEtTY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbWx1Wm05aVlYSW5LUzVqYzNNb0ozUnlZVzV6Wm05eWJTY3NJQ2QwY21GdWMyeGhkR1ZZS0RnNEpTa25LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVqYjI1MFpXNTBMWGR5WVhBbktTNWpjM01vSjNSeVlXNXpabTl5YlNjc0lDZDBjbUZ1YzJ4aGRHVllLREFwSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWFXNW1iMkpoY2ljcExtTnpjeWduZEhKaGJuTm1iM0p0Snl3Z0ozUnlZVzV6YkdGMFpWZ29NQ2tuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWtLQ2RpYjJSNUxDQm9kRzFzSnlrdWRHOW5aMnhsUTJ4aGMzTW9KMjkyWlhKbWJHOTNMV2hwWkdSbGJpY3BPMXh1SUNBZ0lDQWdJQ0FrS0Njall5MXRZWE5ySnlrdWRHOW5aMnhsUTJ4aGMzTW9KMmx6TFdGamRHbDJaU2NwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnSkNnbkkyTXRiV0Z6YXljcExtTnNhV05yS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWtLQ2NqYjNabGNteGhlU2NwTG1aaFpHVlBkWFFvSjNOc2IzY25LVHRjYmlBZ0lDQWdJQ0FnSkNoMGFHbHpLUzV5WlcxdmRtVkRiR0Z6Y3lnbmFYTXRZV04wYVhabEp5azdYRzRnSUNBZ0lDQWdJQ1FvSnlOdVlYWXRkRzluWjJ4bEp5a3VjSEp2Y0NnblkyaGxZMnRsWkNjc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0pDZ25MbU52Ym5SbGJuUXRkM0poY0NjcExtTnpjeWduZEhKaGJuTm1iM0p0Snl3Z0ozUnlZVzV6YkdGMFpWZ29NQ2tuS1R0Y2JpQWdJQ0FnSUNBZ0pDZ25MbWx1Wm05aVlYSW5LUzVqYzNNb0ozUnlZVzV6Wm05eWJTY3NJQ2QwY21GdWMyeGhkR1ZZS0RBcEp5azdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQWtLQ2RoTG1obFlXUmxjbDlmYm1GMkxXbDBaVzB0YkdsdWF5MHRZV05qYjNWdWRDY3BMbU5zYVdOcktHWjFibU4wYVc5dUtHVXBlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2Wnlna0tIZHBibVJ2ZHlrdWQybGtkR2dvS1NsY2JpQWdJQ0FnSUNBZ2FXWW9KQ2gzYVc1a2IzY3BMbmRwWkhSb0tDa2dQQ0EzTmpnZ0ppWWdkSGx3Wlc5bUlHMWxkR0V1Y0dGblpTNWpkWE4wYjIxbGNrbGtJQ0U5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0Nkc2FTNW9aV0ZrWlhKZlgyNWhkaTFwZEdWdEp5a3VhR2xrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbmJHa3VhR1ZoWkdWeVgxOXVZWFl0YVhSbGJTMWhZMk52ZFc1MGN5Y3BMbk5vYjNjb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdKQ2duYkdrdWFHVmhaR1Z5WDE5dVlYWXRhWFJsYlMxaFkyTnZkVzUwY3kxaVlXTnJJR0V1YUdWaFpHVnlYMTl1WVhZdGFYUmxiUzFzYVc1ckp5a3VZMnhwWTJzb1puVnVZM1JwYjI0b1pTbDdYRzRnSUNBZ0lDQWdJR1V1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSkNnbmJHa3VhR1ZoWkdWeVgxOXVZWFl0YVhSbGJTY3BMbk5vYjNjb0tUdGNiaUFnSUNBZ0lDQWdKQ2duYkdrdWFHVmhaR1Z5WDE5dVlYWXRhWFJsYlMxaFkyTnZkVzUwY3ljcExtaHBaR1VvS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0F2S2lCSWFXUmxJRzF2WW1sc1pTQnVZWFlnZDJobGJpQjNhVzVrYjNjZ2NtVnphWHBsSUNvdlhHNGdJQ0FnSkNoM2FXNWtiM2NwTG5KbGMybDZaU2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ1FvZDJsdVpHOTNLUzUzYVdSMGFDZ3BJRDRnTnpZNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY2piM1psY214aGVTY3BMbVpoWkdWUGRYUW9KM05zYjNjbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5TmpMVzFoYzJzbktTNXlaVzF2ZG1WRGJHRnpjeWduYVhNdFlXTjBhWFpsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjamJtRjJMWFJ2WjJkc1pTY3BMbkJ5YjNBb0oyTm9aV05yWldRbkxDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdVkyOXVkR1Z1ZEMxM2NtRndKeWt1WTNOektDZDBjbUZ1YzJadmNtMG5MQ0FuZEhKaGJuTnNZWFJsV0Nnd0tTY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbWx1Wm05aVlYSW5LUzVqYzNNb0ozUnlZVzV6Wm05eWJTY3NJQ2QwY21GdWMyeGhkR1ZZS0RBcEp5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzhxSUZCeWIyUjFZM1FnY0dGblpTQnpkR0Z5ZENBcUwxeHVYRzRnSUNBZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FrS0NjdWNISnZaSFZqZEY5ZmFXMWhaMlVuS1M1amJHOXVaU2dwTG1sdWMyVnlkRUpsWm05eVpTZ2tLQ2N1Y0hKdlpIVmpkRjlmWkdWelkzSnBjSFJwYjI0bktTazdYRzRnSUNBZ2ZTa29LVHRjYmx4dUlDQWdJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0pDZ25MbkJ5YjJSMVkzUmZYMmx0WVdkbExXWnZjaWNwTG5Oc2FXTnJLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyaHZkem9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXUmhjSFJwZG1WSVpXbG5hSFE2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGMwNWhka1p2Y2pvZ0p5NXdjbTlrZFdOMExYUm9kVzFpYm1GcGJITW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSnliM2R6T2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptRmtaVG9nZEhKMVpWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSkNnbkxuQnliMlIxWTNRdGRHaDFiV0p1WVdsc2N5Y3BMbk5zYVdOcktIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJodmR6b2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyTnliMnhzT2lBekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhOT1lYWkdiM0k2SUNjdWNISnZaSFZqZEY5ZmFXMWhaMlV0Wm05eUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeWNtOTNjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZV0pzWlZkcFpIUm9PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNWMFpYSkZaR2RsVEdsdGFYUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IzUnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdadlkzVnpUMjVUWld4bFkzUTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBLQ2s3WEc1Y2JpQWdJQ0FrS0NjdWNISnZaSFZqZENjcExtOXVLQ2RqYkdsamF5Y3NJQ2N1YzNkaGRHTm9MV1ZzWlcxbGJuUW5MQ0JtZFc1amRHbHZiaWhsS1NCN0lDQmNiaUFnSUNBZ0lDQWdKQ2gwYUdsektTNXdZWEpsYm5SektDZDFiQzV6ZDJGMFkyZ25LUzVtYVc1a0tDZHNhUzV6ZDJGMFkyZ3RaV3hsYldWdWRDY3BMbkpsYlc5MlpVTnNZWE56S0NkemQyRjBZMmd0WVdOMGFYWmxKeWs3WEc0Z0lDQWdJQ0FnSUNRb2RHaHBjeWt1WVdSa1EyeGhjM01vSjNOM1lYUmphQzFoWTNScGRtVW5LVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdjMlZzWldOMFpXUlRhWHBsSUQwZ0pDaDBhR2x6S1M1a1lYUmhLQ2QyWVd4MVpTY3BPMXh1SUNBZ0lDQWdJQ0FrS0hSb2FYTXBMbkJoY21WdWRITW9KM1ZzTG5OM1lYUmphQ2NwTG1acGJtUW9KeTV3Y205a2RXTjBYMTl6YldGc2JDMTBhWFJzWlNCemNHRnVKeWt1ZEdWNGRDaHpaV3hsWTNSbFpGTnBlbVVwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y0hScGIyNWZhVzVrWlhnZ1BTQWtLSFJvYVhNcExtUmhkR0VvSjJsa0p5azdYRzVjYmlBZ0lDQWdJQ0FnSkNnbkkzQnliMlIxWTNRdGMyVnNaV04wTFc5d2RHbHZiaTBuSUNzZ2IzQjBhVzl1WDJsdVpHVjRLUzUyWVd3b2MyVnNaV04wWldSVGFYcGxLUzUwY21sbloyVnlLQ2RqYUdGdVoyVW5LVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJQzhxSUZCeWIyUjFZM1FnY0dGblpTQkZUa1FnS2k5Y2JseHVJQ0FnSUM4cUlFTkJVbFFnVUdGblpTQlRWRUZTVkNvdlhHNWNiaUFnSUNBa0tDY3VZblYwZEc5dUxXTnZibVpwY20wbktTNWpiR2xqYXlobWRXNWpkR2x2YmlobEtTQjdYRzRnSUNBZ0lDQWdJQ1FvZEdocGN5a3VZV1JrUTJ4aGMzTW9KMkoxZEhSdmJpMHRaR2x6WVdKc1pXUW5LUzUwWlhoMEtDZERiMjVtYVhKdFpXUW5LVHRjYmlBZ0lDQWdJQ0FnSkNnbkxtSjFkSFJ2YmkxamFHVmphMjkxZENjcExuSmxiVzkyWlVOc1lYTnpLQ2RpZFhSMGIyNHRMV1JwYzJGaWJHVmtKeWt1WVdSa1EyeGhjM01vSjJKMWRIUnZiaTB0WjNKbFpXNG5LVHRjYmlBZ0lDQWdJQ0FnSUdVdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCbWRXNWpkR2x2YmlCeVpXMXZkbVZmWTNWeWNtVnVZM2xmYzNSeWFXNW5LR04xY25KbGJtTjVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhjbklnUFNCamRYSnlaVzVqZVM1emNHeHBkQ2duSUNjcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYSnlXekJkTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNBa0tDY3VZMkZ5ZEY5ZmNYVmhiblJwZEhrbktTNXZiaWduWTJoaGJtZGxKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVhSbGJVbGtJRDBnY0dGeWMyVkpiblFvSkNoMGFHbHpLUzVoZEhSeUtDZHBkR1Z0YVdRbktTazdYRzRnSUNBZ0lDQWdJSFpoY2lCeGRIa2dQU0J3WVhKelpVbHVkQ2drS0hSb2FYTXBMblpoYkNncEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUd4dmIzQnBibVJsZUNBOUlIQmhjbk5sU1c1MEtDUW9kR2hwY3lrdVpHRjBZU2duYkc5dmNHbHVaR1Y0SnlrcE8xeHVYRzRnSUNBZ0lDQWdJQ1F1WVdwaGVDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNtdzZJQ2N2WTJGeWRDOWphR0Z1WjJVdWFuTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVlI1Y0dVNklDZHFjMjl1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHdiM04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFNklIdHhkV0Z1ZEdsMGVUb2djWFI1TENCcFpEb2dhWFJsYlVsa2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0dsMFpXMUVZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29hWFJsYlVSaGRHRXBYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR2s5TUR0cFBHbDBaVzFFWVhSaExtbDBaVzF6TG14bGJtZDBhRHRwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbDBaVzBnUFNCcGRHVnRSR0YwWVM1cGRHVnRjMXRwWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvYVhSbGJTNXBaQ0E5UFNCcGRHVnRTV1FnSmlZZ2FTQTlQU0JzYjI5d2FXNWtaWGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5TmpZWEowWDE5c2FXNWxhWFJsYlY5c2FXNWxjSEpwWTJWZkp5QXJJR2wwWlcwdWFXUXJJQ2RmSnlBcklHeHZiM0JwYm1SbGVDa3VkR1Y0ZENoeVpXMXZkbVZmWTNWeWNtVnVZM2xmYzNSeWFXNW5LRk5vYjNCcFpua3VabTl5YldGMFRXOXVaWGtvYVhSbGJTNXNhVzVsWDNCeWFXTmxMQ0IzYVc1a2IzY3ViVzl1WlhsZmQybDBhRjlqZFhKeVpXNWplVjltYjNKdFlYUXBLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjalkyRnlkRjlmYzNWaWRHOTBZV3d0Y0hKcFkyVW5LUzUwWlhoMEtISmxiVzkyWlY5amRYSnlaVzVqZVY5emRISnBibWNvVTJodmNHbG1lUzVtYjNKdFlYUk5iMjVsZVNocGRHVnRSR0YwWVM1dmNtbG5hVzVoYkY5MGIzUmhiRjl3Y21salpTd2dkMmx1Wkc5M0xtMXZibVY1WDNkcGRHaGZZM1Z5Y21WdVkzbGZabTl5YldGMEtTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOallYSjBYMTkwYjNSaGJDMXdjbWxqWlNjcExuUmxlSFFvY21WdGIzWmxYMk4xY25KbGJtTjVYM04wY21sdVp5aFRhRzl3YVdaNUxtWnZjbTFoZEUxdmJtVjVLR2wwWlcxRVlYUmhMblJ2ZEdGc1gzQnlhV05sTENCM2FXNWtiM2N1Ylc5dVpYbGZkMmwwYUY5amRYSnlaVzVqZVY5bWIzSnRZWFFwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JMk5oY25RdFkyOTFiblFuS1M1MFpYaDBLR2wwWlcxRVlYUmhMbWwwWlcxZlkyOTFiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JjYmlBZ0lDQXZLaUJEUVZKVUlGQmhaMlVnUlU1RUtpOWNibHh1SUNBZ0lDOHFTVzVtYjJKaGNpQlRWRUZTVkNBcUwxeHVJQ0FnSUNRb0p5NWlkWFIwYjI0dFkyeHZjMlVuS1M1amJHbGpheWhtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0pDZ25MbWx1Wm05aVlYSW5LUzVqYzNNb0oyUnBjM0JzWVhrbkxDQW5ibTl1WlNjcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUM4cUlFbHVabTlpWVhJZ1JXNWtJQ292WEc1OUtUdGNiaUlzSW1sdGNHOXlkQ0FrSUdaeWIyMGdKMnB4ZFdWeWVTZGNibHh1THk4Z1FXUmthVzVuSUdwUmRXVnllU0IwYnlCMGFHVWdaMnh2WW1Gc0lITmpiM0JsWEc1bmJHOWlZV3d1SkNBOUlHZHNiMkpoYkM1cVVYVmxjbmtnUFNBa1hHNGlMQ0pwYlhCdmNuUWdKQ0JtY205dElDZHFjWFZsY25rblhHNWNiaVFvWkc5amRXMWxiblFwTG5KbFlXUjVLR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNGdJQ0FnZG1GeUlHRndhVjkxY213Z1BTQW5hSFIwY0hNNkx5OXVieTF6YldGc2JDMXdiR0Z1TG1obGNtOXJkV0Z3Y0M1amIyMHZZWEJwSnp0Y2JseHVJQ0F2S2lCdFlYQWdjR0ZuWlNCemRHRnlkQ0FxTDF4dVhHNGdJR2xtS0NRb0p5TnRZWEJ3WVc1bGJDY3BMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2JYbE5ZWEJ6TzF4dUlDQWdJQ0FnSUNCMllYSWdZM1Z6ZEc5dFpYSkpaRHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxiR1ZqZEdWa1RXRndJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SUMweExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGd1gyNWhiV1U2SUZ3aVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdFlYQmZjMlYwZEdsdVp6b2dYQ0pjSWx4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJR2xtS0hSNWNHVnZaaUJ0WlhSaExuQmhaMlV1WTNWemRHOXRaWEpKWkNBOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFpYSkpaQ0E5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0Z3aUkzTnBaMjVwYmkxdGIyUmhiRndpS1M1dGIyUmhiQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Ga1pVUjFjbUYwYVc5dU9pQXhNREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Ga1pVUmxiR0Y1T2lBd0xqSXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zYjNObFEyeGhjM002SUNkcFkyOXVMWEpsYlc5MlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh2YzJWVVpYaDBPaUFuV0Njc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYTmpZWEJsUTJ4dmMyVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNhV05yUTJ4dmMyVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOMWMzUnZiV1Z5U1dRZ1BTQnRaWFJoTG5CaFoyVXVZM1Z6ZEc5dFpYSkpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LR04xYzNSdmJXVnlTV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdKQzVuWlhSS1UwOU9LQ0JoY0dsZmRYSnNJQ3NnWENJdmJXRndMMnh2WVdRdlhDSWdLeUJqZFhOMGIyMWxja2xrTENCbWRXNWpkR2x2YmlnZ2NtVnpjRzl1YzJVZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvSVhKbGMzQnZibk5sTG1WeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTV0WVhCelgxOWlkWFIwYjI1elgyeHZZV1FuS1M1eVpXMXZkbVZEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BMbUZrWkVOc1lYTnpLQ2RpZFhSMGIyNHRMV2R5WldWdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxNVRXRndjeUE5SUhKbGMzQnZibk5sTG1SaGRHRTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktISmxjM0J2Ym5ObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FrS0NjdWJXRndjMTlmWW5WMGRHOXVjMTlzYjJGa0p5a3VZMnhwWTJzb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNCcFppZ2tLSFJvYVhNcExtaGhjME5zWVhOektDZGlkWFIwYjI0dExXZHlaV1Z1SnlrcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjbVZ0YjNabElHRnNiQ0J6Ykdsa1pYTmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiblJ6SUQwZ0pDZ25MbTFoY0hNdExYTnNhV1JsY25NZ0xtbDBaVzBuS1M1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lvZG1GeUlHazlZMjUwY3kweE95QnBQakE3SUdrdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0hSNWNHVnZaaUFrS0NjdWJXRndjeTB0YzJ4cFpHVnljeUF1YVhSbGJTY3BXMmxkSUNFOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTV0WVhCekxTMXpiR2xrWlhKeklDNXBkR1Z0SnlsYmFWMHVjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0drcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FYUmxiVjlqZENBOUlDY25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE5sZEhScGJtY2dQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzE1VFdGd2N5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHbDBaVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuSUQwZ1NsTlBUaTV3WVhKelpTaHBkR1Z0TG0xaGNGOXpaWFIwYVc1bktTNTBiMU4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxZlkzUWdQU0FuUEdScGRpQmpiR0Z6Y3oxY0ltbDBaVzFjSWlCa1lYUmhMV2xrUFZ3aUp5QXJJR2wwWlcwdWFXUWdLeUFuWENJZ1pHRjBZUzF6WlhSMGFXNW5QVndpSnlBcklITmxkSFJwYm1jZ0t5QW5YQ0lnWkdGMFlTMXVZVzFsUFZ3aUp5QXJJR2wwWlcwdWJXRndYMjVoYldVZ0t5QW5YQ0krSnlBcklGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QWdJRHhwYldjZ2MzSmpQVndpSnlBcklIZHBibVJ2ZHk1dFlYQmZhV052Ymw5MWNtd2dLeUFuWENJZ0x6NG5JQ3NnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUEdScGRpQmpiR0Z6Y3oxY0luUnBkR3hsWENJK0p5QXJJR2wwWlcwdWJXRndYMjVoYldVZ0t5QW5QQzlrYVhZK0p6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1dFlYQnpMUzF6Ykdsa1pYSnpKeWt1YzJ4cFkyc29KM05zYVdOclFXUmtKeXhwZEdWdFgyTjBLVHNnWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duSTJ4dllXUXRMVzFoY0hNdFlteHZZMnRsY2ljcExuTm9iM2NvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOc2IyRmtMUzF0WVhCekp5a3VZVzVwYldGMFpTaDdZbTkwZEc5dE9pQmNJakJ3ZUZ3aWZTd2dOVEF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNWNiaUFnSUNBZ0lDQWdKQ2duTG0xaGNITmZYMkoxZEhSdmJuTmZjSEp2WkhWamRDY3BMbU5zYVdOcktHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppZ2tLQ2N1YldGd2MxOWZZblYwZEc5dWMxOXdjbTlrZFdOMEp5a3VhR0Z6UTJ4aGMzTW9KMkoxZEhSdmJpMHRaR2x6WVdKc1pXUW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtMWhjSE5mWDJKMWRIUnZibk5mY0hKdlpIVmpkQ2NwTG5KbGJXOTJaVU5zWVhOektDZGlkWFIwYjI0dExXZHlaV1Z1SnlrdVlXUmtRMnhoYzNNb0oySjFkSFJ2YmkwdFpHbHpZV0pzWldRbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JM05sYkdWamRDMXdjbTlrZFdOMEp5a3VjMmh2ZHloY0luTnNiM2RjSWl3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5bVpuTmxkQ0E5SUNRb0p5TnpaV3hsWTNRdGNISnZaSFZqZENjcExtOW1abk5sZENncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2hjSW1oMGJXd3NJR0p2WkhsY0lpa3VZVzVwYldGMFpTaDdJSE5qY205c2JGUnZjRG9nYjJabWMyVjBMblJ2Y0NCOUxDQmNJbk5zYjNkY0lpazdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDUW9KeTV0WVhCelgxOWlkWFIwYjI1elgzTmhkbVVuS1M1amJHbGpheWhtZFc1amRHbHZiaWhsZG1WdWRDbDdYRzRnSUNBZ0lDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlna0tIUm9hWE1wTG1oaGMwTnNZWE56S0NkaWRYUjBiMjR0TFdkeVpXVnVKeWtwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkyMWhjRjl1WVcxbEp5a3VkbUZzS0NCelpXeGxZM1JsWkUxaGNDNXRZWEJmYm1GdFpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9YQ0lqYzJsbmJtbHVMVzF2WkdGc1hDSXBMbTF2WkdGc0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV1JsUkhWeVlYUnBiMjQ2SURFd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV1JsUkdWc1lYazZJREF1TWpBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHZjMlZEYkdGemN6b2dKMmxqYjI0dGNtVnRiM1psSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHOXpaVlJsZUhRNklDZFlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYzJOaGNHVkRiRzl6WlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4cFkydERiRzl6WlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0pDZ25MbTFoY0hNdExYTnNhV1JsY25NbktTNXpiR2xqYXloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJRFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ05TeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5wZG1VNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklERXhPVGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTm9iM2M2SURRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOamNtOXNiRG9nTkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyY0c5cGJuUTZJREV3TWpRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5vYjNjNklETXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ00xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3R3YjJsdWREb2dOelk0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bmN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRhRzkzT2lBeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VFkzSnZiR3c2SURKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklEUTRNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyaHZkem9nTVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJOeWIyeHNPaUF4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnV1c5MUlHTmhiaUIxYm5Oc2FXTnJJR0YwSUdFZ1oybDJaVzRnWW5KbFlXdHdiMmx1ZENCdWIzY2dZbmtnWVdSa2FXNW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGRIUnBibWR6T2lCY0luVnVjMnhwWTJ0Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2x1YzNSbFlXUWdiMllnWVNCelpYUjBhVzVuY3lCdlltcGxZM1JjYmlBZ0lDQWdJQ0FnSUNBZ0lGMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0pDZ25MbU52ZFc1MGNubGZiR2x6ZEMxb1pXRmtaWElnZFd3bktTNXpiR2xqYXloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1acGJtbDBaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJRFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ05peGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzQnZibk5wZG1VNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklERXdNalFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTm9iM2M2SURVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOamNtOXNiRG9nTlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdHdiMmx1ZERvZ09Ua3lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VGFHOTNPaUEwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUWTNKdmJHdzZJRFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGcmNHOXBiblE2SURjMk9DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM002SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJodmR6b2dNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMk55YjJ4c09pQXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTNCdmFXNTBPaUEwT0RBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5vYjNjNklERXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpiR2xrWlhOVWIxTmpjbTlzYkRvZ01WeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGbHZkU0JqWVc0Z2RXNXpiR2xqYXlCaGRDQmhJR2RwZG1WdUlHSnlaV0ZyY0c5cGJuUWdibTkzSUdKNUlHRmtaR2x1WnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpaWFIwYVc1bmN6b2dYQ0oxYm5Oc2FXTnJYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCcGJuTjBaV0ZrSUc5bUlHRWdjMlYwZEdsdVozTWdiMkpxWldOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ1FvSnk1c2IyRmtMUzF0WVhCelgyTnNiM05sSnlrdVkyeHBZMnNvWm5WdVkzUnBiMjRvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjamJHOWhaQzB0YldGd2N5MWliRzlqYTJWeUp5a3VhR2xrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkyeHZZV1F0TFcxaGNITW5LUzVoYm1sdFlYUmxLSHRpYjNSMGIyMDZJRndpTFRFMU1EQndlRndpZlN3Z05UQXdLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdKQ2duTG0xaGNITXRMWE5zYVdSbGNuTW5LUzV2YmlnblkyeHBZMnNuTENBbkxtbDBaVzBuTENCbWRXNWpkR2x2YmlobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnRZWEJmYVdRZ1BTQWtLSFJvYVhNcExtUmhkR0VvSjJsa0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdiV0Z3WDI1aGJXVWdQU0FrS0hSb2FYTXBMbVJoZEdFb0oyNWhiV1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdFlYQmZjMlYwZEdsdVp5QTlJQ1FvZEdocGN5a3VaR0YwWVNnbmMyVjBkR2x1WnljcFB5QWtLSFJvYVhNcExtUmhkR0VvSjNObGRIUnBibWNuS1M1emNHeHBkQ2hjSWl4Y0lpazZJRnRkTzF4dVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrOU1Ec2dhVHhqYjNWdWRISnBaWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhKbFlTQTlJRzFoY0M1blpYUlBZbXBsWTNSQ2VVbGtLR052ZFc1MGNtbGxjMXRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSmxZUzV6YUc5M1FYTlRaV3hsWTNSbFpDQTlJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYldGclpTQjBhR1VnWTJoaGNuUWdkR0ZyWlNCcGJpQnVaWGNnWTI5c2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbVZoTG5aaGJHbGtZWFJsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBjbWxsY3lBOUlGdGRPMXh1WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2s5TURzZ2FUeHRZWEJmYzJWMGRHbHVaeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGeVpXRWdQU0J0WVhBdVoyVjBUMkpxWldOMFFubEpaQ2h0WVhCZmMyVjBkR2x1WjF0cFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpsWVM1emFHOTNRWE5UWld4bFkzUmxaQ0E5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCdFlXdGxJSFJvWlNCamFHRnlkQ0IwWVd0bElHbHVJRzVsZHlCamIyeHZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WldFdWRtRnNhV1JoZEdVb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052ZFc1MGNtbGxjeTV3ZFhOb0tDQmhjbVZoTG1sa0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHTnZkVzUwY21sbGN5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxiR1ZqZEdWa1RXRndJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa09pQnRZWEJmYVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRndYMjVoYldVNklHMWhjRjl1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhjRjl6WlhSMGFXNW5PaUJ0WVhCZmMyVjBkR2x1WjF4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duTG14dllXUXRMVzFoY0hOZlkyeHZjMlVuS1M1MGNtbG5aMlZ5S0NkamJHbGpheWNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloelpXeGxZM1JsWkUxaGNDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1dFlYQnpYMTlpZFhSMGIyNXpYM05oZG1VbktTNXlaVzF2ZG1WRGJHRnpjeWduWW5WMGRHOXVMUzFuY21WbGJpY3BMbUZrWkVOc1lYTnpLQ2RpZFhSMGIyNHRMV1JwYzJGaWJHVmtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWdrS0NjdWJXRndjMTlmWW5WMGRHOXVjMTl3Y205a2RXTjBKeWt1YUdGelEyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTV0WVhCelgxOWlkWFIwYjI1elgzQnliMlIxWTNRbktTNXlaVzF2ZG1WRGJHRnpjeWduWW5WMGRHOXVMUzFrYVhOaFlteGxaQ2NwTG1Ga1pFTnNZWE56S0NkaWRYUjBiMjR0TFdkeVpXVnVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9YQ0pvZEcxc0xDQmliMlI1WENJcExtRnVhVzFoZEdVb2V5QnpZM0p2Ykd4VWIzQTZJREFnZlN3Z1hDSnpiRzkzWENJcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCbWIzSW9kbUZ5SUdrOU1Ec2dhVHgzYVc1a2IzY3ViV0Z3WDJOdmRXNTBjbWxsY3k1c1pXNW5kR2d0TVR0cEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjNWdWRISjVYMjlpYWlBOUlIZHBibVJ2ZHk1dFlYQmZZMjkxYm5SeWFXVnpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWTI5MWJuUnllVjl2WW1vdVlYSmxZU2tnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFJ0Y0Y5aGNtVmhJRDBnWTI5MWJuUnllVjl2WW1vdVlYSmxZUzV5WlhCc1lXTmxLQ2NnSnl3Z0p5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSjNWc0xtRnlaV0V0SnlBcklIUnRjRjloY21WaEtTNWhjSEJsYm1Rb0p6eHNhU0JrWVhSaExXNWhiV1U5WENJbklDc2dZMjkxYm5SeWVWOXZZbW91Ym1GdFpTQXJJQ2RjSWlCa1lYUmhMV052WkdVOVhDSW5JQ3NnWTI5MWJuUnllVjl2WW1vdVkyOWtaU0FySUNkY0lpQmtZWFJoTFdGeVpXRTlYQ0luSUNzZ1kyOTFiblJ5ZVY5dlltb3VZWEpsWVNBcklDZGNJajQ4YkdGaVpXdytQR2x1Y0hWMElIUjVjR1U5WENKamFHVmphMkp2ZUZ3aUlDOCtKeUFySUdOdmRXNTBjbmxmYjJKcUxtNWhiV1VnS3lBblBDOXNZV0psYkQ0OEwyeHBQaWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ1hHNGdJQ0FnSUNBZ0lDOHFJRzFoY0NCd1lXZGxJR1Z1WkNBcUwxeHVYRzRnSUNBZ0lDQWdJQzhxSUhOcFoyNXBiaUJ0YjJSaGJDQnpkR0Z5ZENBcUwxeHVJQ0FnSUNBZ0lDQWtLQ2NqYzJsbmJtbHVMVzF2WkdGc0lDTmpkWE4wYjIxbGNsOXNiMmRwYmljcExuTjFZbTFwZENnZ1puVnVZM1JwYjI0b1pTbDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LQ1FvSnlOamRYTjBiMjFsY2w5c2IyZHBiaUF1WW5WMGRHOXVKeWt1YUdGelEyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmhibVJ1ZFcwZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWNtRnVaRzl0S0NrcU1UQXdNU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamRYTjBiMjFsY2w5bGJXRnBiQ0E5SUNRdWRISnBiU2drS0NjalkzVnpkRzl0WlhKZlpXMWhhV3duS1M1MllXd29LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTNWemRHOXRaWEpmY0dGemMzZHZjbVFnUFNBa0xuUnlhVzBvSkNnbkkyTjFjM1J2YldWeVgzQmhjM04zYjNKa0p5a3VkbUZzS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1kzVnpkRzl0WlhKZlpXMWhhV3dnUFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5TmpkWE4wYjIxbGNsOWxiV0ZwYkNjcExtWnZZM1Z6S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1kzVnpkRzl0WlhKZmNHRnpjM2R2Y21RZ1BUMGdYQ0pjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeU5qZFhOMGIyMWxjbDl3WVhOemQyOXlaQ2NwTG1adlkzVnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjalkzVnpkRzl0WlhKZmJHOW5hVzRnTG1KMWRIUnZiaWNwTG5KbGJXOTJaVU5zWVhOektDZGlkWFIwYjI0dExXZHlaV1Z1SnlrdVlXUmtRMnhoYzNNb0oySjFkSFJ2YmkwdFpHbHpZV0pzWldRbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDNWhhbUY0S0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJjSWxCUFUxUmNJaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY213NklGd2lMMkZqWTI5MWJuUXZiRzluYVc1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV05vWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dKQ2duSTJOMWMzUnZiV1Z5WDJ4dloybHVKeWt1YzJWeWFXRnNhWHBsS0NrZ0t5QmNJaVp5WVc1a2IyMDlYQ0lnS3lCeVlXNWtiblZ0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMVkyTmxjM002SUdaMWJtTjBhVzl1S0doMGJXd3BleUFnWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUNRb2FIUnRiQ2t1Wm1sdVpDZ25JMk4xYzNSdmJXVnlYMlJsZEdGcGJDY3BMbWgwYld3b0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2pZM1Z6ZEc5dFpYSmZiRzluYVc0Z0xtSjFkSFJ2YmljcExuSmxiVzkyWlVOc1lYTnpLQ2RpZFhSMGIyNHRMV1JwYzJGaWJHVmtKeWt1WVdSa1EyeGhjM01vSjJKMWRIUnZiaTB0WjNKbFpXNG5LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSEpsYzNWc2RDQTlQU0FuZFc1a1pXWnBibVZrSnlsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2pZM1Z6ZEc5dFpYSmZiRzluYVc0Z0xtVnljbTl5Y3ljcExtaDBiV3dvSnp4MWJENDhiR2srU1c1MllXeHBaQ0JzYjJkcGJpQmpjbVZrWlc1MGFXRnNjeTQ4TDJ4cFBqd3ZkV3crSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2pZM1Z6ZEc5dFpYSmZiRzluYVc0Z0xtVnljbTl5Y3ljcExuTnNhV1JsUkc5M2JpZ25jMnh2ZHljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5Wld4elpYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1eVpXeHZZV1FvZEhKMVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlodFpYUmhLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklISmxZMjkyWlhKZlkzVnpkRzl0WlhKZmNHRnpjM2R2Y21SY2JpQWdJQ0FnSUNBZ0pDZ25JM05wWjI1cGJpMXRiMlJoYkNBamNtVmpiM1psY2kxd1lYTnpkMjl5WkNCbWIzSnRKeWt1YzNWaWJXbDBLR1oxYm1OMGFXOXVLR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSkNnbkkzSmxZMjkyWlhJdGNHRnpjM2R2Y21RZ1ptOXliU0F1WW5WMGRHOXVKeWt1YUdGelEyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1pTNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmhibVJ1ZFcwZ1BTQk5ZWFJvTG1ac2IyOXlLRTFoZEdndWNtRnVaRzl0S0NrcU1UQXdNU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXTnZkbVZ5WDJWdFlXbHNJRDBnSkM1MGNtbHRLQ1FvSnlOeVpXTnZkbVZ5WDJWdFlXbHNKeWt1ZG1Gc0tDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9jbVZqYjNabGNsOWxiV0ZwYkNBOVBTQmNJbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JM0psWTI5MlpYSmZaVzFoYVd3bktTNW1iMk4xY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JM0psWTI5MlpYSXRjR0Z6YzNkdmNtUWdabTl5YlNBdVluVjBkRzl1SnlrdWNtVnRiM1psUTJ4aGMzTW9KMkoxZEhSdmJpMHRaM0psWlc0bktTNWhaR1JEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtMbUZxWVhnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUZ3aVVFOVRWRndpTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJEb2dYQ0l2WVdOamIzVnVkQzl5WldOdmRtVnlYQ0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0U2SUNRb0p5TnlaV052ZG1WeUxYQmhjM04zYjNKa0lHWnZjbTBuS1M1elpYSnBZV3hwZW1Vb0tTQXJJRndpSm5KaGJtUnZiVDFjSWlBcklISmhibVJ1ZFcwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzVmpZMlZ6Y3pvZ1puVnVZM1JwYjI0b2FIUnRiQ2w3SUNCY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ0pDaG9kRzFzS1M1bWFXNWtLQ2NqY21WamIzWmxjaTF3WVhOemQyOXlaQ0JtYjNKdElDNWxjbkp2Y25NbktTNW9kRzFzS0NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkzSmxZMjkyWlhJdGNHRnpjM2R2Y21RZ1ptOXliU0F1WW5WMGRHOXVKeWt1Y21WdGIzWmxRMnhoYzNNb0oySjFkSFJ2YmkwdFpHbHpZV0pzWldRbktTNWhaR1JEYkdGemN5Z25ZblYwZEc5dUxTMW5jbVZsYmljcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVnpkV3gwSUQwOUlDZDFibVJsWm1sdVpXUW5LWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOeVpXTnZkbVZ5WDJWdFlXbHNKeWt1ZG1Gc0tDY25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKQ2duSTNKbFkyOTJaWEl0Y0dGemMzZHZjbVFuS1M1aGJtbHRZWFJsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjR0ZqYVhSNU9pQW5hR2xrWlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc0lETXdNQ3dnSjJ4cGJtVmhjaWNzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOamRYTjBiMjFsY2w5c2IyZHBiaUF1WlhKeWIzSnpKeWt1YUhSdGJDZ25KeWt1YUdsa1pTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5TmpkWE4wYjIxbGNpY3BMbVpoWkdWSmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWxiSE5sZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkzSmxZMjkyWlhJdGNHRnpjM2R2Y21RZ1ptOXliU0F1WlhKeWIzSnpKeWt1YUhSdGJDaHlaWE4xYkhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JM0psWTI5MlpYSXRjR0Z6YzNkdmNtUWdabTl5YlNBdVpYSnliM0p6SnlrdWMyeHBaR1ZFYjNkdUtDZHpiRzkzSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdKQ2duSTNOaGRtVXRlVzkxY2kxdFlYQWdhVzV3ZFhRdVluVjBkRzl1SnlrdVkyeHBZMnNvWm5WdVkzUnBiMjRvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlna0tIUm9hWE1wTG1oaGMwTnNZWE56S0NkaWRYUjBiMjR0TFdScGMyRmliR1ZrSnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzFoY0Y5dVlXMWxJRDBnSkM1MGNtbHRLQ1FvSnlOdFlYQmZibUZ0WlNjcExuWmhiQ2dwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0cxaGNGOXVZVzFsSUQwOUlGd2lYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2piV0Z3WDI1aGJXVW5LUzVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdKQ2duSTNOaGRtVXRlVzkxY2kxdFlYQWdMbUoxZEhSdmJpY3BMbkpsYlc5MlpVTnNZWE56S0NkaWRYUjBiMjR0TFdkeVpXVnVKeWt1WVdSa1EyeGhjM01vSjJKMWRIUnZiaTB0WkdsellXSnNaV1FuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2hqYjNWdWRISnBaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhCaGNtRnRjeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYQTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJSE5sYkdWamRHVmtUV0Z3TG1sa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQnRZWEJmYm1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaem9nWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFpYSmZhV1E2SUcxbGRHRXVjR0ZuWlM1amRYTjBiMjFsY2tsa1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRTFoY0M1dFlYQmZibUZ0WlNBOUlHMWhjRjl1WVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JOWVhBdWJXRndYM05sZEhScGJtY2dQU0JqYjNWdWRISnBaWE03WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1F1WVdwaGVDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozQnZjM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJEb2dZWEJwWDNWeWJDQXJJQ2N2YldGd0wzTmhkbVVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRTZJSEJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkV05qWlhOek9pQm1kVzVqZEdsdmJpaHlaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGVVMWhjSE1nUFNCeVpYTndiMjV6WlM1a1lYUmhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LSE5sYkdWamRHVmtUV0Z3TG1sa0lEMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkUxaGNDNXBaQ0E5SUcxNVRXRndjMXR0ZVUxaGNITXViR1Z1WjNSb0xURmRMbWxrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JM05oZG1VdGVXOTFjaTF0WVhBZ0xtSjFkSFJ2YmljcExuSmxiVzkyWlVOc1lYTnpLQ2RpZFhSMGIyNHRMV1JwYzJGaWJHVmtKeWt1WVdSa1EyeGhjM01vSjJKMWRIUnZiaTB0WjNKbFpXNG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JMjFoY0Y5dVlXMWxKeWt1ZG1Gc0tDY25LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWdrS0NjdWJXRndjMTlmWW5WMGRHOXVjMTlzYjJGa0p5a3VhR0Z6UTJ4aGMzTW9KMkoxZEhSdmJpMHRaR2x6WVdKc1pXUW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtMWhjSE5mWDJKMWRIUnZibk5mYkc5aFpDY3BMbkpsYlc5MlpVTnNZWE56S0NkaWRYUjBiMjR0TFdScGMyRmliR1ZrSnlrdVlXUmtRMnhoYzNNb0oySjFkSFJ2YmkwdFozSmxaVzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTV0WVhCelgxOWlkWFIwYjI1elgzTmhkbVVuS1M1eVpXMXZkbVZEYkdGemN5Z25ZblYwZEc5dUxTMW5jbVZsYmljcExtRmtaRU5zWVhOektDZGlkWFIwYjI0dExXUnBjMkZpYkdWa0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NXRZWEJ6WDE5aWRYUjBiMjV6WDNCeWIyUjFZM1FuS1M1eVpXMXZkbVZEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BMbUZrWkVOc1lYTnpLQ2RpZFhSMGIyNHRMV2R5WldWdUp5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ2dYQ0lqYzJsbmJtbHVMVzF2WkdGc0lHRXVZMnh2YzJVdGJXOWtZV3hjSWlBcExuUnlhV2RuWlhJb0lGd2lZMnhwWTJ0Y0lpQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWUjVjR1U2SUNkcWMyOXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdJRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVYRzRnSUNBZ0lDQWdJQ1FvSnlOeVpXZHBjM1JsY2kxaFkyTnZkVzUwSnlrdVkyeHBZMnNvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOamRYTjBiMjFsY2ljcExtRnVhVzFoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdZV05wZEhrNklDZG9hV1JsSjF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnTVRBd0xDQW5iR2x1WldGeUp5d2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkyTnlaV0YwWlMxamRYTjBiMjFsY2ljcExtWmhaR1ZKYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNRb0p5TnlaWFIxY200dGMybG5ibWx1SnlrdVkyeHBZMnNvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOamNtVmhkR1V0WTNWemRHOXRaWEluS1M1aGJtbHRZWFJsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNHRmphWFI1T2lBbmFHbGtaU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJREV3TUN3Z0oyeHBibVZoY2ljc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOamRYTjBiMjFsY2ljcExtWmhaR1ZKYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNRb0p5Tm1iM0puYjNSZmNHRnpjM2R2Y21RbktTNWpiR2xqYXlobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkyTjFjM1J2YldWeUp5a3VZVzVwYldGMFpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0JoWTJsMGVUb2dKMmhwWkdVblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBeE1EQXNJQ2RzYVc1bFlYSW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2pjbVZqYjNabGNpMXdZWE56ZDI5eVpDY3BMbVpoWkdWSmJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDUW9KeU5qWVc1alpXd3RabTl5WjI5MEp5a3VZMnhwWTJzb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNRb0p5TnlaV052ZG1WeUxYQmhjM04zYjNKa0p5a3VZVzVwYldGMFpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0JoWTJsMGVUb2dKMmhwWkdVblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBeE1EQXNJQ2RzYVc1bFlYSW5MQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY2pZM1Z6ZEc5dFpYSW5LUzVtWVdSbFNXNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0x5b2djMmxuYm1sdUlHMXZaR0ZzSUdWdVpDQXFMMXh1WEc0Z0lDQWdJQ0FnSUM4dkx5OHZMeTRnWTI5MWJuUnllU0JzYVhOMElDMGdhVzUwWldkeVlYUnBiMjRnTHk4dkx5OHZMeTh2THk4dlhHNWNiaUFnSUNBZ0lDQWdKQ2duTG1OdmRXNTBjbmxmYkdsemRDMW9aV0ZrWlhJZ2JHa25LUzVqYkdsamF5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYkNBOUlDUW9kR2hwY3lrdVpHRjBZU2duY21Wc0p5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDUW9KeTVqYjNWdWRISjVYMnhwYzNRdFltOWtlU0IxYkNjcExtaHBaR1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1amIzVnVkSEo1WDJ4cGMzUXRZbTlrZVNCMWJDNWhjbVZoTFNjZ0t5QnlaV3dwTG5Ob2IzY29LVHRjYmlBZ0lDQWdJQ0FnZlNrZ0lGeHVYRzRnSUNBZ0lDQWdJQ1FvSnk1amIzVnVkSEo1WDJ4cGMzUXRZbTlrZVNCc2FTQnNZV0psYkNjcExtTnNhV05yS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyaGxZMnRsWkNBOUlDUW9kR2hwY3lrdVptbHVaQ2duYVc1d2RYUW5LUzV3Y205d0tDZGphR1ZqYTJWa0p5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ0WVhCZmFXUWdQU0FrS0hSb2FYTXBMbkJoY21WdWRDZ3BMbVJoZEdFb0oyTnZaR1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaGNtVmhJRDBnYldGd0xtZGxkRTlpYW1WamRFSjVTV1FvYldGd1gybGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LR05vWldOclpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21WaExuTm9iM2RCYzFObGJHVmpkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCamIzVnVkSEpwWlhNdWFXNWtaWGhQWmloaGNtVmhMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hVzVrWlhnZ1BUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5SeWFXVnpMbkIxYzJnb0lHRnlaV0V1YVdRZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSmxZUzV6YUc5M1FYTlRaV3hsWTNSbFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJwYm1SbGVDQTlJR052ZFc1MGNtbGxjeTVwYm1SbGVFOW1LR0Z5WldFdWFXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0ErSUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBjbWxsY3k1emNHeHBZMlVvYVc1a1pYZ3NJREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYldGclpTQjBhR1VnWTJoaGNuUWdkR0ZyWlNCcGJpQnVaWGNnWTI5c2IzSmNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVpXRXVkbUZzYVdSaGRHVW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWTI5MWJuUnlhV1Z6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NXRZWEJ6WDE5aWRYUjBiMjV6WDNOaGRtVW5LUzV5WlcxdmRtVkRiR0Z6Y3lnblluVjBkRzl1TFMxa2FYTmhZbXhsWkNjcExtRmtaRU5zWVhOektDZGlkWFIwYjI0dExXZHlaV1Z1SnlrN0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjdWJXRndjMTlmWW5WMGRHOXVjMTl6WVhabEp5a3VjbVZ0YjNabFEyeGhjM01vSjJKMWRIUnZiaTB0WjNKbFpXNG5LUzVoWkdSRGJHRnpjeWduWW5WMGRHOXVMUzFrYVhOaFlteGxaQ2NwT3lCY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvSkNnbkxtMWhjSE5mWDJKMWRIUnZibk5mY0hKdlpIVmpkQ2NwTG1oaGMwTnNZWE56S0NkaWRYUjBiMjR0TFdkeVpXVnVKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY3ViV0Z3YzE5ZlluVjBkRzl1YzE5d2NtOWtkV04wSnlrdWNtVnRiM1psUTJ4aGMzTW9KMkoxZEhSdmJpMHRaM0psWlc0bktTNWhaR1JEYkdGemN5Z25ZblYwZEc5dUxTMWthWE5oWW14bFpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5OHZMeTh1SUhCeWIyUjFZM1J6SUMwZ2FXNTBaV2R5WVhScGIyNGdMeTh2THk4dkx5OHZMeTh2WEc0Z0lDQWdJQ0FnSUNRb0p5TnpaV3hsWTNRdGNISnZaSFZqZENCaExuQnliMlIxWTNSekxXbDBaVzFmWDJ4cGJtc25LUzVqYkdsamF5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJ5YjJSMVkzUmZhV1FnUFNBa0tIUm9hWE1wTG1SaGRHRW9KMmxrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZaSFZqZEY5MWNtd2dQU0FrS0hSb2FYTXBMbVJoZEdFb0ozVnliQ2NwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrS0NjamMyVnNaV04wWldRdGNISnZaSFZqZENjcExuTm9iM2NvWENKemJHOTNYQ0lzSUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0FrS0NjamMyVnNaV04wWldRdGNISnZaSFZqZENjcExtOW1abk5sZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9YQ0pvZEcxc0xDQmliMlI1WENJcExtRnVhVzFoZEdVb2V5QnpZM0p2Ykd4VWIzQTZJRzltWm5ObGRDNTBiM0FnZlN3Z1hDSnpiRzkzWENJcE95QmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBa0xtRnFZWGdvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRndpUjBWVVhDSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzT2lCd2NtOWtkV04wWDNWeWJDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZV05vWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNWalkyVnpjem9nWm5WdVkzUnBiMjRvYUhSdGJDbDdJQ0JjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnSkNob2RHMXNLUzVtYVc1a0tDZHpaV04wYVc5dUxuQnliMlIxWTNRbktTNW9kRzFzS0NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkkzQnliMlIxWTNRdGRtbGxkeTF3WVc1bGJDY3BMbWgwYld3b2NtVnpkV3gwS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpXMXZkbVVnSjJGa1pDQjViM1Z5SUcxaGNDY2dZblYwZEc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnlOd2NtOWtkV04wTFhacFpYY3RjR0Z1Wld3Z0xuQnliMlIxWTNSZlgyTnZiblJsYm5RZ0xtSjFkSFJ2YmkwdFlXUmtYM2x2ZFhKZmJXRndKeWt1Y21WdGIzWmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmRXNTBjbmxmYm1GdFpYTWdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMFpXUk5ZWEF1YldGd1gzTmxkSFJwYm1jdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlocGRHVnRLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2loMllYSWdhVDB3TzJrOGQybHVaRzkzTG0xaGNGOWpiM1Z1ZEhKcFpYTXViR1Z1WjNSb0xURTdhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvYVhSbGJTQTlQU0IzYVc1a2IzY3ViV0Z3WDJOdmRXNTBjbWxsYzF0cFhTNWpiMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBjbmxmYm1GdFpYTWdLejBnZDJsdVpHOTNMbTFoY0Y5amIzVnVkSEpwWlhOYmFWMHVibUZ0WlNBcklDY3NJQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0dOdmRXNTBjbmxmYm1GdFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0dOdmRXNTBjbmxmYm1GdFpYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjkxYm5SeWVWOXVZVzFsY3lBOUlHTnZkVzUwY25sZmJtRnRaWE11YzNWaWMzUnlhVzVuS0RBc0lHTnZkVzUwY25sZmJtRnRaWE11YkdWdVozUm9JQzBnTWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUW9KeU50WVhCZmJtRnRaVjlzYVc1bGFYUmxiU2NwTG5aaGJDaHpaV3hsWTNSbFpFMWhjQzV0WVhCZmJtRnRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrS0NjamJXRndYMk52ZFc1MGNtbGxjMTlzYVc1bGFYUmxiU2NwTG5aaGJDaGpiM1Z1ZEhKNVgyNWhiV1Z6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkNnbkxtRmpZMjl5WkdWdmJsOWZkR0ZpTFMxdFlYQWdjQ2NwTG5SbGVIUW9ZMjkxYm5SeWVWOXVZVzFsY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa0tDY3VZV05qYjNKa1pXOXVYMTkwWVdJdExXMWhjQ2NwTG5Ob2IzY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWNGNHRnVaQ0JrWlhSaGFXd2dkR0ZpSUdGeklHUmxabUYxYkhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NWhZMk52Y21SbGIyNWZYM1JoWWk1aFkyTnZjbVJsYjI1ZlgzUmhZaTB0YldGd0lHeGhZbVZzSnlrdWRISnBaMmRsY2lnblkyeHBZMnNuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JMkZrWkMxMGJ5MWpZWEowSnlrdWNtVnRiM1psUTJ4aGMzTW9KMkoxZEhSdmJpMHRaR2x6WVdKc1pXUW5LUzVoWkdSRGJHRnpjeWduWW5WMGRHOXVMUzFuY21WbGJpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1VISnZaSFZqZENCd1lXZGxJSE4wWVhKMElDb3ZYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbkJ5YjJSMVkzUmZYMmx0WVdkbEp5a3VZMnh2Ym1Vb0tTNXBibk5sY25SQ1pXWnZjbVVvSkNnbkxuQnliMlIxWTNSZlgyUmxjMk55YVhCMGFXOXVKeWtwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1d2NtOWtkV04wWDE5cGJXRm5aUzFtYjNJbktTNXpiR2xqYXloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5qY205c2JEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWVhCMGFYWmxTR1ZwWjJoME9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhOT1lYWkdiM0k2SUNjdWNISnZaSFZqZEMxMGFIVnRZbTVoYVd4ekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnljbTkzY3pvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poWkdVNklIUnlkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pDZ25MbkJ5YjJSMVkzUXRkR2gxYldKdVlXbHNjeWNwTG5Oc2FXTnJLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5zYVdSbGMxUnZVMmh2ZHpvZ05TeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyTnliMnhzT2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYTk9ZWFpHYjNJNklDY3VjSEp2WkhWamRGOWZhVzFoWjJVdFptOXlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5Y205M2N6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSnBZV0pzWlZkcFpIUm9PaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNW1hVzVwZEdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5MGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIyTjFjMDl1VTJWc1pXTjBPaUIwY25WbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzhxSUZCeWIyUjFZM1FnY0dGblpTQkZUa1FnS2k5Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyaHZjR2xtZVM1UGNIUnBiMjVUWld4bFkzUnZjbk1vWENKd2NtOWtkV04wTFhObGJHVmpkRndpTENCN0lIQnliMlIxWTNRNklIZHBibVJ2ZHk1d2NtOWtkV04wWDJwemIyNHNJRzl1Vm1GeWFXRnVkRk5sYkdWamRHVmtPaUJ6Wld4bFkzUkRZV3hzWW1GamF5QjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMWNibjBwTzF4dUlpd2lMeXBjYmlBZ0lDQkJJSE5wYlhCc1pTQnFVWFZsY25rZ2JXOWtZV3dnS0doMGRIQTZMeTluYVhSb2RXSXVZMjl0TDJ0NWJHVm1iM2d2YW5GMVpYSjVMVzF2WkdGc0tWeHVJQ0FnSUZabGNuTnBiMjRnTUM0NExqSmNiaW92WEc1Y2JpaG1kVzVqZEdsdmJpQW9abUZqZEc5eWVTa2dlMXh1SUNBdkx5Qk5ZV3RwYm1jZ2VXOTFjaUJxVVhWbGNua2djR3gxWjJsdUlIZHZjbXNnWW1WMGRHVnlJSGRwZEdnZ2JuQnRJSFJ2YjJ4elhHNGdJQzh2SUdoMGRIQTZMeTlpYkc5bkxtNXdiV3B6TG05eVp5OXdiM04wTHpFeE1qY3hNakUyT1Rnek1DOXRZV3RwYm1jdGVXOTFjaTFxY1hWbGNua3RjR3gxWjJsdUxYZHZjbXN0WW1WMGRHVnlMWGRwZEdndGJuQnRYRzRnSUdsbUtIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlGd2liMkpxWldOMFhDSWdKaVlnZEhsd1pXOW1JRzF2WkhWc1pTNWxlSEJ2Y25SeklEMDlQU0JjSW05aWFtVmpkRndpS1NCN1hHNGdJQ0FnWm1GamRHOXllU2h5WlhGMWFYSmxLRndpYW5GMVpYSjVYQ0lwTENCM2FXNWtiM2NzSUdSdlkzVnRaVzUwS1R0Y2JpQWdmVnh1SUNCbGJITmxJSHRjYmlBZ0lDQm1ZV04wYjNKNUtHcFJkV1Z5ZVN3Z2QybHVaRzkzTENCa2IyTjFiV1Z1ZENrN1hHNGdJSDFjYm4wb1puVnVZM1JwYjI0b0pDd2dkMmx1Wkc5M0xDQmtiMk4xYldWdWRDd2dkVzVrWldacGJtVmtLU0I3WEc1Y2JpQWdkbUZ5SUcxdlpHRnNjeUE5SUZ0ZExGeHVJQ0FnSUNBZ1oyVjBRM1Z5Y21WdWRDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYlc5a1lXeHpMbXhsYm1kMGFDQS9JRzF2WkdGc2MxdHRiMlJoYkhNdWJHVnVaM1JvSUMwZ01WMGdPaUJ1ZFd4c08xeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lITmxiR1ZqZEVOMWNuSmxiblFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHazliVzlrWVd4ekxteGxibWQwYUMweE95QnBQajB3T3lCcExTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iVzlrWVd4elcybGRMaVJpYkc5amEyVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiMlJoYkhOYmFWMHVKR0pzYjJOclpYSXVkRzluWjJ4bFEyeGhjM01vSjJOMWNuSmxiblFuTENGelpXeGxZM1JsWkNrdWRHOW5aMnhsUTJ4aGMzTW9KMkpsYUdsdVpDY3NjMlZzWldOMFpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWtMbTF2WkdGc0lEMGdablZ1WTNScGIyNG9aV3dzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0IyWVhJZ2NtVnRiM1psTENCMFlYSm5aWFE3WEc0Z0lDQWdkR2hwY3k0a1ltOWtlU0E5SUNRb0oySnZaSGtuS1R0Y2JpQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQWtMbVY0ZEdWdVpDaDdmU3dnSkM1dGIyUmhiQzVrWldaaGRXeDBjeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdkR2hwY3k1dmNIUnBiMjV6TG1SdlJtRmtaU0E5SUNGcGMwNWhUaWh3WVhKelpVbHVkQ2gwYUdsekxtOXdkR2x2Ym5NdVptRmtaVVIxY21GMGFXOXVMQ0F4TUNrcE8xeHVJQ0FnSUhSb2FYTXVKR0pzYjJOclpYSWdQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibk11WTJ4dmMyVkZlR2x6ZEdsdVp5bGNiaUFnSUNBZ0lIZG9hV3hsSUNna0xtMXZaR0ZzTG1selFXTjBhWFpsS0NrcFhHNGdJQ0FnSUNBZ0lDUXViVzlrWVd3dVkyeHZjMlVvS1RzZ0x5OGdRMnh2YzJVZ1lXNTVJRzl3Wlc0Z2JXOWtZV3h6TGx4dUlDQWdJRzF2WkdGc2N5NXdkWE5vS0hSb2FYTXBPMXh1SUNBZ0lHbG1JQ2hsYkM1cGN5Z25ZU2NwS1NCN1hHNGdJQ0FnSUNCMFlYSm5aWFFnUFNCbGJDNWhkSFJ5S0Nkb2NtVm1KeWs3WEc0Z0lDQWdJQ0IwYUdsekxtRnVZMmh2Y2lBOUlHVnNPMXh1SUNBZ0lDQWdMeTlUWld4bFkzUWdaV3hsYldWdWRDQmllU0JwWkNCbWNtOXRJR2h5WldaY2JpQWdJQ0FnSUdsbUlDZ3ZYaU12TG5SbGMzUW9kR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiRzBnUFNBa0tIUmhjbWRsZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxpUmxiRzB1YkdWdVozUm9JQ0U5UFNBeEtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtZbTlrZVM1aGNIQmxibVFvZEdocGN5NGtaV3h0S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Y0dWdUtDazdYRzRnSUNBZ0lDQXZMMEZLUVZoY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzYlNBOUlDUW9KenhrYVhZK0p5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHSnZaSGt1WVhCd1pXNWtLSFJvYVhNdUpHVnNiU2s3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaU0E5SUdaMWJtTjBhVzl1S0dWMlpXNTBMQ0J0YjJSaGJDa2dleUJ0YjJSaGJDNWxiRzB1Y21WdGIzWmxLQ2s3SUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJodmQxTndhVzV1WlhJb0tUdGNiaUFnSUNBZ0lDQWdaV3d1ZEhKcFoyZGxjaWdrTG0xdlpHRnNMa0ZLUVZoZlUwVk9SQ2s3WEc0Z0lDQWdJQ0FnSUNRdVoyVjBLSFJoY21kbGRDa3VaRzl1WlNobWRXNWpkR2x2Ymlob2RHMXNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0VrTG0xdlpHRnNMbWx6UVdOMGFYWmxLQ2twSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNCbGJDNTBjbWxuWjJWeUtDUXViVzlrWVd3dVFVcEJXRjlUVlVORFJWTlRLVHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdZM1Z5Y21WdWRDQTlJR2RsZEVOMWNuSmxiblFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MExpUmxiRzB1Wlcxd2RIa29LUzVoY0hCbGJtUW9hSFJ0YkNrdWIyNG9KQzV0YjJSaGJDNURURTlUUlN3Z2NtVnRiM1psS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MExtaHBaR1ZUY0dsdWJtVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEM1dmNHVnVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1pXd3VkSEpwWjJkbGNpZ2tMbTF2WkdGc0xrRktRVmhmUTA5TlVFeEZWRVVwTzF4dUlDQWdJQ0FnSUNCOUtTNW1ZV2xzS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1ZzTG5SeWFXZG5aWElvSkM1dGIyUmhiQzVCU2tGWVgwWkJTVXdwTzF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVpXNTBJRDBnWjJWMFEzVnljbVZ1ZENncE8xeHVJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUXVhR2xrWlZOd2FXNXVaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQnRiMlJoYkhNdWNHOXdLQ2s3SUM4dklISmxiVzkyWlNCbGVIQmxZM1JsWkNCdGIyUmhiQ0JtY205dElIUm9aU0JzYVhOMFhHNGdJQ0FnSUNBZ0lDQWdaV3d1ZEhKcFoyZGxjaWdrTG0xdlpHRnNMa0ZLUVZoZlEwOU5VRXhGVkVVcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWld4dElEMGdaV3c3WEc0Z0lDQWdJQ0IwYUdsekxpUmliMlI1TG1Gd2NHVnVaQ2gwYUdsekxpUmxiRzBwTzF4dUlDQWdJQ0FnZEdocGN5NXZjR1Z1S0NrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lDUXViVzlrWVd3dWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUFrTG0xdlpHRnNMRnh1WEc0Z0lDQWdiM0JsYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQjJZWElnYlNBOUlIUm9hWE03WEc0Z0lDQWdJQ0IwYUdsekxtSnNiMk5yS0NrN1hHNGdJQ0FnSUNBdkx5QjBhR2x6TG1GdVkyaHZjaTVpYkhWeUtDazdYRzRnSUNBZ0lDQnBaaWgwYUdsekxtOXdkR2x2Ym5NdVpHOUdZV1JsS1NCN1hHNGdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JTNXphRzkzS0NrN1hHNGdJQ0FnSUNBZ0lIMHNJSFJvYVhNdWIzQjBhVzl1Y3k1bVlXUmxSSFZ5WVhScGIyNGdLaUIwYUdsekxtOXdkR2x2Ym5NdVptRmtaVVJsYkdGNUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJodmR5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdKQ2hrYjJOMWJXVnVkQ2t1YjJabUtDZHJaWGxrYjNkdUxtMXZaR0ZzSnlrdWIyNG9KMnRsZVdSdmQyNHViVzlrWVd3bkxDQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTNWeWNtVnVkQ0E5SUdkbGRFTjFjbkpsYm5Rb0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMbmRvYVdOb0lEMDlQU0F5TnlBbUppQmpkWEp5Wlc1MExtOXdkR2x2Ym5NdVpYTmpZWEJsUTJ4dmMyVXBJR04xY25KbGJuUXVZMnh2YzJVb0tUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXViM0IwYVc5dWN5NWpiR2xqYTBOc2IzTmxLVnh1SUNBZ0lDQWdJQ0IwYUdsekxpUmliRzlqYTJWeUxtTnNhV05yS0daMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pTNTBZWEpuWlhRZ1BUMDlJSFJvYVhNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FrTG0xdlpHRnNMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JqYkc5elpUb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0J0YjJSaGJITXVjRzl3S0NrN1hHNGdJQ0FnSUNCMGFHbHpMblZ1WW14dlkyc29LVHRjYmlBZ0lDQWdJSFJvYVhNdWFHbGtaU2dwTzF4dUlDQWdJQ0FnYVdZZ0tDRWtMbTF2WkdGc0xtbHpRV04wYVhabEtDa3BYRzRnSUNBZ0lDQWdJQ1FvWkc5amRXMWxiblFwTG05bVppZ25hMlY1Wkc5M2JpNXRiMlJoYkNjcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCaWJHOWphem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkcwdWRISnBaMmRsY2lna0xtMXZaR0ZzTGtKRlJrOVNSVjlDVEU5RFN5d2dXM1JvYVhNdVgyTjBlQ2dwWFNrN1hHNGdJQ0FnSUNCMGFHbHpMaVJpYjJSNUxtTnpjeWduYjNabGNtWnNiM2NuTENkb2FXUmtaVzRuS1R0Y2JpQWdJQ0FnSUhSb2FYTXVKR0pzYjJOclpYSWdQU0FrS0NjOFpHbDJJR05zWVhOelBWd2lKeUFySUhSb2FYTXViM0IwYVc5dWN5NWliRzlqYTJWeVEyeGhjM01nS3lBbklHSnNiMk5yWlhJZ1kzVnljbVZ1ZEZ3aVBqd3ZaR2wyUGljcExtRndjR1Z1WkZSdktIUm9hWE11SkdKdlpIa3BPMXh1SUNBZ0lDQWdjMlZzWldOMFEzVnljbVZ1ZENncE8xeHVJQ0FnSUNBZ2FXWW9kR2hwY3k1dmNIUnBiMjV6TG1SdlJtRmtaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMaVJpYkc5amEyVnlMbU56Y3lnbmIzQmhZMmwwZVNjc01Da3VZVzVwYldGMFpTaDdiM0JoWTJsMGVUb2dNWDBzSUhSb2FYTXViM0IwYVc5dWN5NW1ZV1JsUkhWeVlYUnBiMjRwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZEdocGN5NGtaV3h0TG5SeWFXZG5aWElvSkM1dGIyUmhiQzVDVEU5RFN5d2dXM1JvYVhNdVgyTjBlQ2dwWFNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhWdVlteHZZMnM2SUdaMWJtTjBhVzl1S0c1dmR5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGdWIzY2dKaVlnZEdocGN5NXZjSFJwYjI1ekxtUnZSbUZrWlNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTRrWW14dlkydGxjaTVtWVdSbFQzVjBLSFJvYVhNdWIzQjBhVzl1Y3k1bVlXUmxSSFZ5WVhScGIyNHNJSFJvYVhNdWRXNWliRzlqYXk1aWFXNWtLSFJvYVhNc2RISjFaU2twTzF4dUlDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHSnNiMk5yWlhJdVkyaHBiR1J5Wlc0b0tTNWhjSEJsYm1SVWJ5aDBhR2x6TGlSaWIyUjVLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtZbXh2WTJ0bGNpNXlaVzF2ZG1Vb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a1lteHZZMnRsY2lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhObGJHVmpkRU4xY25KbGJuUW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRWtMbTF2WkdGc0xtbHpRV04wYVhabEtDa3BYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NGtZbTlrZVM1amMzTW9KMjkyWlhKbWJHOTNKeXduSnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhOb2IzYzZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NGtaV3h0TG5SeWFXZG5aWElvSkM1dGIyUmhiQzVDUlVaUFVrVmZUMUJGVGl3Z1czUm9hWE11WDJOMGVDZ3BYU2s3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV2Y0hScGIyNXpMbk5vYjNkRGJHOXpaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5zYjNObFFuVjBkRzl1SUQwZ0pDZ25QR0VnYUhKbFpqMWNJaU5qYkc5elpTMXRiMlJoYkZ3aUlISmxiRDFjSW0xdlpHRnNPbU5zYjNObFhDSWdZMnhoYzNNOVhDSmpiRzl6WlMxdGIyUmhiQ0FuSUNzZ2RHaHBjeTV2Y0hScGIyNXpMbU5zYjNObFEyeGhjM01nS3lBblhDSStKeUFySUhSb2FYTXViM0IwYVc5dWN5NWpiRzl6WlZSbGVIUWdLeUFuUEM5aFBpY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiRzB1WVhCd1pXNWtLSFJvYVhNdVkyeHZjMlZDZFhSMGIyNHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkR2hwY3k0a1pXeHRMbUZrWkVOc1lYTnpLSFJvYVhNdWIzQjBhVzl1Y3k1dGIyUmhiRU5zWVhOektTNWhjSEJsYm1SVWJ5aDBhR2x6TGlSaWJHOWphMlZ5S1R0Y2JpQWdJQ0FnSUdsbUtIUm9hWE11YjNCMGFXOXVjeTVrYjBaaFpHVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtaV3h0TG1OemN5Z25iM0JoWTJsMGVTY3NNQ2t1YzJodmR5Z3BMbUZ1YVcxaGRHVW9lMjl3WVdOcGRIazZJREY5TENCMGFHbHpMbTl3ZEdsdmJuTXVabUZrWlVSMWNtRjBhVzl1S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzYlM1emFHOTNLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IwYUdsekxpUmxiRzB1ZEhKcFoyZGxjaWdrTG0xdlpHRnNMazlRUlU0c0lGdDBhR2x6TGw5amRIZ29LVjBwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JvYVdSbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNiUzUwY21sbloyVnlLQ1F1Ylc5a1lXd3VRa1ZHVDFKRlgwTk1UMU5GTENCYmRHaHBjeTVmWTNSNEtDbGRLVHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbU5zYjNObFFuVjBkRzl1S1NCMGFHbHpMbU5zYjNObFFuVjBkRzl1TG5KbGJXOTJaU2dwTzF4dUlDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQWdJR2xtS0hSb2FYTXViM0IwYVc5dWN5NWtiMFpoWkdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a1pXeHRMbVpoWkdWUGRYUW9kR2hwY3k1dmNIUnBiMjV6TG1aaFpHVkVkWEpoZEdsdmJpd2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGlSbGJHMHVkSEpwWjJkbGNpZ2tMbTF2WkdGc0xrRkdWRVZTWDBOTVQxTkZMQ0JiWDNSb2FYTXVYMk4wZUNncFhTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtaV3h0TG1ocFpHVW9NQ3dnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxpUmxiRzB1ZEhKcFoyZGxjaWdrTG0xdlpHRnNMa0ZHVkVWU1gwTk1UMU5GTENCYlgzUm9hWE11WDJOMGVDZ3BYU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHBjeTRrWld4dExuUnlhV2RuWlhJb0pDNXRiMlJoYkM1RFRFOVRSU3dnVzNSb2FYTXVYMk4wZUNncFhTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lITm9iM2RUY0dsdWJtVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dmNIUnBiMjV6TG5Ob2IzZFRjR2x1Ym1WeUtTQnlaWFIxY200N1hHNGdJQ0FnSUNCMGFHbHpMbk53YVc1dVpYSWdQU0IwYUdsekxuTndhVzV1WlhJZ2ZId2dKQ2duUEdScGRpQmpiR0Z6Y3oxY0lpY2dLeUIwYUdsekxtOXdkR2x2Ym5NdWJXOWtZV3hEYkdGemN5QXJJQ2N0YzNCcGJtNWxjbHdpUGp3dlpHbDJQaWNwWEc0Z0lDQWdJQ0FnSUM1aGNIQmxibVFvZEdocGN5NXZjSFJwYjI1ekxuTndhVzV1WlhKSWRHMXNLVHRjYmlBZ0lDQWdJSFJvYVhNdUpHSnZaSGt1WVhCd1pXNWtLSFJvYVhNdWMzQnBibTVsY2lrN1hHNGdJQ0FnSUNCMGFHbHpMbk53YVc1dVpYSXVjMmh2ZHlncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCb2FXUmxVM0JwYm01bGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV6Y0dsdWJtVnlLU0IwYUdsekxuTndhVzV1WlhJdWNtVnRiM1psS0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUM4dlVtVjBkWEp1SUdOdmJuUmxlSFFnWm05eUlHTjFjM1J2YlNCbGRtVnVkSE5jYmlBZ0lDQmZZM1I0T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN0lHVnNiVG9nZEdocGN5NGtaV3h0TENBa1pXeHRPaUIwYUdsekxpUmxiRzBzSUNSaWJHOWphMlZ5T2lCMGFHbHpMaVJpYkc5amEyVnlMQ0J2Y0hScGIyNXpPaUIwYUdsekxtOXdkR2x2Ym5NZ2ZUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdKQzV0YjJSaGJDNWpiRzl6WlNBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJQ0FnYVdZZ0tDRWtMbTF2WkdGc0xtbHpRV04wYVhabEtDa3BJSEpsZEhWeWJqdGNiaUFnSUNCcFppQW9aWFpsYm5RcElHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdkbUZ5SUdOMWNuSmxiblFnUFNCblpYUkRkWEp5Wlc1MEtDazdYRzRnSUNBZ1kzVnljbVZ1ZEM1amJHOXpaU2dwTzF4dUlDQWdJSEpsZEhWeWJpQmpkWEp5Wlc1MExpUmxiRzA3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVbVYwZFhKdWN5QnBaaUIwYUdWeVpTQmpkWEp5Wlc1MGJIa2dhWE1nWVc0Z1lXTjBhWFpsSUcxdlpHRnNYRzRnSUNRdWJXOWtZV3d1YVhOQlkzUnBkbVVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUcxdlpHRnNjeTVzWlc1bmRHZ2dQaUF3TzF4dUlDQjlPMXh1WEc0Z0lDUXViVzlrWVd3dVoyVjBRM1Z5Y21WdWRDQTlJR2RsZEVOMWNuSmxiblE3WEc1Y2JpQWdKQzV0YjJSaGJDNWtaV1poZFd4MGN5QTlJSHRjYmlBZ0lDQmpiRzl6WlVWNGFYTjBhVzVuT2lCMGNuVmxMRnh1SUNBZ0lHVnpZMkZ3WlVOc2IzTmxPaUIwY25WbExGeHVJQ0FnSUdOc2FXTnJRMnh2YzJVNklIUnlkV1VzWEc0Z0lDQWdZMnh2YzJWVVpYaDBPaUFuUTJ4dmMyVW5MRnh1SUNBZ0lHTnNiM05sUTJ4aGMzTTZJQ2NuTEZ4dUlDQWdJRzF2WkdGc1EyeGhjM002SUZ3aWJXOWtZV3hjSWl4Y2JpQWdJQ0JpYkc5amEyVnlRMnhoYzNNNklGd2lhbkYxWlhKNUxXMXZaR0ZzWENJc1hHNGdJQ0FnYzNCcGJtNWxja2gwYld3NklHNTFiR3dzWEc0Z0lDQWdjMmh2ZDFOd2FXNXVaWEk2SUhSeWRXVXNYRzRnSUNBZ2MyaHZkME5zYjNObE9pQjBjblZsTEZ4dUlDQWdJR1poWkdWRWRYSmhkR2x2YmpvZ2JuVnNiQ3dnSUNBdkx5Qk9kVzFpWlhJZ2IyWWdiV2xzYkdselpXTnZibVJ6SUhSb1pTQm1ZV1JsSUdGdWFXMWhkR2x2YmlCMFlXdGxjeTVjYmlBZ0lDQm1ZV1JsUkdWc1lYazZJREV1TUNBZ0lDQWdJQ0FnTHk4Z1VHOXBiblFnWkhWeWFXNW5JSFJvWlNCdmRtVnliR0Y1SjNNZ1ptRmtaUzFwYmlCMGFHRjBJSFJvWlNCdGIyUmhiQ0JpWldkcGJuTWdkRzhnWm1Ga1pTQnBiaUFvTGpVZ1BTQTFNQ1VzSURFdU5TQTlJREUxTUNVc0lHVjBZeTRwWEc0Z0lIMDdYRzVjYmlBZ0x5OGdSWFpsYm5RZ1kyOXVjM1JoYm5SelhHNGdJQ1F1Ylc5a1lXd3VRa1ZHVDFKRlgwSk1UME5MSUQwZ0oyMXZaR0ZzT21KbFptOXlaUzFpYkc5amF5YzdYRzRnSUNRdWJXOWtZV3d1UWt4UFEwc2dQU0FuYlc5a1lXdzZZbXh2WTJzbk8xeHVJQ0FrTG0xdlpHRnNMa0pGUms5U1JWOVBVRVZPSUQwZ0oyMXZaR0ZzT21KbFptOXlaUzF2Y0dWdUp6dGNiaUFnSkM1dGIyUmhiQzVQVUVWT0lEMGdKMjF2WkdGc09tOXdaVzRuTzF4dUlDQWtMbTF2WkdGc0xrSkZSazlTUlY5RFRFOVRSU0E5SUNkdGIyUmhiRHBpWldadmNtVXRZMnh2YzJVbk8xeHVJQ0FrTG0xdlpHRnNMa05NVDFORklEMGdKMjF2WkdGc09tTnNiM05sSnp0Y2JpQWdKQzV0YjJSaGJDNUJSbFJGVWw5RFRFOVRSU0E5SUNkdGIyUmhiRHBoWm5SbGNpMWpiRzl6WlNjN1hHNGdJQ1F1Ylc5a1lXd3VRVXBCV0Y5VFJVNUVJRDBnSjIxdlpHRnNPbUZxWVhnNmMyVnVaQ2M3WEc0Z0lDUXViVzlrWVd3dVFVcEJXRjlUVlVORFJWTlRJRDBnSjIxdlpHRnNPbUZxWVhnNmMzVmpZMlZ6Y3ljN1hHNGdJQ1F1Ylc5a1lXd3VRVXBCV0Y5R1FVbE1JRDBnSjIxdlpHRnNPbUZxWVhnNlptRnBiQ2M3WEc0Z0lDUXViVzlrWVd3dVFVcEJXRjlEVDAxUVRFVlVSU0E5SUNkdGIyUmhiRHBoYW1GNE9tTnZiWEJzWlhSbEp6dGNibHh1SUNBa0xtWnVMbTF2WkdGc0lEMGdablZ1WTNScGIyNG9iM0IwYVc5dWN5bDdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0J1WlhjZ0pDNXRiMlJoYkNoMGFHbHpMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1FYVjBiMjFoZEdsallXeHNlU0JpYVc1a0lHeHBibXR6SUhkcGRHZ2djbVZzUFZ3aWJXOWtZV3c2WTJ4dmMyVmNJaUIwYnl3Z2QyVnNiQ3dnWTJ4dmMyVWdkR2hsSUcxdlpHRnNMbHh1SUNBa0tHUnZZM1Z0Wlc1MEtTNXZiaWduWTJ4cFkyc3ViVzlrWVd3bkxDQW5ZVnR5Wld4K1BWd2liVzlrWVd3NlkyeHZjMlZjSWwwbkxDQWtMbTF2WkdGc0xtTnNiM05sS1R0Y2JpQWdKQ2hrYjJOMWJXVnVkQ2t1YjI0b0oyTnNhV05yTG0xdlpHRnNKeXdnSjJGYmNtVnNmajFjSW0xdlpHRnNPbTl3Wlc1Y0lsMG5MQ0JtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdKQ2gwYUdsektTNXRiMlJoYkNncE8xeHVJQ0I5S1R0Y2JuMHBLVHNpTENKcGJYQnZjblFnSkNCbWNtOXRJQ2RxY1hWbGNua25YRzVjYmlRb1pHOWpkVzFsYm5RcExuSmxZV1I1S0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUhaaGNpQmhjR2xmZFhKc0lEMGdKMmgwZEhCek9pOHZibTh0YzIxaGJHd3RjR3hoYmk1b1pYSnZhM1ZoY0hBdVkyOXRMMkZ3YVNjN1hHNWNiaUFnSUNCcFppZ2tLQ2N1WW5WMGRHOXVMUzFoWkdSZmVXOTFjbDl0WVhBbktTNXNaVzVuZEdncElIdGNibHgwSUNCY2RDOHFJRzFoY0NCd1lXZGxJSE4wWVhKMElDb3ZYRzVjYmx4MElDQWdJSFpoY2lCdGVVMWhjSE1nUFNCYlhUdGNibHgwSUNBZ0lIWmhjaUJqZFhOMGIyMWxja2xrTzF4dVhIUWdJQ0FnZG1GeUlITmxiR1ZqZEdWa1RXRndJRDBnZTF4dVhIUWdJQ0FnSUNBZ0lHbGtPaUF0TVN4Y2JseDBJQ0FnSUNBZ0lDQnRZWEJmYm1GdFpUb2dYQ0pjSWl4Y2JseDBJQ0FnSUNBZ0lDQnRZWEJmYzJWMGRHbHVaem9nWENKY0lseHVYSFFnSUNBZ2ZUdGNibHh1WEhRZ0lDQWdhV1lvZEhsd1pXOW1JRzFsZEdFdWNHRm5aUzVqZFhOMGIyMWxja2xrSUQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc1Y2RDQWdJQ0FnSUNBZ1kzVnpkRzl0WlhKSlpDQTlJREU3WEc1Y2RDQWdJQ0I5SUdWc2MyVWdlMXh1WEhRZ0lDQWdJQ0FnSUdOMWMzUnZiV1Z5U1dRZ1BTQnRaWFJoTG5CaFoyVXVZM1Z6ZEc5dFpYSkpaRHRjYmx4MElDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGpkWE4wYjIxbGNrbGtLVHRjYmx4MElDQWdJQ0FnSUNBa0xtZGxkRXBUVDA0b0lHRndhVjkxY213Z0t5QmNJaTl0WVhBdmJHOWhaQzljSWlBcklHTjFjM1J2YldWeVNXUXNJR1oxYm1OMGFXOXVLQ0J5WlhOd2IyNXpaU0FwSUh0Y2JseDBJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0lYSmxjM0J2Ym5ObExtVnljbTl5S1NCN1hHNWNkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtLQ2N1YldGd2MxOWZZblYwZEc5dWMxOXNiMkZrSnlrdWNtVnRiM1psUTJ4aGMzTW9KMkoxZEhSdmJpMHRaR2x6WVdKc1pXUW5LUzVoWkdSRGJHRnpjeWduWW5WMGRHOXVMUzFuY21WbGJpY3BPMXh1WEhRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlhsTllYQnpJRDBnY21WemNHOXVjMlV1WkdGMFlUdGNibHgwSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVYSFFnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29jbVZ6Y0c5dWMyVXBPMXh1WEhRZ0lDQWdJQ0FnSUgwcE8xeHVYSFFnSUNBZ2ZWeHVYRzVjZENBZ0lDQWtLQ2N1WW5WMGRHOXVMUzFoWkdSZmVXOTFjbDl0WVhBbktTNWpiR2xqYXlobWRXNWpkR2x2YmlncGUxeHVYSFFnSUNBZ0lDQmNibHgwWEhSY2RHbG1LQ1FvZEdocGN5a3VhR0Z6UTJ4aGMzTW9KMkoxZEhSdmJpMHRaM0psWlc0bktTa2dlMXh1WEc1Y2RGeDBYSFJjZEM4dklISmxiVzkyWlNCaGJHd2djMnhwWkdWelhHNWNkRngwWEhSY2RIWmhjaUJqYm5SeklEMGdKQ2duTG0xaGNITXRMWE5zYVdSbGNuTWdMbWwwWlcwbktTNXNaVzVuZEdnN1hHNWNkRngwWEhSY2RHWnZjaWgyWVhJZ2FUMWpiblJ6TFRFN0lHaytNRHNnYVMwdEtTQjdYRzVjZEZ4MFhIUmNkQ0FnSUNCcFppaDBlWEJsYjJZZ0pDZ25MbTFoY0hNdExYTnNhV1JsY25NZ0xtbDBaVzBuS1Z0cFhTQWhQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVYSFJjZEZ4MFhIUWdJQ0FnSUNBZ0lDUW9KeTV0WVhCekxTMXpiR2xrWlhKeklDNXBkR1Z0SnlsYmFWMHVjbVZ0YjNabEtDazdYRzVjZEZ4MFhIUmNkQ0FnSUNCOVhHNWNkRngwWEhSY2RIMWNibHh1WEhSY2RGeDBYSFIyWVhJZ2FYUmxiVjlqZENBOUlDY25PMXh1WEhSY2RGeDBYSFIyWVhJZ2MyVjBkR2x1WnlBOUlDY25PMXh1WEhSY2RGeDBYSFJ0ZVUxaGNITXVabTl5UldGamFDaG1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hHNWNkRngwWEhSY2RDQWdJQ0J6WlhSMGFXNW5JRDBnU2xOUFRpNXdZWEp6WlNocGRHVnRMbTFoY0Y5elpYUjBhVzVuS1M1MGIxTjBjbWx1WnlncE8xeHVYSFJjZEZ4MFhIUWdJQ0FnYVhSbGJWOWpkQ0E5SUNjOFpHbDJJR05zWVhOelBWd2lhWFJsYlZ3aUlHUmhkR0V0YVdROVhDSW5JQ3NnYVhSbGJTNXBaQ0FySUNkY0lpQmtZWFJoTFhObGRIUnBibWM5WENJbklDc2djMlYwZEdsdVp5QXJJQ2RjSWlCa1lYUmhMVzVoYldVOVhDSW5JQ3NnYVhSbGJTNXRZWEJmYm1GdFpTQXJJQ2RjSWo0bklDc2dYRzVjZEZ4MFhIUmNkQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0lDQThhVzFuSUhOeVl6MWNJaWNnS3lCM2FXNWtiM2N1YldGd1gybGpiMjVmZFhKc0lDc2dKMXdpSUM4K0p5QXJJRnh1WEhSY2RGeDBYSFFnSUNBZ0lDQWdJQ0FnSUNBblBHUnBkaUJqYkdGemN6MWNJblJwZEd4bFhDSStKeUFySUdsMFpXMHViV0Z3WDI1aGJXVWdLeUFuUEM5a2FYWStKenRjYmx4dVhIUmNkRngwWEhRZ0lDQWdKQ2duTG0xaGNITXRMWE5zYVdSbGNuTW5LUzV6YkdsamF5Z25jMnhwWTJ0QlpHUW5MR2wwWlcxZlkzUXBPeUJjYmx4MFhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RGeDBKQ2duSTJ4dllXUXRMVzFoY0hNdFlteHZZMnRsY2ljcExuTm9iM2NvS1R0Y2JseDBYSFJjZEZ4MEpDZ25JMnh2WVdRdExXMWhjSE1uS1M1aGJtbHRZWFJsS0h0aWIzUjBiMjA2SUZ3aU1IQjRYQ0o5TENBMU1EQXBPMXh1WEhSY2RGeDBmVnh1WEhRZ0lDQWdmU2s3WEc1Y2JseDBJQ0FnSUNRb0p5NXRZWEJ6TFMxemJHbGtaWEp6SnlrdWMyeHBZMnNvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVtYVc1cGRHVTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUYUc5M09pQTFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VFkzSnZiR3c2SURVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOd2IyNXphWFpsT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGEzQnZhVzUwT2lBeE1UazVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUjBhVzVuY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VGFHOTNPaUEwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJ4cFpHVnpWRzlUWTNKdmJHdzZJRFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhM0J2YVc1ME9pQXhNREkwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFIwYVc1bmN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMnhwWkdWelZHOVRhRzkzT2lBekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyeHBaR1Z6Vkc5VFkzSnZiR3c2SUROY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJjRzlwYm5RNklEYzJPQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnNhV1JsYzFSdlUyaHZkem9nTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOc2FXUmxjMVJ2VTJOeWIyeHNPaUF5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGEzQnZhVzUwT2lBME9EQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJHbGtaWE5VYjFOb2IzYzZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Ykdsa1pYTlViMU5qY205c2JEb2dNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmx2ZFNCallXNGdkVzV6YkdsamF5QmhkQ0JoSUdkcGRtVnVJR0p5WldGcmNHOXBiblFnYm05M0lHSjVJR0ZrWkdsdVp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WlhSMGFXNW5jem9nWENKMWJuTnNhV05yWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBibk4wWldGa0lHOW1JR0VnYzJWMGRHbHVaM01nYjJKcVpXTjBYRzRnSUNBZ0lDQWdJQ0FnSUNCZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNRb0p5NXNiMkZrTFMxdFlYQnpYMk5zYjNObEp5a3VZMnhwWTJzb1puVnVZM1JwYjI0b1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBa0tDY2piRzloWkMwdGJXRndjeTFpYkc5amEyVnlKeWt1YUdsa1pTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pDZ25JMnh2WVdRdExXMWhjSE1uS1M1aGJtbHRZWFJsS0h0aWIzUjBiMjA2SUZ3aUxURTFNREJ3ZUZ3aWZTd2dOVEF3S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmx4dUlDQWdJQ0FnSUNBa0tDY3ViV0Z3Y3kwdGMyeHBaR1Z5Y3ljcExtOXVLQ2RqYkdsamF5Y3NJQ2N1YVhSbGJTY3NJR1oxYm1OMGFXOXVLR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUcxaGNGOXBaQ0E5SUNRb2RHaHBjeWt1WkdGMFlTZ25hV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCdFlYQmZibUZ0WlNBOUlDUW9kR2hwY3lrdVpHRjBZU2duYm1GdFpTY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJRzFoY0Y5elpYUjBhVzVuSUQwZ0pDaDBhR2x6S1M1a1lYUmhLQ2R6WlhSMGFXNW5KeWsvSUNRb2RHaHBjeWt1WkdGMFlTZ25jMlYwZEdsdVp5Y3BMbk53YkdsMEtGd2lMRndpS1RvZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjNWdWRISjVYMjVoYldWeklEMGdKeWM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0cxaGNGOXBaQ0E5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hIUjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFISmxaaUE5SUNjdmJXRndjeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWEhSdFlYQmZjMlYwZEdsdVp5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHbDBaVzBwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYSFJjZEdadmNpaDJZWElnYVQwd08yazhkMmx1Wkc5M0xtMWhjRjlqYjNWdWRISnBaWE11YkdWdVozUm9MVEU3YVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY2RGeDBYSFJwWmlocGRHVnRJRDA5SUhkcGJtUnZkeTV0WVhCZlkyOTFiblJ5YVdWelcybGRMbU52WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4MFhIUmNkRngwWTI5MWJuUnllVjl1WVcxbGN5QXJQU0IzYVc1a2IzY3ViV0Z3WDJOdmRXNTBjbWxsYzF0cFhTNXVZVzFsSUNzZ0p5d2dKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hIUmNkRngwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYSFJjZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJRngwZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1FvSnk1c2IyRmtMUzF0WVhCelgyTnNiM05sSnlrdWRISnBaMmRsY2lnblkyeHBZMnNuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1kyOTFiblJ5ZVY5dVlXMWxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYSFJqYjI1emIyeGxMbXh2WnloamIzVnVkSEo1WDI1aGJXVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGeDBZMjkxYm5SeWVWOXVZVzFsY3lBOUlHTnZkVzUwY25sZmJtRnRaWE11YzNWaWMzUnlhVzVuS0RBc0lHTnZkVzUwY25sZmJtRnRaWE11YkdWdVozUm9JQzBnTWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUZ4MEpDZ25JMjFoY0Y5dVlXMWxYMnhwYm1WcGRHVnRKeWt1ZG1Gc0tHMWhjRjl1WVcxbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ4MEpDZ25JMjFoY0Y5amIzVnVkSEpwWlhOZmJHbHVaV2wwWlcwbktTNTJZV3dvWTI5MWJuUnllVjl1WVcxbGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCY2RGeHVJQ0FnSUNBZ0lDQWdJQ0FnWEhRa0tDY3VZV05qYjNKa1pXOXVYMTkwWVdJdExXMWhjQ0J3SnlrdWRHVjRkQ2hqYjNWdWRISjVYMjVoYldWektUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0NRb0p5NWhZMk52Y21SbGIyNWZYM1JoWWk1aFkyTnZjbVJsYjI1ZlgzUmhZaTB0YldGd0p5a3VZM056S0Nka2FYTndiR0Y1SnlrZ1BUMGdKMjV2Ym1VbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NWhZMk52Y21SbGIyNWZYM1JoWWkwdGJXRndKeWt1YzJodmR5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmxlSEJoYm1RZ1pHVjBZV2xzSUhSaFlpQmhjeUJrWldaaGRXeDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNRb0p5NWhZMk52Y21SbGIyNWZYM1JoWWk1aFkyTnZjbVJsYjI1ZlgzUmhZaTB0YldGd0lHeGhZbVZzSnlrdWRISnBaMmRsY2lnblkyeHBZMnNuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNibHgwWEhSY2RGeDBMeThnSkNnbkxtSjFkSFJ2YmkwdFlXUmtYM2x2ZFhKZmJXRndKeWt1Y21WdGIzWmxRMnhoYzNNb0oySjFkSFJ2YmkwdFozSmxaVzRuS1M1aFpHUkRiR0Z6Y3lnblluVjBkRzl1TFMxa2FYTmhZbXhsWkNjcE8xeHVYSFJjZEZ4MFhIUWtLQ2NqWVdSa0xYUnZMV05oY25RbktTNXlaVzF2ZG1WRGJHRnpjeWduWW5WMGRHOXVMUzFrYVhOaFlteGxaQ2NwTG1Ga1pFTnNZWE56S0NkaWRYUjBiMjR0TFdkeVpXVnVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dVhIUjlYRzU5S1RzaUxDSWhablZ1WTNScGIyNG9hU2w3WENKMWMyVWdjM1J5YVdOMFhDSTdYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWkdWbWFXNWxKaVprWldacGJtVXVZVzFrUDJSbFptbHVaU2hiWENKcWNYVmxjbmxjSWwwc2FTazZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdWNGNHOXlkSE0vYlc5a2RXeGxMbVY0Y0c5eWRITTlhU2h5WlhGMWFYSmxLRndpYW5GMVpYSjVYQ0lwS1RwcEtHcFJkV1Z5ZVNsOUtHWjFibU4wYVc5dUtHa3BlMXdpZFhObElITjBjbWxqZEZ3aU8zWmhjaUJsUFhkcGJtUnZkeTVUYkdsamEzeDhlMzA3S0dVOVpuVnVZM1JwYjI0b0tYdDJZWElnWlQwd08zSmxkSFZ5YmlCbWRXNWpkR2x2YmloMExHOHBlM1poY2lCekxHNDlkR2hwY3p0dUxtUmxabUYxYkhSelBYdGhZMk5sYzNOcFltbHNhWFI1T2lFd0xHRmtZWEIwYVhabFNHVnBaMmgwT2lFeExHRndjR1Z1WkVGeWNtOTNjenBwS0hRcExHRndjR1Z1WkVSdmRITTZhU2gwS1N4aGNuSnZkM002SVRBc1lYTk9ZWFpHYjNJNmJuVnNiQ3h3Y21WMlFYSnliM2M2Snp4aWRYUjBiMjRnWTJ4aGMzTTlYQ0p6YkdsamF5MXdjbVYyWENJZ1lYSnBZUzFzWVdKbGJEMWNJbEJ5WlhacGIzVnpYQ0lnZEhsd1pUMWNJbUoxZEhSdmJsd2lQbEJ5WlhacGIzVnpQQzlpZFhSMGIyNCtKeXh1WlhoMFFYSnliM2M2Snp4aWRYUjBiMjRnWTJ4aGMzTTlYQ0p6YkdsamF5MXVaWGgwWENJZ1lYSnBZUzFzWVdKbGJEMWNJazVsZUhSY0lpQjBlWEJsUFZ3aVluVjBkRzl1WENJK1RtVjRkRHd2WW5WMGRHOXVQaWNzWVhWMGIzQnNZWGs2SVRFc1lYVjBiM0JzWVhsVGNHVmxaRG96WlRNc1kyVnVkR1Z5VFc5a1pUb2hNU3hqWlc1MFpYSlFZV1JrYVc1bk9sd2lOVEJ3ZUZ3aUxHTnpjMFZoYzJVNlhDSmxZWE5sWENJc1kzVnpkRzl0VUdGbmFXNW5PbVoxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUdrb0p6eGlkWFIwYjI0Z2RIbHdaVDFjSW1KMWRIUnZibHdpSUM4K0p5a3VkR1Y0ZENoMEt6RXBmU3hrYjNSek9pRXhMR1J2ZEhORGJHRnpjenBjSW5Oc2FXTnJMV1J2ZEhOY0lpeGtjbUZuWjJGaWJHVTZJVEFzWldGemFXNW5PbHdpYkdsdVpXRnlYQ0lzWldSblpVWnlhV04wYVc5dU9pNHpOU3htWVdSbE9pRXhMR1p2WTNWelQyNVRaV3hsWTNRNklURXNabTlqZFhOUGJrTm9ZVzVuWlRvaE1TeHBibVpwYm1sMFpUb2hNQ3hwYm1sMGFXRnNVMnhwWkdVNk1DeHNZWHA1VEc5aFpEcGNJbTl1WkdWdFlXNWtYQ0lzYlc5aWFXeGxSbWx5YzNRNklURXNjR0YxYzJWUGJraHZkbVZ5T2lFd0xIQmhkWE5sVDI1R2IyTjFjem9oTUN4d1lYVnpaVTl1Ukc5MGMwaHZkbVZ5T2lFeExISmxjM0J2Ym1SVWJ6cGNJbmRwYm1SdmQxd2lMSEpsYzNCdmJuTnBkbVU2Ym5Wc2JDeHliM2R6T2pFc2NuUnNPaUV4TEhOc2FXUmxPbHdpWENJc2MyeHBaR1Z6VUdWeVVtOTNPakVzYzJ4cFpHVnpWRzlUYUc5M09qRXNjMnhwWkdWelZHOVRZM0p2Ykd3Nk1TeHpjR1ZsWkRvMU1EQXNjM2RwY0dVNklUQXNjM2RwY0dWVWIxTnNhV1JsT2lFeExIUnZkV05vVFc5MlpUb2hNQ3gwYjNWamFGUm9jbVZ6YUc5c1pEbzFMSFZ6WlVOVFV6b2hNQ3gxYzJWVWNtRnVjMlp2Y20wNklUQXNkbUZ5YVdGaWJHVlhhV1IwYURvaE1TeDJaWEowYVdOaGJEb2hNU3gyWlhKMGFXTmhiRk4zYVhCcGJtYzZJVEVzZDJGcGRFWnZja0Z1YVcxaGRHVTZJVEFzZWtsdVpHVjRPakZsTTMwc2JpNXBibWwwYVdGc2N6MTdZVzVwYldGMGFXNW5PaUV4TEdSeVlXZG5hVzVuT2lFeExHRjFkRzlRYkdGNVZHbHRaWEk2Ym5Wc2JDeGpkWEp5Wlc1MFJHbHlaV04wYVc5dU9qQXNZM1Z5Y21WdWRFeGxablE2Ym5Wc2JDeGpkWEp5Wlc1MFUyeHBaR1U2TUN4a2FYSmxZM1JwYjI0Nk1Td2taRzkwY3pwdWRXeHNMR3hwYzNSWGFXUjBhRHB1ZFd4c0xHeHBjM1JJWldsbmFIUTZiblZzYkN4c2IyRmtTVzVrWlhnNk1Dd2tibVY0ZEVGeWNtOTNPbTUxYkd3c0pIQnlaWFpCY25KdmR6cHVkV3hzTEhOamNtOXNiR2x1WnpvaE1TeHpiR2xrWlVOdmRXNTBPbTUxYkd3c2MyeHBaR1ZYYVdSMGFEcHVkV3hzTENSemJHbGtaVlJ5WVdOck9tNTFiR3dzSkhOc2FXUmxjenB1ZFd4c0xITnNhV1JwYm1jNklURXNjMnhwWkdWUFptWnpaWFE2TUN4emQybHdaVXhsWm5RNmJuVnNiQ3h6ZDJsd2FXNW5PaUV4TENSc2FYTjBPbTUxYkd3c2RHOTFZMmhQWW1wbFkzUTZlMzBzZEhKaGJuTm1iM0p0YzBWdVlXSnNaV1E2SVRFc2RXNXpiR2xqYTJWa09pRXhmU3hwTG1WNGRHVnVaQ2h1TEc0dWFXNXBkR2xoYkhNcExHNHVZV04wYVhabFFuSmxZV3R3YjJsdWREMXVkV3hzTEc0dVlXNXBiVlI1Y0dVOWJuVnNiQ3h1TG1GdWFXMVFjbTl3UFc1MWJHd3NiaTVpY21WaGEzQnZhVzUwY3oxYlhTeHVMbUp5WldGcmNHOXBiblJUWlhSMGFXNW5jejFiWFN4dUxtTnpjMVJ5WVc1emFYUnBiMjV6UFNFeExHNHVabTlqZFhOelpXUTlJVEVzYmk1cGJuUmxjbkoxY0hSbFpEMGhNU3h1TG1ocFpHUmxiajFjSW1ocFpHUmxibHdpTEc0dWNHRjFjMlZrUFNFd0xHNHVjRzl6YVhScGIyNVFjbTl3UFc1MWJHd3NiaTV5WlhOd2IyNWtWRzg5Ym5Wc2JDeHVMbkp2ZDBOdmRXNTBQVEVzYmk1emFHOTFiR1JEYkdsamF6MGhNQ3h1TGlSemJHbGtaWEk5YVNoMEtTeHVMaVJ6Ykdsa1pYTkRZV05vWlQxdWRXeHNMRzR1ZEhKaGJuTm1iM0p0Vkhsd1pUMXVkV3hzTEc0dWRISmhibk5wZEdsdmJsUjVjR1U5Ym5Wc2JDeHVMblpwYzJsaWFXeHBkSGxEYUdGdVoyVTlYQ0oyYVhOcFltbHNhWFI1WTJoaGJtZGxYQ0lzYmk1M2FXNWtiM2RYYVdSMGFEMHdMRzR1ZDJsdVpHOTNWR2x0WlhJOWJuVnNiQ3h6UFdrb2RDa3VaR0YwWVNoY0luTnNhV05yWENJcGZIeDdmU3h1TG05d2RHbHZibk05YVM1bGVIUmxibVFvZTMwc2JpNWtaV1poZFd4MGN5eHZMSE1wTEc0dVkzVnljbVZ1ZEZOc2FXUmxQVzR1YjNCMGFXOXVjeTVwYm1sMGFXRnNVMnhwWkdVc2JpNXZjbWxuYVc1aGJGTmxkSFJwYm1kelBXNHViM0IwYVc5dWN5eDJiMmxrSURBaFBUMWtiMk4xYldWdWRDNXRiM3BJYVdSa1pXNC9LRzR1YUdsa1pHVnVQVndpYlc5NlNHbGtaR1Z1WENJc2JpNTJhWE5wWW1sc2FYUjVRMmhoYm1kbFBWd2liVzk2ZG1semFXSnBiR2wwZVdOb1lXNW5aVndpS1RwMmIybGtJREFoUFQxa2IyTjFiV1Z1ZEM1M1pXSnJhWFJJYVdSa1pXNG1KaWh1TG1ocFpHUmxiajFjSW5kbFltdHBkRWhwWkdSbGJsd2lMRzR1ZG1semFXSnBiR2wwZVVOb1lXNW5aVDFjSW5kbFltdHBkSFpwYzJsaWFXeHBkSGxqYUdGdVoyVmNJaWtzYmk1aGRYUnZVR3hoZVQxcExuQnliM2g1S0c0dVlYVjBiMUJzWVhrc2Jpa3NiaTVoZFhSdlVHeGhlVU5zWldGeVBXa3VjSEp2ZUhrb2JpNWhkWFJ2VUd4aGVVTnNaV0Z5TEc0cExHNHVZWFYwYjFCc1lYbEpkR1Z5WVhSdmNqMXBMbkJ5YjNoNUtHNHVZWFYwYjFCc1lYbEpkR1Z5WVhSdmNpeHVLU3h1TG1Ob1lXNW5aVk5zYVdSbFBXa3VjSEp2ZUhrb2JpNWphR0Z1WjJWVGJHbGtaU3h1S1N4dUxtTnNhV05yU0dGdVpHeGxjajFwTG5CeWIzaDVLRzR1WTJ4cFkydElZVzVrYkdWeUxHNHBMRzR1YzJWc1pXTjBTR0Z1Wkd4bGNqMXBMbkJ5YjNoNUtHNHVjMlZzWldOMFNHRnVaR3hsY2l4dUtTeHVMbk5sZEZCdmMybDBhVzl1UFdrdWNISnZlSGtvYmk1elpYUlFiM05wZEdsdmJpeHVLU3h1TG5OM2FYQmxTR0Z1Wkd4bGNqMXBMbkJ5YjNoNUtHNHVjM2RwY0dWSVlXNWtiR1Z5TEc0cExHNHVaSEpoWjBoaGJtUnNaWEk5YVM1d2NtOTRlU2h1TG1SeVlXZElZVzVrYkdWeUxHNHBMRzR1YTJWNVNHRnVaR3hsY2oxcExuQnliM2g1S0c0dWEyVjVTR0Z1Wkd4bGNpeHVLU3h1TG1sdWMzUmhibU5sVldsa1BXVXJLeXh1TG1oMGJXeEZlSEJ5UFM5ZUtEODZYRnh6S2lnOFcxeGNkMXhjVjEwclBpbGJYajVkS2lra0x5eHVMbkpsWjJsemRHVnlRbkpsWVd0d2IybHVkSE1vS1N4dUxtbHVhWFFvSVRBcGZYMG9LU2t1Y0hKdmRHOTBlWEJsTG1GamRHbDJZWFJsUVVSQlBXWjFibU4wYVc5dUtDbDdkR2hwY3k0a2MyeHBaR1ZVY21GamF5NW1hVzVrS0Z3aUxuTnNhV05yTFdGamRHbDJaVndpS1M1aGRIUnlLSHRjSW1GeWFXRXRhR2xrWkdWdVhDSTZYQ0ptWVd4elpWd2lmU2t1Wm1sdVpDaGNJbUVzSUdsdWNIVjBMQ0JpZFhSMGIyNHNJSE5sYkdWamRGd2lLUzVoZEhSeUtIdDBZV0pwYm1SbGVEcGNJakJjSW4wcGZTeGxMbkJ5YjNSdmRIbHdaUzVoWkdSVGJHbGtaVDFsTG5CeWIzUnZkSGx3WlM1emJHbGphMEZrWkQxbWRXNWpkR2x2YmlobExIUXNieWw3ZG1GeUlITTlkR2hwY3p0cFppaGNJbUp2YjJ4bFlXNWNJajA5ZEhsd1pXOW1JSFFwYnoxMExIUTliblZzYkR0bGJITmxJR2xtS0hROE1IeDhkRDQ5Y3k1emJHbGtaVU52ZFc1MEtYSmxkSFZ5YmlFeE8zTXVkVzVzYjJGa0tDa3NYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JSFEvTUQwOVBYUW1KakE5UFQxekxpUnpiR2xrWlhNdWJHVnVaM1JvUDJrb1pTa3VZWEJ3Wlc1a1ZHOG9jeTRrYzJ4cFpHVlVjbUZqYXlrNmJ6OXBLR1VwTG1sdWMyVnlkRUpsWm05eVpTaHpMaVJ6Ykdsa1pYTXVaWEVvZENrcE9ta29aU2t1YVc1elpYSjBRV1owWlhJb2N5NGtjMnhwWkdWekxtVnhLSFFwS1RvaE1EMDlQVzgvYVNobEtTNXdjbVZ3Wlc1a1ZHOG9jeTRrYzJ4cFpHVlVjbUZqYXlrNmFTaGxLUzVoY0hCbGJtUlVieWh6TGlSemJHbGtaVlJ5WVdOcktTeHpMaVJ6Ykdsa1pYTTljeTRrYzJ4cFpHVlVjbUZqYXk1amFHbHNaSEpsYmloMGFHbHpMbTl3ZEdsdmJuTXVjMnhwWkdVcExITXVKSE5zYVdSbFZISmhZMnN1WTJocGJHUnlaVzRvZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsS1M1a1pYUmhZMmdvS1N4ekxpUnpiR2xrWlZSeVlXTnJMbUZ3Y0dWdVpDaHpMaVJ6Ykdsa1pYTXBMSE11SkhOc2FXUmxjeTVsWVdOb0tHWjFibU4wYVc5dUtHVXNkQ2w3YVNoMEtTNWhkSFJ5S0Z3aVpHRjBZUzF6YkdsamF5MXBibVJsZUZ3aUxHVXBmU2tzY3k0a2MyeHBaR1Z6UTJGamFHVTljeTRrYzJ4cFpHVnpMSE11Y21WcGJtbDBLQ2w5TEdVdWNISnZkRzkwZVhCbExtRnVhVzFoZEdWSVpXbG5hSFE5Wm5WdVkzUnBiMjRvS1h0MllYSWdhVDEwYUdsek8ybG1LREU5UFQxcExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNKaVloTUQwOVBXa3ViM0IwYVc5dWN5NWhaR0Z3ZEdsMlpVaGxhV2RvZENZbUlURTlQVDFwTG05d2RHbHZibk11ZG1WeWRHbGpZV3dwZTNaaGNpQmxQV2t1SkhOc2FXUmxjeTVsY1NocExtTjFjbkpsYm5SVGJHbGtaU2t1YjNWMFpYSklaV2xuYUhRb0lUQXBPMmt1Skd4cGMzUXVZVzVwYldGMFpTaDdhR1ZwWjJoME9tVjlMR2t1YjNCMGFXOXVjeTV6Y0dWbFpDbDlmU3hsTG5CeWIzUnZkSGx3WlM1aGJtbHRZWFJsVTJ4cFpHVTlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdiejE3ZlN4elBYUm9hWE03Y3k1aGJtbHRZWFJsU0dWcFoyaDBLQ2tzSVRBOVBUMXpMbTl3ZEdsdmJuTXVjblJzSmlZaE1UMDlQWE11YjNCMGFXOXVjeTUyWlhKMGFXTmhiQ1ltS0dVOUxXVXBMQ0V4UFQwOWN5NTBjbUZ1YzJadmNtMXpSVzVoWW14bFpEOGhNVDA5UFhNdWIzQjBhVzl1Y3k1MlpYSjBhV05oYkQ5ekxpUnpiR2xrWlZSeVlXTnJMbUZ1YVcxaGRHVW9lMnhsWm5RNlpYMHNjeTV2Y0hScGIyNXpMbk53WldWa0xITXViM0IwYVc5dWN5NWxZWE5wYm1jc2RDazZjeTRrYzJ4cFpHVlVjbUZqYXk1aGJtbHRZWFJsS0h0MGIzQTZaWDBzY3k1dmNIUnBiMjV6TG5Od1pXVmtMSE11YjNCMGFXOXVjeTVsWVhOcGJtY3NkQ2s2SVRFOVBUMXpMbU56YzFSeVlXNXphWFJwYjI1elB5Z2hNRDA5UFhNdWIzQjBhVzl1Y3k1eWRHd21KaWh6TG1OMWNuSmxiblJNWldaMFBTMXpMbU4xY25KbGJuUk1aV1owS1N4cEtIdGhibWx0VTNSaGNuUTZjeTVqZFhKeVpXNTBUR1ZtZEgwcExtRnVhVzFoZEdVb2UyRnVhVzFUZEdGeWREcGxmU3g3WkhWeVlYUnBiMjQ2Y3k1dmNIUnBiMjV6TG5Od1pXVmtMR1ZoYzJsdVp6cHpMbTl3ZEdsdmJuTXVaV0Z6YVc1bkxITjBaWEE2Wm5WdVkzUnBiMjRvYVNsN2FUMU5ZWFJvTG1ObGFXd29hU2tzSVRFOVBUMXpMbTl3ZEdsdmJuTXVkbVZ5ZEdsallXdy9LRzliY3k1aGJtbHRWSGx3WlYwOVhDSjBjbUZ1YzJ4aGRHVW9YQ0lyYVN0Y0luQjRMQ0F3Y0hncFhDSXNjeTRrYzJ4cFpHVlVjbUZqYXk1amMzTW9ieWtwT2lodlczTXVZVzVwYlZSNWNHVmRQVndpZEhKaGJuTnNZWFJsS0RCd2VDeGNJaXRwSzF3aWNIZ3BYQ0lzY3k0a2MyeHBaR1ZVY21GamF5NWpjM01vYnlrcGZTeGpiMjF3YkdWMFpUcG1kVzVqZEdsdmJpZ3BlM1FtSm5RdVkyRnNiQ2dwZlgwcEtUb29jeTVoY0hCc2VWUnlZVzV6YVhScGIyNG9LU3hsUFUxaGRHZ3VZMlZwYkNobEtTd2hNVDA5UFhNdWIzQjBhVzl1Y3k1MlpYSjBhV05oYkQ5dlczTXVZVzVwYlZSNWNHVmRQVndpZEhKaGJuTnNZWFJsTTJRb1hDSXJaU3RjSW5CNExDQXdjSGdzSURCd2VDbGNJanB2VzNNdVlXNXBiVlI1Y0dWZFBWd2lkSEpoYm5Oc1lYUmxNMlFvTUhCNExGd2lLMlVyWENKd2VDd2dNSEI0S1Z3aUxITXVKSE5zYVdSbFZISmhZMnN1WTNOektHOHBMSFFtSm5ObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0b0tYdHpMbVJwYzJGaWJHVlVjbUZ1YzJsMGFXOXVLQ2tzZEM1allXeHNLQ2w5TEhNdWIzQjBhVzl1Y3k1emNHVmxaQ2twZlN4bExuQnliM1J2ZEhsd1pTNW5aWFJPWVhaVVlYSm5aWFE5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsekxIUTlaUzV2Y0hScGIyNXpMbUZ6VG1GMlJtOXlPM0psZEhWeWJpQjBKaVp1ZFd4c0lUMDlkQ1ltS0hROWFTaDBLUzV1YjNRb1pTNGtjMnhwWkdWeUtTa3NkSDBzWlM1d2NtOTBiM1I1Y0dVdVlYTk9ZWFpHYjNJOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROWRHaHBjeTVuWlhST1lYWlVZWEpuWlhRb0tUdHVkV3hzSVQwOWRDWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSFFtSm5RdVpXRmphQ2htZFc1amRHbHZiaWdwZTNaaGNpQjBQV2tvZEdocGN5a3VjMnhwWTJzb1hDSm5aWFJUYkdsamExd2lLVHQwTG5WdWMyeHBZMnRsWkh4OGRDNXpiR2xrWlVoaGJtUnNaWElvWlN3aE1DbDlLWDBzWlM1d2NtOTBiM1I1Y0dVdVlYQndiSGxVY21GdWMybDBhVzl1UFdaMWJtTjBhVzl1S0drcGUzWmhjaUJsUFhSb2FYTXNkRDE3ZlRzaE1UMDlQV1V1YjNCMGFXOXVjeTVtWVdSbFAzUmJaUzUwY21GdWMybDBhVzl1Vkhsd1pWMDlaUzUwY21GdWMyWnZjbTFVZVhCbEsxd2lJRndpSzJVdWIzQjBhVzl1Y3k1emNHVmxaQ3RjSW0xeklGd2lLMlV1YjNCMGFXOXVjeTVqYzNORllYTmxPblJiWlM1MGNtRnVjMmwwYVc5dVZIbHdaVjA5WENKdmNHRmphWFI1SUZ3aUsyVXViM0IwYVc5dWN5NXpjR1ZsWkN0Y0ltMXpJRndpSzJVdWIzQjBhVzl1Y3k1amMzTkZZWE5sTENFeFBUMDlaUzV2Y0hScGIyNXpMbVpoWkdVL1pTNGtjMnhwWkdWVWNtRmpheTVqYzNNb2RDazZaUzRrYzJ4cFpHVnpMbVZ4S0drcExtTnpjeWgwS1gwc1pTNXdjbTkwYjNSNWNHVXVZWFYwYjFCc1lYazlablZ1WTNScGIyNG9LWHQyWVhJZ2FUMTBhR2x6TzJrdVlYVjBiMUJzWVhsRGJHVmhjaWdwTEdrdWMyeHBaR1ZEYjNWdWRENXBMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzSmlZb2FTNWhkWFJ2VUd4aGVWUnBiV1Z5UFhObGRFbHVkR1Z5ZG1Gc0tHa3VZWFYwYjFCc1lYbEpkR1Z5WVhSdmNpeHBMbTl3ZEdsdmJuTXVZWFYwYjNCc1lYbFRjR1ZsWkNrcGZTeGxMbkJ5YjNSdmRIbHdaUzVoZFhSdlVHeGhlVU5zWldGeVBXWjFibU4wYVc5dUtDbDdkbUZ5SUdrOWRHaHBjenRwTG1GMWRHOVFiR0Y1VkdsdFpYSW1KbU5zWldGeVNXNTBaWEoyWVd3b2FTNWhkWFJ2VUd4aGVWUnBiV1Z5S1gwc1pTNXdjbTkwYjNSNWNHVXVZWFYwYjFCc1lYbEpkR1Z5WVhSdmNqMW1kVzVqZEdsdmJpZ3BlM1poY2lCcFBYUm9hWE1zWlQxcExtTjFjbkpsYm5SVGJHbGtaU3RwTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUWTNKdmJHdzdhUzV3WVhWelpXUjhmR2t1YVc1MFpYSnlkWEIwWldSOGZHa3VabTlqZFhOelpXUjhmQ2doTVQwOVBXa3ViM0IwYVc5dWN5NXBibVpwYm1sMFpTWW1LREU5UFQxcExtUnBjbVZqZEdsdmJpWW1hUzVqZFhKeVpXNTBVMnhwWkdVck1UMDlQV2t1YzJ4cFpHVkRiM1Z1ZEMweFAya3VaR2x5WldOMGFXOXVQVEE2TUQwOVBXa3VaR2x5WldOMGFXOXVKaVlvWlQxcExtTjFjbkpsYm5SVGJHbGtaUzFwTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUWTNKdmJHd3NhUzVqZFhKeVpXNTBVMnhwWkdVdE1UMDlNQ1ltS0drdVpHbHlaV04wYVc5dVBURXBLU2tzYVM1emJHbGtaVWhoYm1Sc1pYSW9aU2twZlN4bExuQnliM1J2ZEhsd1pTNWlkV2xzWkVGeWNtOTNjejFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNN0lUQTlQVDFsTG05d2RHbHZibk11WVhKeWIzZHpKaVlvWlM0a2NISmxka0Z5Y205M1BXa29aUzV2Y0hScGIyNXpMbkJ5WlhaQmNuSnZkeWt1WVdSa1EyeGhjM01vWENKemJHbGpheTFoY25KdmQxd2lLU3hsTGlSdVpYaDBRWEp5YjNjOWFTaGxMbTl3ZEdsdmJuTXVibVY0ZEVGeWNtOTNLUzVoWkdSRGJHRnpjeWhjSW5Oc2FXTnJMV0Z5Y205M1hDSXBMR1V1YzJ4cFpHVkRiM1Z1ZEQ1bExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNQeWhsTGlSd2NtVjJRWEp5YjNjdWNtVnRiM1psUTJ4aGMzTW9YQ0p6YkdsamF5MW9hV1JrWlc1Y0lpa3VjbVZ0YjNabFFYUjBjaWhjSW1GeWFXRXRhR2xrWkdWdUlIUmhZbWx1WkdWNFhDSXBMR1V1Skc1bGVIUkJjbkp2ZHk1eVpXMXZkbVZEYkdGemN5aGNJbk5zYVdOckxXaHBaR1JsYmx3aUtTNXlaVzF2ZG1WQmRIUnlLRndpWVhKcFlTMW9hV1JrWlc0Z2RHRmlhVzVrWlhoY0lpa3NaUzVvZEcxc1JYaHdjaTUwWlhOMEtHVXViM0IwYVc5dWN5NXdjbVYyUVhKeWIzY3BKaVpsTGlSd2NtVjJRWEp5YjNjdWNISmxjR1Z1WkZSdktHVXViM0IwYVc5dWN5NWhjSEJsYm1SQmNuSnZkM01wTEdVdWFIUnRiRVY0Y0hJdWRHVnpkQ2hsTG05d2RHbHZibk11Ym1WNGRFRnljbTkzS1NZbVpTNGtibVY0ZEVGeWNtOTNMbUZ3Y0dWdVpGUnZLR1V1YjNCMGFXOXVjeTVoY0hCbGJtUkJjbkp2ZDNNcExDRXdJVDA5WlM1dmNIUnBiMjV6TG1sdVptbHVhWFJsSmlabExpUndjbVYyUVhKeWIzY3VZV1JrUTJ4aGMzTW9YQ0p6YkdsamF5MWthWE5oWW14bFpGd2lLUzVoZEhSeUtGd2lZWEpwWVMxa2FYTmhZbXhsWkZ3aUxGd2lkSEoxWlZ3aUtTazZaUzRrY0hKbGRrRnljbTkzTG1Ga1pDaGxMaVJ1WlhoMFFYSnliM2NwTG1Ga1pFTnNZWE56S0Z3aWMyeHBZMnN0YUdsa1pHVnVYQ0lwTG1GMGRISW9lMXdpWVhKcFlTMWthWE5oWW14bFpGd2lPbHdpZEhKMVpWd2lMSFJoWW1sdVpHVjRPbHdpTFRGY0luMHBLWDBzWlM1d2NtOTBiM1I1Y0dVdVluVnBiR1JFYjNSelBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVc2RDeHZQWFJvYVhNN2FXWW9JVEE5UFQxdkxtOXdkR2x2Ym5NdVpHOTBjeWw3Wm05eUtHOHVKSE5zYVdSbGNpNWhaR1JEYkdGemN5aGNJbk5zYVdOckxXUnZkSFJsWkZ3aUtTeDBQV2tvWENJOGRXd2dMejVjSWlrdVlXUmtRMnhoYzNNb2J5NXZjSFJwYjI1ekxtUnZkSE5EYkdGemN5a3NaVDB3TzJVOFBXOHVaMlYwUkc5MFEyOTFiblFvS1R0bEt6MHhLWFF1WVhCd1pXNWtLR2tvWENJOGJHa2dMejVjSWlrdVlYQndaVzVrS0c4dWIzQjBhVzl1Y3k1amRYTjBiMjFRWVdkcGJtY3VZMkZzYkNoMGFHbHpMRzhzWlNrcEtUdHZMaVJrYjNSelBYUXVZWEJ3Wlc1a1ZHOG9ieTV2Y0hScGIyNXpMbUZ3Y0dWdVpFUnZkSE1wTEc4dUpHUnZkSE11Wm1sdVpDaGNJbXhwWENJcExtWnBjbk4wS0NrdVlXUmtRMnhoYzNNb1hDSnpiR2xqYXkxaFkzUnBkbVZjSWlsOWZTeGxMbkJ5YjNSdmRIbHdaUzVpZFdsc1pFOTFkRDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNN1pTNGtjMnhwWkdWelBXVXVKSE5zYVdSbGNpNWphR2xzWkhKbGJpaGxMbTl3ZEdsdmJuTXVjMnhwWkdVclhDSTZibTkwS0M1emJHbGpheTFqYkc5dVpXUXBYQ0lwTG1Ga1pFTnNZWE56S0Z3aWMyeHBZMnN0YzJ4cFpHVmNJaWtzWlM1emJHbGtaVU52ZFc1MFBXVXVKSE5zYVdSbGN5NXNaVzVuZEdnc1pTNGtjMnhwWkdWekxtVmhZMmdvWm5WdVkzUnBiMjRvWlN4MEtYdHBLSFFwTG1GMGRISW9YQ0prWVhSaExYTnNhV05yTFdsdVpHVjRYQ0lzWlNrdVpHRjBZU2hjSW05eWFXZHBibUZzVTNSNWJHbHVaMXdpTEdrb2RDa3VZWFIwY2loY0luTjBlV3hsWENJcGZIeGNJbHdpS1gwcExHVXVKSE5zYVdSbGNpNWhaR1JEYkdGemN5aGNJbk5zYVdOckxYTnNhV1JsY2x3aUtTeGxMaVJ6Ykdsa1pWUnlZV05yUFRBOVBUMWxMbk5zYVdSbFEyOTFiblEvYVNnblBHUnBkaUJqYkdGemN6MWNJbk5zYVdOckxYUnlZV05yWENJdlBpY3BMbUZ3Y0dWdVpGUnZLR1V1SkhOc2FXUmxjaWs2WlM0a2MyeHBaR1Z6TG5keVlYQkJiR3dvSnp4a2FYWWdZMnhoYzNNOVhDSnpiR2xqYXkxMGNtRmphMXdpTHo0bktTNXdZWEpsYm5Rb0tTeGxMaVJzYVhOMFBXVXVKSE5zYVdSbFZISmhZMnN1ZDNKaGNDZ25QR1JwZGlCamJHRnpjejFjSW5Oc2FXTnJMV3hwYzNSY0lpOCtKeWt1Y0dGeVpXNTBLQ2tzWlM0a2MyeHBaR1ZVY21GamF5NWpjM01vWENKdmNHRmphWFI1WENJc01Da3NJVEFoUFQxbExtOXdkR2x2Ym5NdVkyVnVkR1Z5VFc5a1pTWW1JVEFoUFQxbExtOXdkR2x2Ym5NdWMzZHBjR1ZVYjFOc2FXUmxmSHdvWlM1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJOeWIyeHNQVEVwTEdrb1hDSnBiV2RiWkdGMFlTMXNZWHA1WFZ3aUxHVXVKSE5zYVdSbGNpa3VibTkwS0Z3aVczTnlZMTFjSWlrdVlXUmtRMnhoYzNNb1hDSnpiR2xqYXkxc2IyRmthVzVuWENJcExHVXVjMlYwZFhCSmJtWnBibWwwWlNncExHVXVZblZwYkdSQmNuSnZkM01vS1N4bExtSjFhV3hrUkc5MGN5Z3BMR1V1ZFhCa1lYUmxSRzkwY3lncExHVXVjMlYwVTJ4cFpHVkRiR0Z6YzJWektGd2liblZ0WW1WeVhDSTlQWFI1Y0dWdlppQmxMbU4xY25KbGJuUlRiR2xrWlQ5bExtTjFjbkpsYm5SVGJHbGtaVG93S1N3aE1EMDlQV1V1YjNCMGFXOXVjeTVrY21GbloyRmliR1VtSm1VdUpHeHBjM1F1WVdSa1EyeGhjM01vWENKa2NtRm5aMkZpYkdWY0lpbDlMR1V1Y0hKdmRHOTBlWEJsTG1KMWFXeGtVbTkzY3oxbWRXNWpkR2x2YmlncGUzWmhjaUJwTEdVc2RDeHZMSE1zYml4eUxHdzlkR2hwY3p0cFppaHZQV1J2WTNWdFpXNTBMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tTeHVQV3d1SkhOc2FXUmxjaTVqYUdsc1pISmxiaWdwTEd3dWIzQjBhVzl1Y3k1eWIzZHpQakVwZTJadmNpaHlQV3d1YjNCMGFXOXVjeTV6Ykdsa1pYTlFaWEpTYjNjcWJDNXZjSFJwYjI1ekxuSnZkM01zY3oxTllYUm9MbU5sYVd3b2JpNXNaVzVuZEdndmNpa3NhVDB3TzJrOGN6dHBLeXNwZTNaaGNpQmtQV1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb1hDSmthWFpjSWlrN1ptOXlLR1U5TUR0bFBHd3ViM0IwYVc5dWN5NXliM2R6TzJVckt5bDdkbUZ5SUdFOVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW1ScGRsd2lLVHRtYjNJb2REMHdPM1E4YkM1dmNIUnBiMjV6TG5Oc2FXUmxjMUJsY2xKdmR6dDBLeXNwZTNaaGNpQmpQV2txY2lzb1pTcHNMbTl3ZEdsdmJuTXVjMnhwWkdWelVHVnlVbTkzSzNRcE8yNHVaMlYwS0dNcEppWmhMbUZ3Y0dWdVpFTm9hV3hrS0c0dVoyVjBLR01wS1gxa0xtRndjR1Z1WkVOb2FXeGtLR0VwZlc4dVlYQndaVzVrUTJocGJHUW9aQ2w5YkM0a2MyeHBaR1Z5TG1WdGNIUjVLQ2t1WVhCd1pXNWtLRzhwTEd3dUpITnNhV1JsY2k1amFHbHNaSEpsYmlncExtTm9hV3hrY21WdUtDa3VZMmhwYkdSeVpXNG9LUzVqYzNNb2UzZHBaSFJvT2pFd01DOXNMbTl3ZEdsdmJuTXVjMnhwWkdWelVHVnlVbTkzSzF3aUpWd2lMR1JwYzNCc1lYazZYQ0pwYm14cGJtVXRZbXh2WTJ0Y0luMHBmWDBzWlM1d2NtOTBiM1I1Y0dVdVkyaGxZMnRTWlhOd2IyNXphWFpsUFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUc4c2N5eHVMSEk5ZEdocGN5eHNQU0V4TEdROWNpNGtjMnhwWkdWeUxuZHBaSFJvS0Nrc1lUMTNhVzVrYjNjdWFXNXVaWEpYYVdSMGFIeDhhU2gzYVc1a2IzY3BMbmRwWkhSb0tDazdhV1lvWENKM2FXNWtiM2RjSWowOVBYSXVjbVZ6Y0c5dVpGUnZQMjQ5WVRwY0luTnNhV1JsY2x3aVBUMDljaTV5WlhOd2IyNWtWRzgvYmoxa09sd2liV2x1WENJOVBUMXlMbkpsYzNCdmJtUlVieVltS0c0OVRXRjBhQzV0YVc0b1lTeGtLU2tzY2k1dmNIUnBiMjV6TG5KbGMzQnZibk5wZG1VbUpuSXViM0IwYVc5dWN5NXlaWE53YjI1emFYWmxMbXhsYm1kMGFDWW1iblZzYkNFOVBYSXViM0IwYVc5dWN5NXlaWE53YjI1emFYWmxLWHR6UFc1MWJHdzdabTl5S0c4Z2FXNGdjaTVpY21WaGEzQnZhVzUwY3lseUxtSnlaV0ZyY0c5cGJuUnpMbWhoYzA5M2JsQnliM0JsY25SNUtHOHBKaVlvSVRFOVBUMXlMbTl5YVdkcGJtRnNVMlYwZEdsdVozTXViVzlpYVd4bFJtbHljM1EvYmp4eUxtSnlaV0ZyY0c5cGJuUnpXMjlkSmlZb2N6MXlMbUp5WldGcmNHOXBiblJ6VzI5ZEtUcHVQbkl1WW5KbFlXdHdiMmx1ZEhOYmIxMG1KaWh6UFhJdVluSmxZV3R3YjJsdWRITmJiMTBwS1R0dWRXeHNJVDA5Y3o5dWRXeHNJVDA5Y2k1aFkzUnBkbVZDY21WaGEzQnZhVzUwUHloeklUMDljaTVoWTNScGRtVkNjbVZoYTNCdmFXNTBmSHgwS1NZbUtISXVZV04wYVhabFFuSmxZV3R3YjJsdWREMXpMRndpZFc1emJHbGphMXdpUFQwOWNpNWljbVZoYTNCdmFXNTBVMlYwZEdsdVozTmJjMTAvY2k1MWJuTnNhV05yS0hNcE9paHlMbTl3ZEdsdmJuTTlhUzVsZUhSbGJtUW9lMzBzY2k1dmNtbG5hVzVoYkZObGRIUnBibWR6TEhJdVluSmxZV3R3YjJsdWRGTmxkSFJwYm1kelczTmRLU3doTUQwOVBXVW1KaWh5TG1OMWNuSmxiblJUYkdsa1pUMXlMbTl3ZEdsdmJuTXVhVzVwZEdsaGJGTnNhV1JsS1N4eUxuSmxabkpsYzJnb1pTa3BMR3c5Y3lrNktISXVZV04wYVhabFFuSmxZV3R3YjJsdWREMXpMRndpZFc1emJHbGphMXdpUFQwOWNpNWljbVZoYTNCdmFXNTBVMlYwZEdsdVozTmJjMTAvY2k1MWJuTnNhV05yS0hNcE9paHlMbTl3ZEdsdmJuTTlhUzVsZUhSbGJtUW9lMzBzY2k1dmNtbG5hVzVoYkZObGRIUnBibWR6TEhJdVluSmxZV3R3YjJsdWRGTmxkSFJwYm1kelczTmRLU3doTUQwOVBXVW1KaWh5TG1OMWNuSmxiblJUYkdsa1pUMXlMbTl3ZEdsdmJuTXVhVzVwZEdsaGJGTnNhV1JsS1N4eUxuSmxabkpsYzJnb1pTa3BMR3c5Y3lrNmJuVnNiQ0U5UFhJdVlXTjBhWFpsUW5KbFlXdHdiMmx1ZENZbUtISXVZV04wYVhabFFuSmxZV3R3YjJsdWREMXVkV3hzTEhJdWIzQjBhVzl1Y3oxeUxtOXlhV2RwYm1Gc1UyVjBkR2x1WjNNc0lUQTlQVDFsSmlZb2NpNWpkWEp5Wlc1MFUyeHBaR1U5Y2k1dmNIUnBiMjV6TG1sdWFYUnBZV3hUYkdsa1pTa3NjaTV5WldaeVpYTm9LR1VwTEd3OWN5a3NaWHg4SVRFOVBUMXNmSHh5TGlSemJHbGtaWEl1ZEhKcFoyZGxjaWhjSW1KeVpXRnJjRzlwYm5SY0lpeGJjaXhzWFNsOWZTeGxMbkJ5YjNSdmRIbHdaUzVqYUdGdVoyVlRiR2xrWlQxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCdkxITXNiaXh5UFhSb2FYTXNiRDFwS0dVdVkzVnljbVZ1ZEZSaGNtZGxkQ2s3YzNkcGRHTm9LR3d1YVhNb1hDSmhYQ0lwSmlabExuQnlaWFpsYm5SRVpXWmhkV3gwS0Nrc2JDNXBjeWhjSW14cFhDSXBmSHdvYkQxc0xtTnNiM05sYzNRb1hDSnNhVndpS1Nrc2JqMXlMbk5zYVdSbFEyOTFiblFsY2k1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJOeWIyeHNJVDB3TEc4OWJqOHdPaWh5TG5Oc2FXUmxRMjkxYm5RdGNpNWpkWEp5Wlc1MFUyeHBaR1VwSlhJdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiQ3hsTG1SaGRHRXViV1Z6YzJGblpTbDdZMkZ6WlZ3aWNISmxkbWx2ZFhOY0lqcHpQVEE5UFQxdlAzSXViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTmpjbTlzYkRweUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNMVzhzY2k1emJHbGtaVU52ZFc1MFBuSXViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NtSm5JdWMyeHBaR1ZJWVc1a2JHVnlLSEl1WTNWeWNtVnVkRk5zYVdSbExYTXNJVEVzZENrN1luSmxZV3M3WTJGelpWd2libVY0ZEZ3aU9uTTlNRDA5UFc4L2NpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyTnliMnhzT204c2NpNXpiR2xrWlVOdmRXNTBQbkl1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjbUpuSXVjMnhwWkdWSVlXNWtiR1Z5S0hJdVkzVnljbVZ1ZEZOc2FXUmxLM01zSVRFc2RDazdZbkpsWVdzN1kyRnpaVndpYVc1a1pYaGNJanAyWVhJZ1pEMHdQVDA5WlM1a1lYUmhMbWx1WkdWNFB6QTZaUzVrWVhSaExtbHVaR1Y0Zkh4c0xtbHVaR1Y0S0NrcWNpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyTnliMnhzTzNJdWMyeHBaR1ZJWVc1a2JHVnlLSEl1WTJobFkydE9ZWFpwWjJGaWJHVW9aQ2tzSVRFc2RDa3NiQzVqYUdsc1pISmxiaWdwTG5SeWFXZG5aWElvWENKbWIyTjFjMXdpS1R0aWNtVmhhenRrWldaaGRXeDBPbkpsZEhWeWJuMTlMR1V1Y0hKdmRHOTBlWEJsTG1Ob1pXTnJUbUYyYVdkaFlteGxQV1oxYm1OMGFXOXVLR2twZTNaaGNpQmxMSFE3YVdZb1pUMTBhR2x6TG1kbGRFNWhkbWxuWVdKc1pVbHVaR1Y0WlhNb0tTeDBQVEFzYVQ1bFcyVXViR1Z1WjNSb0xURmRLV2s5WlZ0bExteGxibWQwYUMweFhUdGxiSE5sSUdadmNpaDJZWElnYnlCcGJpQmxLWHRwWmlocFBHVmJiMTBwZTJrOWREdGljbVZoYTMxMFBXVmJiMTE5Y21WMGRYSnVJR2w5TEdVdWNISnZkRzkwZVhCbExtTnNaV0Z1VlhCRmRtVnVkSE05Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsek8yVXViM0IwYVc5dWN5NWtiM1J6SmladWRXeHNJVDA5WlM0a1pHOTBjeVltS0drb1hDSnNhVndpTEdVdUpHUnZkSE1wTG05bVppaGNJbU5zYVdOckxuTnNhV05yWENJc1pTNWphR0Z1WjJWVGJHbGtaU2t1YjJabUtGd2liVzkxYzJWbGJuUmxjaTV6YkdsamExd2lMR2t1Y0hKdmVIa29aUzVwYm5SbGNuSjFjSFFzWlN3aE1Da3BMbTltWmloY0ltMXZkWE5sYkdWaGRtVXVjMnhwWTJ0Y0lpeHBMbkJ5YjNoNUtHVXVhVzUwWlhKeWRYQjBMR1VzSVRFcEtTd2hNRDA5UFdVdWIzQjBhVzl1Y3k1aFkyTmxjM05wWW1sc2FYUjVKaVpsTGlSa2IzUnpMbTltWmloY0ltdGxlV1J2ZDI0dWMyeHBZMnRjSWl4bExtdGxlVWhoYm1Sc1pYSXBLU3hsTGlSemJHbGtaWEl1YjJabUtGd2labTlqZFhNdWMyeHBZMnNnWW14MWNpNXpiR2xqYTF3aUtTd2hNRDA5UFdVdWIzQjBhVzl1Y3k1aGNuSnZkM01tSm1VdWMyeHBaR1ZEYjNWdWRENWxMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzSmlZb1pTNGtjSEpsZGtGeWNtOTNKaVpsTGlSd2NtVjJRWEp5YjNjdWIyWm1LRndpWTJ4cFkyc3VjMnhwWTJ0Y0lpeGxMbU5vWVc1blpWTnNhV1JsS1N4bExpUnVaWGgwUVhKeWIzY21KbVV1Skc1bGVIUkJjbkp2ZHk1dlptWW9YQ0pqYkdsamF5NXpiR2xqYTF3aUxHVXVZMmhoYm1kbFUyeHBaR1VwTENFd1BUMDlaUzV2Y0hScGIyNXpMbUZqWTJWemMybGlhV3hwZEhrbUppaGxMaVJ3Y21WMlFYSnliM2NtSm1VdUpIQnlaWFpCY25KdmR5NXZabVlvWENKclpYbGtiM2R1TG5Oc2FXTnJYQ0lzWlM1clpYbElZVzVrYkdWeUtTeGxMaVJ1WlhoMFFYSnliM2NtSm1VdUpHNWxlSFJCY25KdmR5NXZabVlvWENKclpYbGtiM2R1TG5Oc2FXTnJYQ0lzWlM1clpYbElZVzVrYkdWeUtTa3BMR1V1Skd4cGMzUXViMlptS0Z3aWRHOTFZMmh6ZEdGeWRDNXpiR2xqYXlCdGIzVnpaV1J2ZDI0dWMyeHBZMnRjSWl4bExuTjNhWEJsU0dGdVpHeGxjaWtzWlM0a2JHbHpkQzV2Wm1Zb1hDSjBiM1ZqYUcxdmRtVXVjMnhwWTJzZ2JXOTFjMlZ0YjNabExuTnNhV05yWENJc1pTNXpkMmx3WlVoaGJtUnNaWElwTEdVdUpHeHBjM1F1YjJabUtGd2lkRzkxWTJobGJtUXVjMnhwWTJzZ2JXOTFjMlYxY0M1emJHbGphMXdpTEdVdWMzZHBjR1ZJWVc1a2JHVnlLU3hsTGlSc2FYTjBMbTltWmloY0luUnZkV05vWTJGdVkyVnNMbk5zYVdOcklHMXZkWE5sYkdWaGRtVXVjMnhwWTJ0Y0lpeGxMbk4zYVhCbFNHRnVaR3hsY2lrc1pTNGtiR2x6ZEM1dlptWW9YQ0pqYkdsamF5NXpiR2xqYTF3aUxHVXVZMnhwWTJ0SVlXNWtiR1Z5S1N4cEtHUnZZM1Z0Wlc1MEtTNXZabVlvWlM1MmFYTnBZbWxzYVhSNVEyaGhibWRsTEdVdWRtbHphV0pwYkdsMGVTa3NaUzVqYkdWaGJsVndVMnhwWkdWRmRtVnVkSE1vS1N3aE1EMDlQV1V1YjNCMGFXOXVjeTVoWTJObGMzTnBZbWxzYVhSNUppWmxMaVJzYVhOMExtOW1aaWhjSW10bGVXUnZkMjR1YzJ4cFkydGNJaXhsTG10bGVVaGhibVJzWlhJcExDRXdQVDA5WlM1dmNIUnBiMjV6TG1adlkzVnpUMjVUWld4bFkzUW1KbWtvWlM0a2MyeHBaR1ZVY21GamF5a3VZMmhwYkdSeVpXNG9LUzV2Wm1Zb1hDSmpiR2xqYXk1emJHbGphMXdpTEdVdWMyVnNaV04wU0dGdVpHeGxjaWtzYVNoM2FXNWtiM2NwTG05bVppaGNJbTl5YVdWdWRHRjBhVzl1WTJoaGJtZGxMbk5zYVdOckxuTnNhV05yTFZ3aUsyVXVhVzV6ZEdGdVkyVlZhV1FzWlM1dmNtbGxiblJoZEdsdmJrTm9ZVzVuWlNrc2FTaDNhVzVrYjNjcExtOW1aaWhjSW5KbGMybDZaUzV6YkdsamF5NXpiR2xqYXkxY0lpdGxMbWx1YzNSaGJtTmxWV2xrTEdVdWNtVnphWHBsS1N4cEtGd2lXMlJ5WVdkbllXSnNaU0U5ZEhKMVpWMWNJaXhsTGlSemJHbGtaVlJ5WVdOcktTNXZabVlvWENKa2NtRm5jM1JoY25SY0lpeGxMbkJ5WlhabGJuUkVaV1poZFd4MEtTeHBLSGRwYm1SdmR5a3ViMlptS0Z3aWJHOWhaQzV6YkdsamF5NXpiR2xqYXkxY0lpdGxMbWx1YzNSaGJtTmxWV2xrTEdVdWMyVjBVRzl6YVhScGIyNHBmU3hsTG5CeWIzUnZkSGx3WlM1amJHVmhibFZ3VTJ4cFpHVkZkbVZ1ZEhNOVpuVnVZM1JwYjI0b0tYdDJZWElnWlQxMGFHbHpPMlV1Skd4cGMzUXViMlptS0Z3aWJXOTFjMlZsYm5SbGNpNXpiR2xqYTF3aUxHa3VjSEp2ZUhrb1pTNXBiblJsY25KMWNIUXNaU3doTUNrcExHVXVKR3hwYzNRdWIyWm1LRndpYlc5MWMyVnNaV0YyWlM1emJHbGphMXdpTEdrdWNISnZlSGtvWlM1cGJuUmxjbkoxY0hRc1pTd2hNU2twZlN4bExuQnliM1J2ZEhsd1pTNWpiR1ZoYmxWd1VtOTNjejFtZFc1amRHbHZiaWdwZTNaaGNpQnBMR1U5ZEdocGN6dGxMbTl3ZEdsdmJuTXVjbTkzY3o0eEppWW9LR2s5WlM0a2MyeHBaR1Z6TG1Ob2FXeGtjbVZ1S0NrdVkyaHBiR1J5Wlc0b0tTa3VjbVZ0YjNabFFYUjBjaWhjSW5OMGVXeGxYQ0lwTEdVdUpITnNhV1JsY2k1bGJYQjBlU2dwTG1Gd2NHVnVaQ2hwS1NsOUxHVXVjSEp2ZEc5MGVYQmxMbU5zYVdOclNHRnVaR3hsY2oxbWRXNWpkR2x2YmlocEtYc2hNVDA5UFhSb2FYTXVjMmh2ZFd4a1EyeHBZMnNtSmlocExuTjBiM0JKYlcxbFpHbGhkR1ZRY205d1lXZGhkR2x2YmlncExHa3VjM1J2Y0ZCeWIzQmhaMkYwYVc5dUtDa3NhUzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BLWDBzWlM1d2NtOTBiM1I1Y0dVdVpHVnpkSEp2ZVQxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxMGFHbHpPM1F1WVhWMGIxQnNZWGxEYkdWaGNpZ3BMSFF1ZEc5MVkyaFBZbXBsWTNROWUzMHNkQzVqYkdWaGJsVndSWFpsYm5SektDa3NhU2hjSWk1emJHbGpheTFqYkc5dVpXUmNJaXgwTGlSemJHbGtaWElwTG1SbGRHRmphQ2dwTEhRdUpHUnZkSE1tSm5RdUpHUnZkSE11Y21WdGIzWmxLQ2tzZEM0a2NISmxka0Z5Y205M0ppWjBMaVJ3Y21WMlFYSnliM2N1YkdWdVozUm9KaVlvZEM0a2NISmxka0Z5Y205M0xuSmxiVzkyWlVOc1lYTnpLRndpYzJ4cFkyc3RaR2x6WVdKc1pXUWdjMnhwWTJzdFlYSnliM2NnYzJ4cFkyc3RhR2xrWkdWdVhDSXBMbkpsYlc5MlpVRjBkSElvWENKaGNtbGhMV2hwWkdSbGJpQmhjbWxoTFdScGMyRmliR1ZrSUhSaFltbHVaR1Y0WENJcExtTnpjeWhjSW1ScGMzQnNZWGxjSWl4Y0lsd2lLU3gwTG1oMGJXeEZlSEJ5TG5SbGMzUW9kQzV2Y0hScGIyNXpMbkJ5WlhaQmNuSnZkeWttSm5RdUpIQnlaWFpCY25KdmR5NXlaVzF2ZG1Vb0tTa3NkQzRrYm1WNGRFRnljbTkzSmlaMExpUnVaWGgwUVhKeWIzY3ViR1Z1WjNSb0ppWW9kQzRrYm1WNGRFRnljbTkzTG5KbGJXOTJaVU5zWVhOektGd2ljMnhwWTJzdFpHbHpZV0pzWldRZ2MyeHBZMnN0WVhKeWIzY2djMnhwWTJzdGFHbGtaR1Z1WENJcExuSmxiVzkyWlVGMGRISW9YQ0poY21saExXaHBaR1JsYmlCaGNtbGhMV1JwYzJGaWJHVmtJSFJoWW1sdVpHVjRYQ0lwTG1OemN5aGNJbVJwYzNCc1lYbGNJaXhjSWx3aUtTeDBMbWgwYld4RmVIQnlMblJsYzNRb2RDNXZjSFJwYjI1ekxtNWxlSFJCY25KdmR5a21KblF1Skc1bGVIUkJjbkp2ZHk1eVpXMXZkbVVvS1Nrc2RDNGtjMnhwWkdWekppWW9kQzRrYzJ4cFpHVnpMbkpsYlc5MlpVTnNZWE56S0Z3aWMyeHBZMnN0YzJ4cFpHVWdjMnhwWTJzdFlXTjBhWFpsSUhOc2FXTnJMV05sYm5SbGNpQnpiR2xqYXkxMmFYTnBZbXhsSUhOc2FXTnJMV04xY25KbGJuUmNJaWt1Y21WdGIzWmxRWFIwY2loY0ltRnlhV0V0YUdsa1pHVnVYQ0lwTG5KbGJXOTJaVUYwZEhJb1hDSmtZWFJoTFhOc2FXTnJMV2x1WkdWNFhDSXBMbVZoWTJnb1puVnVZM1JwYjI0b0tYdHBLSFJvYVhNcExtRjBkSElvWENKemRIbHNaVndpTEdrb2RHaHBjeWt1WkdGMFlTaGNJbTl5YVdkcGJtRnNVM1I1YkdsdVoxd2lLU2w5S1N4MExpUnpiR2xrWlZSeVlXTnJMbU5vYVd4a2NtVnVLSFJvYVhNdWIzQjBhVzl1Y3k1emJHbGtaU2t1WkdWMFlXTm9LQ2tzZEM0a2MyeHBaR1ZVY21GamF5NWtaWFJoWTJnb0tTeDBMaVJzYVhOMExtUmxkR0ZqYUNncExIUXVKSE5zYVdSbGNpNWhjSEJsYm1Rb2RDNGtjMnhwWkdWektTa3NkQzVqYkdWaGJsVndVbTkzY3lncExIUXVKSE5zYVdSbGNpNXlaVzF2ZG1WRGJHRnpjeWhjSW5Oc2FXTnJMWE5zYVdSbGNsd2lLU3gwTGlSemJHbGtaWEl1Y21WdGIzWmxRMnhoYzNNb1hDSnpiR2xqYXkxcGJtbDBhV0ZzYVhwbFpGd2lLU3gwTGlSemJHbGtaWEl1Y21WdGIzWmxRMnhoYzNNb1hDSnpiR2xqYXkxa2IzUjBaV1JjSWlrc2RDNTFibk5zYVdOclpXUTlJVEFzWlh4OGRDNGtjMnhwWkdWeUxuUnlhV2RuWlhJb1hDSmtaWE4wY205NVhDSXNXM1JkS1gwc1pTNXdjbTkwYjNSNWNHVXVaR2x6WVdKc1pWUnlZVzV6YVhScGIyNDlablZ1WTNScGIyNG9hU2w3ZG1GeUlHVTlkR2hwY3l4MFBYdDlPM1JiWlM1MGNtRnVjMmwwYVc5dVZIbHdaVjA5WENKY0lpd2hNVDA5UFdVdWIzQjBhVzl1Y3k1bVlXUmxQMlV1SkhOc2FXUmxWSEpoWTJzdVkzTnpLSFFwT21VdUpITnNhV1JsY3k1bGNTaHBLUzVqYzNNb2RDbDlMR1V1Y0hKdmRHOTBlWEJsTG1aaFpHVlRiR2xrWlQxbWRXNWpkR2x2YmlocExHVXBlM1poY2lCMFBYUm9hWE03SVRFOVBUMTBMbU56YzFSeVlXNXphWFJwYjI1elB5aDBMaVJ6Ykdsa1pYTXVaWEVvYVNrdVkzTnpLSHQ2U1c1a1pYZzZkQzV2Y0hScGIyNXpMbnBKYm1SbGVIMHBMSFF1SkhOc2FXUmxjeTVsY1NocEtTNWhibWx0WVhSbEtIdHZjR0ZqYVhSNU9qRjlMSFF1YjNCMGFXOXVjeTV6Y0dWbFpDeDBMbTl3ZEdsdmJuTXVaV0Z6YVc1bkxHVXBLVG9vZEM1aGNIQnNlVlJ5WVc1emFYUnBiMjRvYVNrc2RDNGtjMnhwWkdWekxtVnhLR2twTG1OemN5aDdiM0JoWTJsMGVUb3hMSHBKYm1SbGVEcDBMbTl3ZEdsdmJuTXVla2x1WkdWNGZTa3NaU1ltYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUzUXVaR2x6WVdKc1pWUnlZVzV6YVhScGIyNG9hU2tzWlM1allXeHNLQ2w5TEhRdWIzQjBhVzl1Y3k1emNHVmxaQ2twZlN4bExuQnliM1J2ZEhsd1pTNW1ZV1JsVTJ4cFpHVlBkWFE5Wm5WdVkzUnBiMjRvYVNsN2RtRnlJR1U5ZEdocGN6c2hNVDA5UFdVdVkzTnpWSEpoYm5OcGRHbHZibk0vWlM0a2MyeHBaR1Z6TG1WeEtHa3BMbUZ1YVcxaGRHVW9lMjl3WVdOcGRIazZNQ3g2U1c1a1pYZzZaUzV2Y0hScGIyNXpMbnBKYm1SbGVDMHlmU3hsTG05d2RHbHZibk11YzNCbFpXUXNaUzV2Y0hScGIyNXpMbVZoYzJsdVp5azZLR1V1WVhCd2JIbFVjbUZ1YzJsMGFXOXVLR2twTEdVdUpITnNhV1JsY3k1bGNTaHBLUzVqYzNNb2UyOXdZV05wZEhrNk1DeDZTVzVrWlhnNlpTNXZjSFJwYjI1ekxucEpibVJsZUMweWZTa3BmU3hsTG5CeWIzUnZkSGx3WlM1bWFXeDBaWEpUYkdsa1pYTTlaUzV3Y205MGIzUjVjR1V1YzJ4cFkydEdhV3gwWlhJOVpuVnVZM1JwYjI0b2FTbDdkbUZ5SUdVOWRHaHBjenR1ZFd4c0lUMDlhU1ltS0dVdUpITnNhV1JsYzBOaFkyaGxQV1V1SkhOc2FXUmxjeXhsTG5WdWJHOWhaQ2dwTEdVdUpITnNhV1JsVkhKaFkyc3VZMmhwYkdSeVpXNG9kR2hwY3k1dmNIUnBiMjV6TG5Oc2FXUmxLUzVrWlhSaFkyZ29LU3hsTGlSemJHbGtaWE5EWVdOb1pTNW1hV3gwWlhJb2FTa3VZWEJ3Wlc1a1ZHOG9aUzRrYzJ4cFpHVlVjbUZqYXlrc1pTNXlaV2x1YVhRb0tTbDlMR1V1Y0hKdmRHOTBlWEJsTG1adlkzVnpTR0Z1Wkd4bGNqMW1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYUm9hWE03WlM0a2MyeHBaR1Z5TG05bVppaGNJbVp2WTNWekxuTnNhV05ySUdKc2RYSXVjMnhwWTJ0Y0lpa3ViMjRvWENKbWIyTjFjeTV6YkdsamF5QmliSFZ5TG5Oc2FXTnJYQ0lzWENJcVhDSXNablZ1WTNScGIyNG9kQ2w3ZEM1emRHOXdTVzF0WldScFlYUmxVSEp2Y0dGbllYUnBiMjRvS1R0MllYSWdiejFwS0hSb2FYTXBPM05sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0bExtOXdkR2x2Ym5NdWNHRjFjMlZQYmtadlkzVnpKaVlvWlM1bWIyTjFjM05sWkQxdkxtbHpLRndpT21adlkzVnpYQ0lwTEdVdVlYVjBiMUJzWVhrb0tTbDlMREFwZlNsOUxHVXVjSEp2ZEc5MGVYQmxMbWRsZEVOMWNuSmxiblE5WlM1d2NtOTBiM1I1Y0dVdWMyeHBZMnREZFhKeVpXNTBVMnhwWkdVOVpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTVqZFhKeVpXNTBVMnhwWkdWOUxHVXVjSEp2ZEc5MGVYQmxMbWRsZEVSdmRFTnZkVzUwUFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN5eGxQVEFzZEQwd0xHODlNRHRwWmlnaE1EMDlQV2t1YjNCMGFXOXVjeTVwYm1acGJtbDBaU2xwWmlocExuTnNhV1JsUTI5MWJuUThQV2t1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjcEt5dHZPMlZzYzJVZ1ptOXlLRHRsUEdrdWMyeHBaR1ZEYjNWdWREc3BLeXR2TEdVOWRDdHBMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRZM0p2Ykd3c2RDczlhUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMk55YjJ4c1BEMXBMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzUDJrdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiRHBwTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M08yVnNjMlVnYVdZb0lUQTlQVDFwTG05d2RHbHZibk11WTJWdWRHVnlUVzlrWlNsdlBXa3VjMnhwWkdWRGIzVnVkRHRsYkhObElHbG1LR2t1YjNCMGFXOXVjeTVoYzA1aGRrWnZjaWxtYjNJb08yVThhUzV6Ykdsa1pVTnZkVzUwT3lrcksyOHNaVDEwSzJrdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiQ3gwS3oxcExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VFkzSnZiR3c4UFdrdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOb2IzYy9hUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMk55YjJ4c09ta3ViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2M3Wld4elpTQnZQVEVyVFdGMGFDNWpaV2xzS0NocExuTnNhV1JsUTI5MWJuUXRhUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZHlrdmFTNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyTnliMnhzS1R0eVpYUjFjbTRnYnkweGZTeGxMbkJ5YjNSdmRIbHdaUzVuWlhSTVpXWjBQV1oxYm1OMGFXOXVLR2twZTNaaGNpQmxMSFFzYnl4ekxHNDlkR2hwY3l4eVBUQTdjbVYwZFhKdUlHNHVjMnhwWkdWUFptWnpaWFE5TUN4MFBXNHVKSE5zYVdSbGN5NW1hWEp6ZENncExtOTFkR1Z5U0dWcFoyaDBLQ0V3S1N3aE1EMDlQVzR1YjNCMGFXOXVjeTVwYm1acGJtbDBaVDhvYmk1emJHbGtaVU52ZFc1MFBtNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NtSmlodUxuTnNhV1JsVDJabWMyVjBQVzR1YzJ4cFpHVlhhV1IwYUNwdUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNLaTB4TEhNOUxURXNJVEE5UFQxdUxtOXdkR2x2Ym5NdWRtVnlkR2xqWVd3bUppRXdQVDA5Ymk1dmNIUnBiMjV6TG1ObGJuUmxjazF2WkdVbUppZ3lQVDA5Ymk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR6OXpQUzB4TGpVNk1UMDlQVzR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjbUppaHpQUzB5S1Nrc2NqMTBLbTR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjcWN5a3NiaTV6Ykdsa1pVTnZkVzUwSlc0dWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiQ0U5TUNZbWFTdHVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRZM0p2Ykd3K2JpNXpiR2xrWlVOdmRXNTBKaVp1TG5Oc2FXUmxRMjkxYm5RK2JpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeVltS0drK2JpNXpiR2xrWlVOdmRXNTBQeWh1TG5Oc2FXUmxUMlptYzJWMFBTaHVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzTFNocExXNHVjMnhwWkdWRGIzVnVkQ2twS200dWMyeHBaR1ZYYVdSMGFDb3RNU3h5UFNodUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNMU2hwTFc0dWMyeHBaR1ZEYjNWdWRDa3BLblFxTFRFcE9paHVMbk5zYVdSbFQyWm1jMlYwUFc0dWMyeHBaR1ZEYjNWdWRDVnVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRZM0p2Ykd3cWJpNXpiR2xrWlZkcFpIUm9LaTB4TEhJOWJpNXpiR2xrWlVOdmRXNTBKVzR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5qY205c2JDcDBLaTB4S1NrcE9ta3JiaTV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZHo1dUxuTnNhV1JsUTI5MWJuUW1KaWh1TG5Oc2FXUmxUMlptYzJWMFBTaHBLMjR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjdGJpNXpiR2xrWlVOdmRXNTBLU3B1TG5Oc2FXUmxWMmxrZEdnc2NqMG9hU3R1TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0xXNHVjMnhwWkdWRGIzVnVkQ2txZENrc2JpNXpiR2xrWlVOdmRXNTBQRDF1TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0ppWW9iaTV6Ykdsa1pVOW1abk5sZEQwd0xISTlNQ2tzSVRBOVBUMXVMbTl3ZEdsdmJuTXVZMlZ1ZEdWeVRXOWtaU1ltYmk1emJHbGtaVU52ZFc1MFBEMXVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzUDI0dWMyeHBaR1ZQWm1aelpYUTliaTV6Ykdsa1pWZHBaSFJvS2sxaGRHZ3VabXh2YjNJb2JpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeWt2TWkxdUxuTnNhV1JsVjJsa2RHZ3FiaTV6Ykdsa1pVTnZkVzUwTHpJNklUQTlQVDF1TG05d2RHbHZibk11WTJWdWRHVnlUVzlrWlNZbUlUQTlQVDF1TG05d2RHbHZibk11YVc1bWFXNXBkR1UvYmk1emJHbGtaVTltWm5ObGRDczliaTV6Ykdsa1pWZHBaSFJvS2sxaGRHZ3VabXh2YjNJb2JpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeTh5S1MxdUxuTnNhV1JsVjJsa2RHZzZJVEE5UFQxdUxtOXdkR2x2Ym5NdVkyVnVkR1Z5VFc5a1pTWW1LRzR1YzJ4cFpHVlBabVp6WlhROU1DeHVMbk5zYVdSbFQyWm1jMlYwS3oxdUxuTnNhV1JsVjJsa2RHZ3FUV0YwYUM1bWJHOXZjaWh1TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0x6SXBLU3hsUFNFeFBUMDliaTV2Y0hScGIyNXpMblpsY25ScFkyRnNQMmtxYmk1emJHbGtaVmRwWkhSb0tpMHhLMjR1YzJ4cFpHVlBabVp6WlhRNmFTcDBLaTB4SzNJc0lUQTlQVDF1TG05d2RHbHZibk11ZG1GeWFXRmliR1ZYYVdSMGFDWW1LRzg5Ymk1emJHbGtaVU52ZFc1MFBEMXVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzZkh3aE1UMDlQVzR1YjNCMGFXOXVjeTVwYm1acGJtbDBaVDl1TGlSemJHbGtaVlJ5WVdOckxtTm9hV3hrY21WdUtGd2lMbk5zYVdOckxYTnNhV1JsWENJcExtVnhLR2twT200dUpITnNhV1JsVkhKaFkyc3VZMmhwYkdSeVpXNG9YQ0l1YzJ4cFkyc3RjMnhwWkdWY0lpa3VaWEVvYVN0dUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNLU3hsUFNFd1BUMDliaTV2Y0hScGIyNXpMbkowYkQ5dld6QmRQeTB4S2lodUxpUnpiR2xrWlZSeVlXTnJMbmRwWkhSb0tDa3RiMXN3WFM1dlptWnpaWFJNWldaMExXOHVkMmxrZEdnb0tTazZNRHB2V3pCZFB5MHhLbTliTUYwdWIyWm1jMlYwVEdWbWREb3dMQ0V3UFQwOWJpNXZjSFJwYjI1ekxtTmxiblJsY2sxdlpHVW1KaWh2UFc0dWMyeHBaR1ZEYjNWdWREdzliaTV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZDN4OElURTlQVDF1TG05d2RHbHZibk11YVc1bWFXNXBkR1UvYmk0a2MyeHBaR1ZVY21GamF5NWphR2xzWkhKbGJpaGNJaTV6YkdsamF5MXpiR2xrWlZ3aUtTNWxjU2hwS1RwdUxpUnpiR2xrWlZSeVlXTnJMbU5vYVd4a2NtVnVLRndpTG5Oc2FXTnJMWE5zYVdSbFhDSXBMbVZ4S0drcmJpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeXN4S1N4bFBTRXdQVDA5Ymk1dmNIUnBiMjV6TG5KMGJEOXZXekJkUHkweEtpaHVMaVJ6Ykdsa1pWUnlZV05yTG5kcFpIUm9LQ2t0YjFzd1hTNXZabVp6WlhSTVpXWjBMVzh1ZDJsa2RHZ29LU2s2TURwdld6QmRQeTB4S205Yk1GMHViMlptYzJWMFRHVm1kRG93TEdVclBTaHVMaVJzYVhOMExuZHBaSFJvS0NrdGJ5NXZkWFJsY2xkcFpIUm9LQ2twTHpJcEtTeGxmU3hsTG5CeWIzUnZkSGx3WlM1blpYUlBjSFJwYjI0OVpTNXdjbTkwYjNSNWNHVXVjMnhwWTJ0SFpYUlBjSFJwYjI0OVpuVnVZM1JwYjI0b2FTbDdjbVYwZFhKdUlIUm9hWE11YjNCMGFXOXVjMXRwWFgwc1pTNXdjbTkwYjNSNWNHVXVaMlYwVG1GMmFXZGhZbXhsU1c1a1pYaGxjejFtZFc1amRHbHZiaWdwZTNaaGNpQnBMR1U5ZEdocGN5eDBQVEFzYnowd0xITTlXMTA3Wm05eUtDRXhQVDA5WlM1dmNIUnBiMjV6TG1sdVptbHVhWFJsUDJrOVpTNXpiR2xrWlVOdmRXNTBPaWgwUFMweEttVXViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTmpjbTlzYkN4dlBTMHhLbVV1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5qY205c2JDeHBQVElxWlM1emJHbGtaVU52ZFc1MEtUdDBQR2s3S1hNdWNIVnphQ2gwS1N4MFBXOHJaUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMk55YjJ4c0xHOHJQV1V1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5qY205c2JEdzlaUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZHo5bExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VFkzSnZiR3c2WlM1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR6dHlaWFIxY200Z2MzMHNaUzV3Y205MGIzUjVjR1V1WjJWMFUyeHBZMnM5Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnZEdocGMzMHNaUzV3Y205MGIzUjVjR1V1WjJWMFUyeHBaR1ZEYjNWdWREMW1kVzVqZEdsdmJpZ3BlM1poY2lCbExIUXNiejEwYUdsek8zSmxkSFZ5YmlCMFBTRXdQVDA5Ynk1dmNIUnBiMjV6TG1ObGJuUmxjazF2WkdVL2J5NXpiR2xrWlZkcFpIUm9LazFoZEdndVpteHZiM0lvYnk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR5OHlLVG93TENFd1BUMDlieTV2Y0hScGIyNXpMbk4zYVhCbFZHOVRiR2xrWlQ4b2J5NGtjMnhwWkdWVWNtRmpheTVtYVc1a0tGd2lMbk5zYVdOckxYTnNhV1JsWENJcExtVmhZMmdvWm5WdVkzUnBiMjRvY3l4dUtYdHBaaWh1TG05bVpuTmxkRXhsWm5RdGRDdHBLRzRwTG05MWRHVnlWMmxrZEdnb0tTOHlQaTB4S204dWMzZHBjR1ZNWldaMEtYSmxkSFZ5YmlCbFBXNHNJVEY5S1N4TllYUm9MbUZpY3locEtHVXBMbUYwZEhJb1hDSmtZWFJoTFhOc2FXTnJMV2x1WkdWNFhDSXBMVzh1WTNWeWNtVnVkRk5zYVdSbEtYeDhNU2s2Ynk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJOeWIyeHNmU3hsTG5CeWIzUnZkSGx3WlM1bmIxUnZQV1V1Y0hKdmRHOTBlWEJsTG5Oc2FXTnJSMjlVYnoxbWRXNWpkR2x2YmlocExHVXBlM1JvYVhNdVkyaGhibWRsVTJ4cFpHVW9lMlJoZEdFNmUyMWxjM05oWjJVNlhDSnBibVJsZUZ3aUxHbHVaR1Y0T25CaGNuTmxTVzUwS0drcGZYMHNaU2w5TEdVdWNISnZkRzkwZVhCbExtbHVhWFE5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZEdocGN6dHBLSFF1SkhOc2FXUmxjaWt1YUdGelEyeGhjM01vWENKemJHbGpheTFwYm1sMGFXRnNhWHBsWkZ3aUtYeDhLR2tvZEM0a2MyeHBaR1Z5S1M1aFpHUkRiR0Z6Y3loY0luTnNhV05yTFdsdWFYUnBZV3hwZW1Wa1hDSXBMSFF1WW5WcGJHUlNiM2R6S0Nrc2RDNWlkV2xzWkU5MWRDZ3BMSFF1YzJWMFVISnZjSE1vS1N4MExuTjBZWEowVEc5aFpDZ3BMSFF1Ykc5aFpGTnNhV1JsY2lncExIUXVhVzVwZEdsaGJHbDZaVVYyWlc1MGN5Z3BMSFF1ZFhCa1lYUmxRWEp5YjNkektDa3NkQzUxY0dSaGRHVkViM1J6S0Nrc2RDNWphR1ZqYTFKbGMzQnZibk5wZG1Vb0lUQXBMSFF1Wm05amRYTklZVzVrYkdWeUtDa3BMR1VtSm5RdUpITnNhV1JsY2k1MGNtbG5aMlZ5S0Z3aWFXNXBkRndpTEZ0MFhTa3NJVEE5UFQxMExtOXdkR2x2Ym5NdVlXTmpaWE56YVdKcGJHbDBlU1ltZEM1cGJtbDBRVVJCS0Nrc2RDNXZjSFJwYjI1ekxtRjFkRzl3YkdGNUppWW9kQzV3WVhWelpXUTlJVEVzZEM1aGRYUnZVR3hoZVNncEtYMHNaUzV3Y205MGIzUjVjR1V1YVc1cGRFRkVRVDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWFJvYVhNc2REMU5ZWFJvTG1ObGFXd29aUzV6Ykdsa1pVTnZkVzUwTDJVdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOb2IzY3BMRzg5WlM1blpYUk9ZWFpwWjJGaWJHVkpibVJsZUdWektDa3VabWxzZEdWeUtHWjFibU4wYVc5dUtHa3BlM0psZEhWeWJpQnBQajB3SmlacFBHVXVjMnhwWkdWRGIzVnVkSDBwTzJVdUpITnNhV1JsY3k1aFpHUW9aUzRrYzJ4cFpHVlVjbUZqYXk1bWFXNWtLRndpTG5Oc2FXTnJMV05zYjI1bFpGd2lLU2t1WVhSMGNpaDdYQ0poY21saExXaHBaR1JsYmx3aU9sd2lkSEoxWlZ3aUxIUmhZbWx1WkdWNE9sd2lMVEZjSW4wcExtWnBibVFvWENKaExDQnBibkIxZEN3Z1luVjBkRzl1TENCelpXeGxZM1JjSWlrdVlYUjBjaWg3ZEdGaWFXNWtaWGc2WENJdE1Wd2lmU2tzYm5Wc2JDRTlQV1V1SkdSdmRITW1KaWhsTGlSemJHbGtaWE11Ym05MEtHVXVKSE5zYVdSbFZISmhZMnN1Wm1sdVpDaGNJaTV6YkdsamF5MWpiRzl1WldSY0lpa3BMbVZoWTJnb1puVnVZM1JwYjI0b2RDbDdkbUZ5SUhNOWJ5NXBibVJsZUU5bUtIUXBPMmtvZEdocGN5a3VZWFIwY2loN2NtOXNaVHBjSW5SaFluQmhibVZzWENJc2FXUTZYQ0p6YkdsamF5MXpiR2xrWlZ3aUsyVXVhVzV6ZEdGdVkyVlZhV1FyZEN4MFlXSnBibVJsZURvdE1YMHBMQzB4SVQwOWN5WW1hU2gwYUdsektTNWhkSFJ5S0h0Y0ltRnlhV0V0WkdWelkzSnBZbVZrWW5sY0lqcGNJbk5zYVdOckxYTnNhV1JsTFdOdmJuUnliMnhjSWl0bExtbHVjM1JoYm1ObFZXbGtLM045S1gwcExHVXVKR1J2ZEhNdVlYUjBjaWhjSW5KdmJHVmNJaXhjSW5SaFlteHBjM1JjSWlrdVptbHVaQ2hjSW14cFhDSXBMbVZoWTJnb1puVnVZM1JwYjI0b2N5bDdkbUZ5SUc0OWIxdHpYVHRwS0hSb2FYTXBMbUYwZEhJb2UzSnZiR1U2WENKd2NtVnpaVzUwWVhScGIyNWNJbjBwTEdrb2RHaHBjeWt1Wm1sdVpDaGNJbUoxZEhSdmJsd2lLUzVtYVhKemRDZ3BMbUYwZEhJb2UzSnZiR1U2WENKMFlXSmNJaXhwWkRwY0luTnNhV05yTFhOc2FXUmxMV052Ym5SeWIyeGNJaXRsTG1sdWMzUmhibU5sVldsa0szTXNYQ0poY21saExXTnZiblJ5YjJ4elhDSTZYQ0p6YkdsamF5MXpiR2xrWlZ3aUsyVXVhVzV6ZEdGdVkyVlZhV1FyYml4Y0ltRnlhV0V0YkdGaVpXeGNJanB6S3pFclhDSWdiMllnWENJcmRDeGNJbUZ5YVdFdGMyVnNaV04wWldSY0lqcHVkV3hzTEhSaFltbHVaR1Y0T2x3aUxURmNJbjBwZlNrdVpYRW9aUzVqZFhKeVpXNTBVMnhwWkdVcExtWnBibVFvWENKaWRYUjBiMjVjSWlrdVlYUjBjaWg3WENKaGNtbGhMWE5sYkdWamRHVmtYQ0k2WENKMGNuVmxYQ0lzZEdGaWFXNWtaWGc2WENJd1hDSjlLUzVsYm1Rb0tTazdabTl5S0haaGNpQnpQV1V1WTNWeWNtVnVkRk5zYVdSbExHNDljeXRsTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M08zTThianR6S3lzcFpTNGtjMnhwWkdWekxtVnhLSE1wTG1GMGRISW9YQ0owWVdKcGJtUmxlRndpTERBcE8yVXVZV04wYVhaaGRHVkJSRUVvS1gwc1pTNXdjbTkwYjNSNWNHVXVhVzVwZEVGeWNtOTNSWFpsYm5SelBXWjFibU4wYVc5dUtDbDdkbUZ5SUdrOWRHaHBjenNoTUQwOVBXa3ViM0IwYVc5dWN5NWhjbkp2ZDNNbUpta3VjMnhwWkdWRGIzVnVkRDVwTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0ppWW9hUzRrY0hKbGRrRnljbTkzTG05bVppaGNJbU5zYVdOckxuTnNhV05yWENJcExtOXVLRndpWTJ4cFkyc3VjMnhwWTJ0Y0lpeDdiV1Z6YzJGblpUcGNJbkJ5WlhacGIzVnpYQ0o5TEdrdVkyaGhibWRsVTJ4cFpHVXBMR2t1Skc1bGVIUkJjbkp2ZHk1dlptWW9YQ0pqYkdsamF5NXpiR2xqYTF3aUtTNXZiaWhjSW1Oc2FXTnJMbk5zYVdOclhDSXNlMjFsYzNOaFoyVTZYQ0p1WlhoMFhDSjlMR2t1WTJoaGJtZGxVMnhwWkdVcExDRXdQVDA5YVM1dmNIUnBiMjV6TG1GalkyVnpjMmxpYVd4cGRIa21KaWhwTGlSd2NtVjJRWEp5YjNjdWIyNG9YQ0pyWlhsa2IzZHVMbk5zYVdOclhDSXNhUzVyWlhsSVlXNWtiR1Z5S1N4cExpUnVaWGgwUVhKeWIzY3ViMjRvWENKclpYbGtiM2R1TG5Oc2FXTnJYQ0lzYVM1clpYbElZVzVrYkdWeUtTa3BmU3hsTG5CeWIzUnZkSGx3WlM1cGJtbDBSRzkwUlhabGJuUnpQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlkR2hwY3pzaE1EMDlQV1V1YjNCMGFXOXVjeTVrYjNSekppWW9hU2hjSW14cFhDSXNaUzRrWkc5MGN5a3ViMjRvWENKamJHbGpheTV6YkdsamExd2lMSHR0WlhOellXZGxPbHdpYVc1a1pYaGNJbjBzWlM1amFHRnVaMlZUYkdsa1pTa3NJVEE5UFQxbExtOXdkR2x2Ym5NdVlXTmpaWE56YVdKcGJHbDBlU1ltWlM0a1pHOTBjeTV2YmloY0ltdGxlV1J2ZDI0dWMyeHBZMnRjSWl4bExtdGxlVWhoYm1Sc1pYSXBLU3doTUQwOVBXVXViM0IwYVc5dWN5NWtiM1J6SmlZaE1EMDlQV1V1YjNCMGFXOXVjeTV3WVhWelpVOXVSRzkwYzBodmRtVnlKaVpwS0Z3aWJHbGNJaXhsTGlSa2IzUnpLUzV2YmloY0ltMXZkWE5sWlc1MFpYSXVjMnhwWTJ0Y0lpeHBMbkJ5YjNoNUtHVXVhVzUwWlhKeWRYQjBMR1VzSVRBcEtTNXZiaWhjSW0xdmRYTmxiR1ZoZG1VdWMyeHBZMnRjSWl4cExuQnliM2g1S0dVdWFXNTBaWEp5ZFhCMExHVXNJVEVwS1gwc1pTNXdjbTkwYjNSNWNHVXVhVzVwZEZOc2FXUmxSWFpsYm5SelBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVOWRHaHBjenRsTG05d2RHbHZibk11Y0dGMWMyVlBia2h2ZG1WeUppWW9aUzRrYkdsemRDNXZiaWhjSW0xdmRYTmxaVzUwWlhJdWMyeHBZMnRjSWl4cExuQnliM2g1S0dVdWFXNTBaWEp5ZFhCMExHVXNJVEFwS1N4bExpUnNhWE4wTG05dUtGd2liVzkxYzJWc1pXRjJaUzV6YkdsamExd2lMR2t1Y0hKdmVIa29aUzVwYm5SbGNuSjFjSFFzWlN3aE1Ta3BLWDBzWlM1d2NtOTBiM1I1Y0dVdWFXNXBkR2xoYkdsNlpVVjJaVzUwY3oxbWRXNWpkR2x2YmlncGUzWmhjaUJsUFhSb2FYTTdaUzVwYm1sMFFYSnliM2RGZG1WdWRITW9LU3hsTG1sdWFYUkViM1JGZG1WdWRITW9LU3hsTG1sdWFYUlRiR2xrWlVWMlpXNTBjeWdwTEdVdUpHeHBjM1F1YjI0b1hDSjBiM1ZqYUhOMFlYSjBMbk5zYVdOcklHMXZkWE5sWkc5M2JpNXpiR2xqYTF3aUxIdGhZM1JwYjI0NlhDSnpkR0Z5ZEZ3aWZTeGxMbk4zYVhCbFNHRnVaR3hsY2lrc1pTNGtiR2x6ZEM1dmJpaGNJblJ2ZFdOb2JXOTJaUzV6YkdsamF5QnRiM1Z6WlcxdmRtVXVjMnhwWTJ0Y0lpeDdZV04wYVc5dU9sd2liVzkyWlZ3aWZTeGxMbk4zYVhCbFNHRnVaR3hsY2lrc1pTNGtiR2x6ZEM1dmJpaGNJblJ2ZFdOb1pXNWtMbk5zYVdOcklHMXZkWE5sZFhBdWMyeHBZMnRjSWl4N1lXTjBhVzl1T2x3aVpXNWtYQ0o5TEdVdWMzZHBjR1ZJWVc1a2JHVnlLU3hsTGlSc2FYTjBMbTl1S0Z3aWRHOTFZMmhqWVc1alpXd3VjMnhwWTJzZ2JXOTFjMlZzWldGMlpTNXpiR2xqYTF3aUxIdGhZM1JwYjI0NlhDSmxibVJjSW4wc1pTNXpkMmx3WlVoaGJtUnNaWElwTEdVdUpHeHBjM1F1YjI0b1hDSmpiR2xqYXk1emJHbGphMXdpTEdVdVkyeHBZMnRJWVc1a2JHVnlLU3hwS0dSdlkzVnRaVzUwS1M1dmJpaGxMblpwYzJsaWFXeHBkSGxEYUdGdVoyVXNhUzV3Y205NGVTaGxMblpwYzJsaWFXeHBkSGtzWlNrcExDRXdQVDA5WlM1dmNIUnBiMjV6TG1GalkyVnpjMmxpYVd4cGRIa21KbVV1Skd4cGMzUXViMjRvWENKclpYbGtiM2R1TG5Oc2FXTnJYQ0lzWlM1clpYbElZVzVrYkdWeUtTd2hNRDA5UFdVdWIzQjBhVzl1Y3k1bWIyTjFjMDl1VTJWc1pXTjBKaVpwS0dVdUpITnNhV1JsVkhKaFkyc3BMbU5vYVd4a2NtVnVLQ2t1YjI0b1hDSmpiR2xqYXk1emJHbGphMXdpTEdVdWMyVnNaV04wU0dGdVpHeGxjaWtzYVNoM2FXNWtiM2NwTG05dUtGd2liM0pwWlc1MFlYUnBiMjVqYUdGdVoyVXVjMnhwWTJzdWMyeHBZMnN0WENJclpTNXBibk4wWVc1alpWVnBaQ3hwTG5CeWIzaDVLR1V1YjNKcFpXNTBZWFJwYjI1RGFHRnVaMlVzWlNrcExHa29kMmx1Wkc5M0tTNXZiaWhjSW5KbGMybDZaUzV6YkdsamF5NXpiR2xqYXkxY0lpdGxMbWx1YzNSaGJtTmxWV2xrTEdrdWNISnZlSGtvWlM1eVpYTnBlbVVzWlNrcExHa29YQ0piWkhKaFoyZGhZbXhsSVQxMGNuVmxYVndpTEdVdUpITnNhV1JsVkhKaFkyc3BMbTl1S0Z3aVpISmhaM04wWVhKMFhDSXNaUzV3Y21WMlpXNTBSR1ZtWVhWc2RDa3NhU2gzYVc1a2IzY3BMbTl1S0Z3aWJHOWhaQzV6YkdsamF5NXpiR2xqYXkxY0lpdGxMbWx1YzNSaGJtTmxWV2xrTEdVdWMyVjBVRzl6YVhScGIyNHBMR2tvWlM1elpYUlFiM05wZEdsdmJpbDlMR1V1Y0hKdmRHOTBlWEJsTG1sdWFYUlZTVDFtZFc1amRHbHZiaWdwZTNaaGNpQnBQWFJvYVhNN0lUQTlQVDFwTG05d2RHbHZibk11WVhKeWIzZHpKaVpwTG5Oc2FXUmxRMjkxYm5RK2FTNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeVltS0drdUpIQnlaWFpCY25KdmR5NXphRzkzS0Nrc2FTNGtibVY0ZEVGeWNtOTNMbk5vYjNjb0tTa3NJVEE5UFQxcExtOXdkR2x2Ym5NdVpHOTBjeVltYVM1emJHbGtaVU52ZFc1MFBta3ViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NtSm1rdUpHUnZkSE11YzJodmR5Z3BmU3hsTG5CeWIzUnZkSGx3WlM1clpYbElZVzVrYkdWeVBXWjFibU4wYVc5dUtHa3BlM1poY2lCbFBYUm9hWE03YVM1MFlYSm5aWFF1ZEdGblRtRnRaUzV0WVhSamFDaGNJbFJGV0ZSQlVrVkJmRWxPVUZWVWZGTkZURVZEVkZ3aUtYeDhLRE0zUFQwOWFTNXJaWGxEYjJSbEppWWhNRDA5UFdVdWIzQjBhVzl1Y3k1aFkyTmxjM05wWW1sc2FYUjVQMlV1WTJoaGJtZGxVMnhwWkdVb2UyUmhkR0U2ZTIxbGMzTmhaMlU2SVRBOVBUMWxMbTl3ZEdsdmJuTXVjblJzUDF3aWJtVjRkRndpT2x3aWNISmxkbWx2ZFhOY0luMTlLVG96T1QwOVBXa3VhMlY1UTI5a1pTWW1JVEE5UFQxbExtOXdkR2x2Ym5NdVlXTmpaWE56YVdKcGJHbDBlU1ltWlM1amFHRnVaMlZUYkdsa1pTaDdaR0YwWVRwN2JXVnpjMkZuWlRvaE1EMDlQV1V1YjNCMGFXOXVjeTV5ZEd3L1hDSndjbVYyYVc5MWMxd2lPbHdpYm1WNGRGd2lmWDBwS1gwc1pTNXdjbTkwYjNSNWNHVXViR0Y2ZVV4dllXUTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0dVcGUya29YQ0pwYldkYlpHRjBZUzFzWVhwNVhWd2lMR1VwTG1WaFkyZ29ablZ1WTNScGIyNG9LWHQyWVhJZ1pUMXBLSFJvYVhNcExIUTlhU2gwYUdsektTNWhkSFJ5S0Z3aVpHRjBZUzFzWVhwNVhDSXBMRzg5YVNoMGFHbHpLUzVoZEhSeUtGd2laR0YwWVMxemNtTnpaWFJjSWlrc2N6MXBLSFJvYVhNcExtRjBkSElvWENKa1lYUmhMWE5wZW1WelhDSXBmSHh1TGlSemJHbGtaWEl1WVhSMGNpaGNJbVJoZEdFdGMybDZaWE5jSWlrc2NqMWtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWFXMW5YQ0lwTzNJdWIyNXNiMkZrUFdaMWJtTjBhVzl1S0NsN1pTNWhibWx0WVhSbEtIdHZjR0ZqYVhSNU9qQjlMREV3TUN4bWRXNWpkR2x2YmlncGUyOG1KaWhsTG1GMGRISW9YQ0p6Y21OelpYUmNJaXh2S1N4ekppWmxMbUYwZEhJb1hDSnphWHBsYzF3aUxITXBLU3hsTG1GMGRISW9YQ0p6Y21OY0lpeDBLUzVoYm1sdFlYUmxLSHR2Y0dGamFYUjVPakY5TERJd01DeG1kVzVqZEdsdmJpZ3BlMlV1Y21WdGIzWmxRWFIwY2loY0ltUmhkR0V0YkdGNmVTQmtZWFJoTFhOeVkzTmxkQ0JrWVhSaExYTnBlbVZ6WENJcExuSmxiVzkyWlVOc1lYTnpLRndpYzJ4cFkyc3RiRzloWkdsdVoxd2lLWDBwTEc0dUpITnNhV1JsY2k1MGNtbG5aMlZ5S0Z3aWJHRjZlVXh2WVdSbFpGd2lMRnR1TEdVc2RGMHBmU2w5TEhJdWIyNWxjbkp2Y2oxbWRXNWpkR2x2YmlncGUyVXVjbVZ0YjNabFFYUjBjaWhjSW1SaGRHRXRiR0Y2ZVZ3aUtTNXlaVzF2ZG1WRGJHRnpjeWhjSW5Oc2FXTnJMV3h2WVdScGJtZGNJaWt1WVdSa1EyeGhjM01vWENKemJHbGpheTFzWVhwNWJHOWhaQzFsY25KdmNsd2lLU3h1TGlSemJHbGtaWEl1ZEhKcFoyZGxjaWhjSW14aGVubE1iMkZrUlhKeWIzSmNJaXhiYml4bExIUmRLWDBzY2k1emNtTTlkSDBwZlhaaGNpQjBMRzhzY3l4dVBYUm9hWE03YVdZb0lUQTlQVDF1TG05d2RHbHZibk11WTJWdWRHVnlUVzlrWlQ4aE1EMDlQVzR1YjNCMGFXOXVjeTVwYm1acGJtbDBaVDl6UFNodlBXNHVZM1Z5Y21WdWRGTnNhV1JsS3lodUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNMeklyTVNrcEsyNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NyTWpvb2J6MU5ZWFJvTG0xaGVDZ3dMRzR1WTNWeWNtVnVkRk5zYVdSbExTaHVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzTHpJck1Ta3BMSE05Ymk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR5OHlLekVyTWl0dUxtTjFjbkpsYm5SVGJHbGtaU2s2S0c4OWJpNXZjSFJwYjI1ekxtbHVabWx1YVhSbFAyNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NyYmk1amRYSnlaVzUwVTJ4cFpHVTZiaTVqZFhKeVpXNTBVMnhwWkdVc2N6MU5ZWFJvTG1ObGFXd29ieXR1TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0tTd2hNRDA5UFc0dWIzQjBhVzl1Y3k1bVlXUmxKaVlvYno0d0ppWnZMUzBzY3p3OWJpNXpiR2xrWlVOdmRXNTBKaVp6S3lzcEtTeDBQVzR1SkhOc2FXUmxjaTVtYVc1a0tGd2lMbk5zYVdOckxYTnNhV1JsWENJcExuTnNhV05sS0c4c2N5a3NYQ0poYm5ScFkybHdZWFJsWkZ3aVBUMDliaTV2Y0hScGIyNXpMbXhoZW5sTWIyRmtLV1p2Y2loMllYSWdjajF2TFRFc2JEMXpMR1E5Ymk0a2MyeHBaR1Z5TG1acGJtUW9YQ0l1YzJ4cFkyc3RjMnhwWkdWY0lpa3NZVDB3TzJFOGJpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyTnliMnhzTzJFckt5bHlQREFtSmloeVBXNHVjMnhwWkdWRGIzVnVkQzB4S1N4MFBTaDBQWFF1WVdSa0tHUXVaWEVvY2lrcEtTNWhaR1FvWkM1bGNTaHNLU2tzY2kwdExHd3JLenRsS0hRcExHNHVjMnhwWkdWRGIzVnVkRHc5Ymk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR6OWxLRzR1SkhOc2FXUmxjaTVtYVc1a0tGd2lMbk5zYVdOckxYTnNhV1JsWENJcEtUcHVMbU4xY25KbGJuUlRiR2xrWlQ0OWJpNXpiR2xrWlVOdmRXNTBMVzR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjL1pTaHVMaVJ6Ykdsa1pYSXVabWx1WkNoY0lpNXpiR2xqYXkxamJHOXVaV1JjSWlrdWMyeHBZMlVvTUN4dUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNLU2s2TUQwOVBXNHVZM1Z5Y21WdWRGTnNhV1JsSmlabEtHNHVKSE5zYVdSbGNpNW1hVzVrS0Z3aUxuTnNhV05yTFdOc2IyNWxaRndpS1M1emJHbGpaU2d0TVNwdUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNLU2w5TEdVdWNISnZkRzkwZVhCbExteHZZV1JUYkdsa1pYSTlablZ1WTNScGIyNG9LWHQyWVhJZ2FUMTBhR2x6TzJrdWMyVjBVRzl6YVhScGIyNG9LU3hwTGlSemJHbGtaVlJ5WVdOckxtTnpjeWg3YjNCaFkybDBlVG94ZlNrc2FTNGtjMnhwWkdWeUxuSmxiVzkyWlVOc1lYTnpLRndpYzJ4cFkyc3RiRzloWkdsdVoxd2lLU3hwTG1sdWFYUlZTU2dwTEZ3aWNISnZaM0psYzNOcGRtVmNJajA5UFdrdWIzQjBhVzl1Y3k1c1lYcDVURzloWkNZbWFTNXdjbTluY21WemMybDJaVXhoZW5sTWIyRmtLQ2w5TEdVdWNISnZkRzkwZVhCbExtNWxlSFE5WlM1d2NtOTBiM1I1Y0dVdWMyeHBZMnRPWlhoMFBXWjFibU4wYVc5dUtDbDdkR2hwY3k1amFHRnVaMlZUYkdsa1pTaDdaR0YwWVRwN2JXVnpjMkZuWlRwY0ltNWxlSFJjSW4xOUtYMHNaUzV3Y205MGIzUjVjR1V1YjNKcFpXNTBZWFJwYjI1RGFHRnVaMlU5Wm5WdVkzUnBiMjRvS1h0MllYSWdhVDEwYUdsek8ya3VZMmhsWTJ0U1pYTndiMjV6YVhabEtDa3NhUzV6WlhSUWIzTnBkR2x2YmlncGZTeGxMbkJ5YjNSdmRIbHdaUzV3WVhWelpUMWxMbkJ5YjNSdmRIbHdaUzV6YkdsamExQmhkWE5sUFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN6dHBMbUYxZEc5UWJHRjVRMnhsWVhJb0tTeHBMbkJoZFhObFpEMGhNSDBzWlM1d2NtOTBiM1I1Y0dVdWNHeGhlVDFsTG5CeWIzUnZkSGx3WlM1emJHbGphMUJzWVhrOVpuVnVZM1JwYjI0b0tYdDJZWElnYVQxMGFHbHpPMmt1WVhWMGIxQnNZWGtvS1N4cExtOXdkR2x2Ym5NdVlYVjBiM0JzWVhrOUlUQXNhUzV3WVhWelpXUTlJVEVzYVM1bWIyTjFjM05sWkQwaE1TeHBMbWx1ZEdWeWNuVndkR1ZrUFNFeGZTeGxMbkJ5YjNSdmRIbHdaUzV3YjNOMFUyeHBaR1U5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5ZEdocGN6dDBMblZ1YzJ4cFkydGxaSHg4S0hRdUpITnNhV1JsY2k1MGNtbG5aMlZ5S0Z3aVlXWjBaWEpEYUdGdVoyVmNJaXhiZEN4bFhTa3NkQzVoYm1sdFlYUnBibWM5SVRFc2RDNXpiR2xrWlVOdmRXNTBQblF1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjbUpuUXVjMlYwVUc5emFYUnBiMjRvS1N4MExuTjNhWEJsVEdWbWREMXVkV3hzTEhRdWIzQjBhVzl1Y3k1aGRYUnZjR3hoZVNZbWRDNWhkWFJ2VUd4aGVTZ3BMQ0V3UFQwOWRDNXZjSFJwYjI1ekxtRmpZMlZ6YzJsaWFXeHBkSGttSmloMExtbHVhWFJCUkVFb0tTeDBMbTl3ZEdsdmJuTXVabTlqZFhOUGJrTm9ZVzVuWlNZbWFTaDBMaVJ6Ykdsa1pYTXVaMlYwS0hRdVkzVnljbVZ1ZEZOc2FXUmxLU2t1WVhSMGNpaGNJblJoWW1sdVpHVjRYQ0lzTUNrdVptOWpkWE1vS1NrcGZTeGxMbkJ5YjNSdmRIbHdaUzV3Y21WMlBXVXVjSEp2ZEc5MGVYQmxMbk5zYVdOclVISmxkajFtZFc1amRHbHZiaWdwZTNSb2FYTXVZMmhoYm1kbFUyeHBaR1VvZTJSaGRHRTZlMjFsYzNOaFoyVTZYQ0p3Y21WMmFXOTFjMXdpZlgwcGZTeGxMbkJ5YjNSdmRIbHdaUzV3Y21WMlpXNTBSR1ZtWVhWc2REMW1kVzVqZEdsdmJpaHBLWHRwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2w5TEdVdWNISnZkRzkwZVhCbExuQnliMmR5WlhOemFYWmxUR0Y2ZVV4dllXUTlablZ1WTNScGIyNG9aU2w3WlQxbGZId3hPM1poY2lCMExHOHNjeXh1TEhJc2JEMTBhR2x6TEdROWFTaGNJbWx0WjF0a1lYUmhMV3hoZW5sZFhDSXNiQzRrYzJ4cFpHVnlLVHRrTG14bGJtZDBhRDhvZEQxa0xtWnBjbk4wS0Nrc2J6MTBMbUYwZEhJb1hDSmtZWFJoTFd4aGVubGNJaWtzY3oxMExtRjBkSElvWENKa1lYUmhMWE55WTNObGRGd2lLU3h1UFhRdVlYUjBjaWhjSW1SaGRHRXRjMmw2WlhOY0lpbDhmR3d1SkhOc2FXUmxjaTVoZEhSeUtGd2laR0YwWVMxemFYcGxjMXdpS1N3b2NqMWtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Z3aWFXMW5YQ0lwS1M1dmJteHZZV1E5Wm5WdVkzUnBiMjRvS1h0ekppWW9kQzVoZEhSeUtGd2ljM0pqYzJWMFhDSXNjeWtzYmlZbWRDNWhkSFJ5S0Z3aWMybDZaWE5jSWl4dUtTa3NkQzVoZEhSeUtGd2ljM0pqWENJc2J5a3VjbVZ0YjNabFFYUjBjaWhjSW1SaGRHRXRiR0Y2ZVNCa1lYUmhMWE55WTNObGRDQmtZWFJoTFhOcGVtVnpYQ0lwTG5KbGJXOTJaVU5zWVhOektGd2ljMnhwWTJzdGJHOWhaR2x1WjF3aUtTd2hNRDA5UFd3dWIzQjBhVzl1Y3k1aFpHRndkR2wyWlVobGFXZG9kQ1ltYkM1elpYUlFiM05wZEdsdmJpZ3BMR3d1SkhOc2FXUmxjaTUwY21sbloyVnlLRndpYkdGNmVVeHZZV1JsWkZ3aUxGdHNMSFFzYjEwcExHd3VjSEp2WjNKbGMzTnBkbVZNWVhwNVRHOWhaQ2dwZlN4eUxtOXVaWEp5YjNJOVpuVnVZM1JwYjI0b0tYdGxQRE0vYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlncGUyd3VjSEp2WjNKbGMzTnBkbVZNWVhwNVRHOWhaQ2hsS3pFcGZTdzFNREFwT2loMExuSmxiVzkyWlVGMGRISW9YQ0prWVhSaExXeGhlbmxjSWlrdWNtVnRiM1psUTJ4aGMzTW9YQ0p6YkdsamF5MXNiMkZrYVc1blhDSXBMbUZrWkVOc1lYTnpLRndpYzJ4cFkyc3RiR0Y2ZVd4dllXUXRaWEp5YjNKY0lpa3NiQzRrYzJ4cFpHVnlMblJ5YVdkblpYSW9YQ0pzWVhwNVRHOWhaRVZ5Y205eVhDSXNXMndzZEN4dlhTa3NiQzV3Y205bmNtVnpjMmwyWlV4aGVubE1iMkZrS0NrcGZTeHlMbk55WXoxdktUcHNMaVJ6Ykdsa1pYSXVkSEpwWjJkbGNpaGNJbUZzYkVsdFlXZGxjMHh2WVdSbFpGd2lMRnRzWFNsOUxHVXVjSEp2ZEc5MGVYQmxMbkpsWm5KbGMyZzlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUXNieXh6UFhSb2FYTTdiejF6TG5Oc2FXUmxRMjkxYm5RdGN5NXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeXdoY3k1dmNIUnBiMjV6TG1sdVptbHVhWFJsSmlaekxtTjFjbkpsYm5SVGJHbGtaVDV2SmlZb2N5NWpkWEp5Wlc1MFUyeHBaR1U5Ynlrc2N5NXpiR2xrWlVOdmRXNTBQRDF6TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0ppWW9jeTVqZFhKeVpXNTBVMnhwWkdVOU1Da3NkRDF6TG1OMWNuSmxiblJUYkdsa1pTeHpMbVJsYzNSeWIza29JVEFwTEdrdVpYaDBaVzVrS0hNc2N5NXBibWwwYVdGc2N5eDdZM1Z5Y21WdWRGTnNhV1JsT25SOUtTeHpMbWx1YVhRb0tTeGxmSHh6TG1Ob1lXNW5aVk5zYVdSbEtIdGtZWFJoT250dFpYTnpZV2RsT2x3aWFXNWtaWGhjSWl4cGJtUmxlRHAwZlgwc0lURXBmU3hsTG5CeWIzUnZkSGx3WlM1eVpXZHBjM1JsY2tKeVpXRnJjRzlwYm5SelBXWjFibU4wYVc5dUtDbDdkbUZ5SUdVc2RDeHZMSE05ZEdocGN5eHVQWE11YjNCMGFXOXVjeTV5WlhOd2IyNXphWFpsZkh4dWRXeHNPMmxtS0Z3aVlYSnlZWGxjSWowOVBXa3VkSGx3WlNodUtTWW1iaTVzWlc1bmRHZ3BlM011Y21WemNHOXVaRlJ2UFhNdWIzQjBhVzl1Y3k1eVpYTndiMjVrVkc5OGZGd2lkMmx1Wkc5M1hDSTdabTl5S0dVZ2FXNGdiaWxwWmlodlBYTXVZbkpsWVd0d2IybHVkSE11YkdWdVozUm9MVEVzYmk1b1lYTlBkMjVRY205d1pYSjBlU2hsS1NsN1ptOXlLSFE5Ymx0bFhTNWljbVZoYTNCdmFXNTBPMjgrUFRBN0tYTXVZbkpsWVd0d2IybHVkSE5iYjEwbUpuTXVZbkpsWVd0d2IybHVkSE5iYjEwOVBUMTBKaVp6TG1KeVpXRnJjRzlwYm5SekxuTndiR2xqWlNodkxERXBMRzh0TFR0ekxtSnlaV0ZyY0c5cGJuUnpMbkIxYzJnb2RDa3NjeTVpY21WaGEzQnZhVzUwVTJWMGRHbHVaM05iZEYwOWJsdGxYUzV6WlhSMGFXNW5jMzF6TG1KeVpXRnJjRzlwYm5SekxuTnZjblFvWm5WdVkzUnBiMjRvYVN4bEtYdHlaWFIxY200Z2N5NXZjSFJwYjI1ekxtMXZZbWxzWlVacGNuTjBQMmt0WlRwbExXbDlLWDE5TEdVdWNISnZkRzkwZVhCbExuSmxhVzVwZEQxbWRXNWpkR2x2YmlncGUzWmhjaUJsUFhSb2FYTTdaUzRrYzJ4cFpHVnpQV1V1SkhOc2FXUmxWSEpoWTJzdVkyaHBiR1J5Wlc0b1pTNXZjSFJwYjI1ekxuTnNhV1JsS1M1aFpHUkRiR0Z6Y3loY0luTnNhV05yTFhOc2FXUmxYQ0lwTEdVdWMyeHBaR1ZEYjNWdWREMWxMaVJ6Ykdsa1pYTXViR1Z1WjNSb0xHVXVZM1Z5Y21WdWRGTnNhV1JsUGoxbExuTnNhV1JsUTI5MWJuUW1KakFoUFQxbExtTjFjbkpsYm5SVGJHbGtaU1ltS0dVdVkzVnljbVZ1ZEZOc2FXUmxQV1V1WTNWeWNtVnVkRk5zYVdSbExXVXViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTmpjbTlzYkNrc1pTNXpiR2xrWlVOdmRXNTBQRDFsTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0ppWW9aUzVqZFhKeVpXNTBVMnhwWkdVOU1Da3NaUzV5WldkcGMzUmxja0p5WldGcmNHOXBiblJ6S0Nrc1pTNXpaWFJRY205d2N5Z3BMR1V1YzJWMGRYQkpibVpwYm1sMFpTZ3BMR1V1WW5WcGJHUkJjbkp2ZDNNb0tTeGxMblZ3WkdGMFpVRnljbTkzY3lncExHVXVhVzVwZEVGeWNtOTNSWFpsYm5SektDa3NaUzVpZFdsc1pFUnZkSE1vS1N4bExuVndaR0YwWlVSdmRITW9LU3hsTG1sdWFYUkViM1JGZG1WdWRITW9LU3hsTG1Oc1pXRnVWWEJUYkdsa1pVVjJaVzUwY3lncExHVXVhVzVwZEZOc2FXUmxSWFpsYm5SektDa3NaUzVqYUdWamExSmxjM0J2Ym5OcGRtVW9JVEVzSVRBcExDRXdQVDA5WlM1dmNIUnBiMjV6TG1adlkzVnpUMjVUWld4bFkzUW1KbWtvWlM0a2MyeHBaR1ZVY21GamF5a3VZMmhwYkdSeVpXNG9LUzV2YmloY0ltTnNhV05yTG5Oc2FXTnJYQ0lzWlM1elpXeGxZM1JJWVc1a2JHVnlLU3hsTG5ObGRGTnNhV1JsUTJ4aGMzTmxjeWhjSW01MWJXSmxjbHdpUFQxMGVYQmxiMllnWlM1amRYSnlaVzUwVTJ4cFpHVS9aUzVqZFhKeVpXNTBVMnhwWkdVNk1Da3NaUzV6WlhSUWIzTnBkR2x2YmlncExHVXVabTlqZFhOSVlXNWtiR1Z5S0Nrc1pTNXdZWFZ6WldROUlXVXViM0IwYVc5dWN5NWhkWFJ2Y0d4aGVTeGxMbUYxZEc5UWJHRjVLQ2tzWlM0a2MyeHBaR1Z5TG5SeWFXZG5aWElvWENKeVpVbHVhWFJjSWl4YlpWMHBmU3hsTG5CeWIzUnZkSGx3WlM1eVpYTnBlbVU5Wm5WdVkzUnBiMjRvS1h0MllYSWdaVDEwYUdsek8ya29kMmx1Wkc5M0tTNTNhV1IwYUNncElUMDlaUzUzYVc1a2IzZFhhV1IwYUNZbUtHTnNaV0Z5VkdsdFpXOTFkQ2hsTG5kcGJtUnZkMFJsYkdGNUtTeGxMbmRwYm1SdmQwUmxiR0Y1UFhkcGJtUnZkeTV6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN1pTNTNhVzVrYjNkWGFXUjBhRDFwS0hkcGJtUnZkeWt1ZDJsa2RHZ29LU3hsTG1Ob1pXTnJVbVZ6Y0c5dWMybDJaU2dwTEdVdWRXNXpiR2xqYTJWa2ZIeGxMbk5sZEZCdmMybDBhVzl1S0NsOUxEVXdLU2w5TEdVdWNISnZkRzkwZVhCbExuSmxiVzkyWlZOc2FXUmxQV1V1Y0hKdmRHOTBlWEJsTG5Oc2FXTnJVbVZ0YjNabFBXWjFibU4wYVc5dUtHa3NaU3gwS1h0MllYSWdiejEwYUdsek8ybG1LR2s5WENKaWIyOXNaV0Z1WENJOVBYUjVjR1Z2WmlCcFB5RXdQVDA5S0dVOWFTay9NRHB2TG5Oc2FXUmxRMjkxYm5RdE1Ub2hNRDA5UFdVL0xTMXBPbWtzYnk1emJHbGtaVU52ZFc1MFBERjhmR2s4TUh4OGFUNXZMbk5zYVdSbFEyOTFiblF0TVNseVpYUjFjbTRoTVR0dkxuVnViRzloWkNncExDRXdQVDA5ZEQ5dkxpUnpiR2xrWlZSeVlXTnJMbU5vYVd4a2NtVnVLQ2t1Y21WdGIzWmxLQ2s2Ynk0a2MyeHBaR1ZVY21GamF5NWphR2xzWkhKbGJpaDBhR2x6TG05d2RHbHZibk11YzJ4cFpHVXBMbVZ4S0drcExuSmxiVzkyWlNncExHOHVKSE5zYVdSbGN6MXZMaVJ6Ykdsa1pWUnlZV05yTG1Ob2FXeGtjbVZ1S0hSb2FYTXViM0IwYVc5dWN5NXpiR2xrWlNrc2J5NGtjMnhwWkdWVWNtRmpheTVqYUdsc1pISmxiaWgwYUdsekxtOXdkR2x2Ym5NdWMyeHBaR1VwTG1SbGRHRmphQ2dwTEc4dUpITnNhV1JsVkhKaFkyc3VZWEJ3Wlc1a0tHOHVKSE5zYVdSbGN5a3NieTRrYzJ4cFpHVnpRMkZqYUdVOWJ5NGtjMnhwWkdWekxHOHVjbVZwYm1sMEtDbDlMR1V1Y0hKdmRHOTBlWEJsTG5ObGRFTlRVejFtZFc1amRHbHZiaWhwS1h0MllYSWdaU3gwTEc4OWRHaHBjeXh6UFh0OU95RXdQVDA5Ynk1dmNIUnBiMjV6TG5KMGJDWW1LR2s5TFdrcExHVTlYQ0pzWldaMFhDSTlQVzh1Y0c5emFYUnBiMjVRY205d1AwMWhkR2d1WTJWcGJDaHBLU3RjSW5CNFhDSTZYQ0l3Y0hoY0lpeDBQVndpZEc5d1hDSTlQVzh1Y0c5emFYUnBiMjVRY205d1AwMWhkR2d1WTJWcGJDaHBLU3RjSW5CNFhDSTZYQ0l3Y0hoY0lpeHpXMjh1Y0c5emFYUnBiMjVRY205d1hUMXBMQ0V4UFQwOWJ5NTBjbUZ1YzJadmNtMXpSVzVoWW14bFpEOXZMaVJ6Ykdsa1pWUnlZV05yTG1OemN5aHpLVG9vY3oxN2ZTd2hNVDA5UFc4dVkzTnpWSEpoYm5OcGRHbHZibk0vS0hOYmJ5NWhibWx0Vkhsd1pWMDlYQ0owY21GdWMyeGhkR1VvWENJclpTdGNJaXdnWENJcmRDdGNJaWxjSWl4dkxpUnpiR2xrWlZSeVlXTnJMbU56Y3loektTazZLSE5iYnk1aGJtbHRWSGx3WlYwOVhDSjBjbUZ1YzJ4aGRHVXpaQ2hjSWl0bEsxd2lMQ0JjSWl0MEsxd2lMQ0F3Y0hncFhDSXNieTRrYzJ4cFpHVlVjbUZqYXk1amMzTW9jeWtwS1gwc1pTNXdjbTkwYjNSNWNHVXVjMlYwUkdsdFpXNXphVzl1Y3oxbWRXNWpkR2x2YmlncGUzWmhjaUJwUFhSb2FYTTdJVEU5UFQxcExtOXdkR2x2Ym5NdWRtVnlkR2xqWVd3L0lUQTlQVDFwTG05d2RHbHZibk11WTJWdWRHVnlUVzlrWlNZbWFTNGtiR2x6ZEM1amMzTW9lM0JoWkdScGJtYzZYQ0l3Y0hnZ1hDSXJhUzV2Y0hScGIyNXpMbU5sYm5SbGNsQmhaR1JwYm1kOUtUb29hUzRrYkdsemRDNW9aV2xuYUhRb2FTNGtjMnhwWkdWekxtWnBjbk4wS0NrdWIzVjBaWEpJWldsbmFIUW9JVEFwS21rdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOb2IzY3BMQ0V3UFQwOWFTNXZjSFJwYjI1ekxtTmxiblJsY2sxdlpHVW1KbWt1Skd4cGMzUXVZM056S0h0d1lXUmthVzVuT21rdWIzQjBhVzl1Y3k1alpXNTBaWEpRWVdSa2FXNW5LMXdpSURCd2VGd2lmU2twTEdrdWJHbHpkRmRwWkhSb1BXa3VKR3hwYzNRdWQybGtkR2dvS1N4cExteHBjM1JJWldsbmFIUTlhUzRrYkdsemRDNW9aV2xuYUhRb0tTd2hNVDA5UFdrdWIzQjBhVzl1Y3k1MlpYSjBhV05oYkNZbUlURTlQVDFwTG05d2RHbHZibk11ZG1GeWFXRmliR1ZYYVdSMGFEOG9hUzV6Ykdsa1pWZHBaSFJvUFUxaGRHZ3VZMlZwYkNocExteHBjM1JYYVdSMGFDOXBMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzS1N4cExpUnpiR2xrWlZSeVlXTnJMbmRwWkhSb0tFMWhkR2d1WTJWcGJDaHBMbk5zYVdSbFYybGtkR2dxYVM0a2MyeHBaR1ZVY21GamF5NWphR2xzWkhKbGJpaGNJaTV6YkdsamF5MXpiR2xrWlZ3aUtTNXNaVzVuZEdncEtTazZJVEE5UFQxcExtOXdkR2x2Ym5NdWRtRnlhV0ZpYkdWWGFXUjBhRDlwTGlSemJHbGtaVlJ5WVdOckxuZHBaSFJvS0RWbE15cHBMbk5zYVdSbFEyOTFiblFwT2locExuTnNhV1JsVjJsa2RHZzlUV0YwYUM1alpXbHNLR2t1YkdsemRGZHBaSFJvS1N4cExpUnpiR2xrWlZSeVlXTnJMbWhsYVdkb2RDaE5ZWFJvTG1ObGFXd29hUzRrYzJ4cFpHVnpMbVpwY25OMEtDa3ViM1YwWlhKSVpXbG5hSFFvSVRBcEtta3VKSE5zYVdSbFZISmhZMnN1WTJocGJHUnlaVzRvWENJdWMyeHBZMnN0YzJ4cFpHVmNJaWt1YkdWdVozUm9LU2twTzNaaGNpQmxQV2t1SkhOc2FXUmxjeTVtYVhKemRDZ3BMbTkxZEdWeVYybGtkR2dvSVRBcExXa3VKSE5zYVdSbGN5NW1hWEp6ZENncExuZHBaSFJvS0NrN0lURTlQVDFwTG05d2RHbHZibk11ZG1GeWFXRmliR1ZYYVdSMGFDWW1hUzRrYzJ4cFpHVlVjbUZqYXk1amFHbHNaSEpsYmloY0lpNXpiR2xqYXkxemJHbGtaVndpS1M1M2FXUjBhQ2hwTG5Oc2FXUmxWMmxrZEdndFpTbDlMR1V1Y0hKdmRHOTBlWEJsTG5ObGRFWmhaR1U5Wm5WdVkzUnBiMjRvS1h0MllYSWdaU3gwUFhSb2FYTTdkQzRrYzJ4cFpHVnpMbVZoWTJnb1puVnVZM1JwYjI0b2J5eHpLWHRsUFhRdWMyeHBaR1ZYYVdSMGFDcHZLaTB4TENFd1BUMDlkQzV2Y0hScGIyNXpMbkowYkQ5cEtITXBMbU56Y3loN2NHOXphWFJwYjI0NlhDSnlaV3hoZEdsMlpWd2lMSEpwWjJoME9tVXNkRzl3T2pBc2VrbHVaR1Y0T25RdWIzQjBhVzl1Y3k1NlNXNWtaWGd0TWl4dmNHRmphWFI1T2pCOUtUcHBLSE1wTG1OemN5aDdjRzl6YVhScGIyNDZYQ0p5Wld4aGRHbDJaVndpTEd4bFpuUTZaU3gwYjNBNk1DeDZTVzVrWlhnNmRDNXZjSFJwYjI1ekxucEpibVJsZUMweUxHOXdZV05wZEhrNk1IMHBmU2tzZEM0a2MyeHBaR1Z6TG1WeEtIUXVZM1Z5Y21WdWRGTnNhV1JsS1M1amMzTW9lM3BKYm1SbGVEcDBMbTl3ZEdsdmJuTXVla2x1WkdWNExURXNiM0JoWTJsMGVUb3hmU2w5TEdVdWNISnZkRzkwZVhCbExuTmxkRWhsYVdkb2REMW1kVzVqZEdsdmJpZ3BlM1poY2lCcFBYUm9hWE03YVdZb01UMDlQV2t1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjbUppRXdQVDA5YVM1dmNIUnBiMjV6TG1Ga1lYQjBhWFpsU0dWcFoyaDBKaVloTVQwOVBXa3ViM0IwYVc5dWN5NTJaWEowYVdOaGJDbDdkbUZ5SUdVOWFTNGtjMnhwWkdWekxtVnhLR2t1WTNWeWNtVnVkRk5zYVdSbEtTNXZkWFJsY2tobGFXZG9kQ2doTUNrN2FTNGtiR2x6ZEM1amMzTW9YQ0pvWldsbmFIUmNJaXhsS1gxOUxHVXVjSEp2ZEc5MGVYQmxMbk5sZEU5d2RHbHZiajFsTG5CeWIzUnZkSGx3WlM1emJHbGphMU5sZEU5d2RHbHZiajFtZFc1amRHbHZiaWdwZTNaaGNpQmxMSFFzYnl4ekxHNHNjajEwYUdsekxHdzlJVEU3YVdZb1hDSnZZbXBsWTNSY0lqMDlQV2t1ZEhsd1pTaGhjbWQxYldWdWRITmJNRjBwUHlodlBXRnlaM1Z0Wlc1MGMxc3dYU3hzUFdGeVozVnRaVzUwYzFzeFhTeHVQVndpYlhWc2RHbHdiR1ZjSWlrNlhDSnpkSEpwYm1kY0lqMDlQV2t1ZEhsd1pTaGhjbWQxYldWdWRITmJNRjBwSmlZb2J6MWhjbWQxYldWdWRITmJNRjBzY3oxaGNtZDFiV1Z1ZEhOYk1WMHNiRDFoY21kMWJXVnVkSE5iTWwwc1hDSnlaWE53YjI1emFYWmxYQ0k5UFQxaGNtZDFiV1Z1ZEhOYk1GMG1KbHdpWVhKeVlYbGNJajA5UFdrdWRIbHdaU2hoY21kMWJXVnVkSE5iTVYwcFAyNDlYQ0p5WlhOd2IyNXphWFpsWENJNmRtOXBaQ0F3SVQwOVlYSm5kVzFsYm5Seld6RmRKaVlvYmoxY0luTnBibWRzWlZ3aUtTa3NYQ0p6YVc1bmJHVmNJajA5UFc0cGNpNXZjSFJwYjI1elcyOWRQWE03Wld4elpTQnBaaWhjSW0xMWJIUnBjR3hsWENJOVBUMXVLV2t1WldGamFDaHZMR1oxYm1OMGFXOXVLR2tzWlNsN2NpNXZjSFJwYjI1elcybGRQV1Y5S1R0bGJITmxJR2xtS0Z3aWNtVnpjRzl1YzJsMlpWd2lQVDA5YmlsbWIzSW9kQ0JwYmlCektXbG1LRndpWVhKeVlYbGNJaUU5UFdrdWRIbHdaU2h5TG05d2RHbHZibk11Y21WemNHOXVjMmwyWlNrcGNpNXZjSFJwYjI1ekxuSmxjM0J2Ym5OcGRtVTlXM05iZEYxZE8yVnNjMlY3Wm05eUtHVTljaTV2Y0hScGIyNXpMbkpsYzNCdmJuTnBkbVV1YkdWdVozUm9MVEU3WlQ0OU1Ec3BjaTV2Y0hScGIyNXpMbkpsYzNCdmJuTnBkbVZiWlYwdVluSmxZV3R3YjJsdWREMDlQWE5iZEYwdVluSmxZV3R3YjJsdWRDWW1jaTV2Y0hScGIyNXpMbkpsYzNCdmJuTnBkbVV1YzNCc2FXTmxLR1VzTVNrc1pTMHRPM0l1YjNCMGFXOXVjeTV5WlhOd2IyNXphWFpsTG5CMWMyZ29jMXQwWFNsOWJDWW1LSEl1ZFc1c2IyRmtLQ2tzY2k1eVpXbHVhWFFvS1NsOUxHVXVjSEp2ZEc5MGVYQmxMbk5sZEZCdmMybDBhVzl1UFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN6dHBMbk5sZEVScGJXVnVjMmx2Ym5Nb0tTeHBMbk5sZEVobGFXZG9kQ2dwTENFeFBUMDlhUzV2Y0hScGIyNXpMbVpoWkdVL2FTNXpaWFJEVTFNb2FTNW5aWFJNWldaMEtHa3VZM1Z5Y21WdWRGTnNhV1JsS1NrNmFTNXpaWFJHWVdSbEtDa3NhUzRrYzJ4cFpHVnlMblJ5YVdkblpYSW9YQ0p6WlhSUWIzTnBkR2x2Ymx3aUxGdHBYU2w5TEdVdWNISnZkRzkwZVhCbExuTmxkRkJ5YjNCelBXWjFibU4wYVc5dUtDbDdkbUZ5SUdrOWRHaHBjeXhsUFdSdlkzVnRaVzUwTG1KdlpIa3VjM1I1YkdVN2FTNXdiM05wZEdsdmJsQnliM0E5SVRBOVBUMXBMbTl3ZEdsdmJuTXVkbVZ5ZEdsallXdy9YQ0owYjNCY0lqcGNJbXhsWm5SY0lpeGNJblJ2Y0Z3aVBUMDlhUzV3YjNOcGRHbHZibEJ5YjNBL2FTNGtjMnhwWkdWeUxtRmtaRU5zWVhOektGd2ljMnhwWTJzdGRtVnlkR2xqWVd4Y0lpazZhUzRrYzJ4cFpHVnlMbkpsYlc5MlpVTnNZWE56S0Z3aWMyeHBZMnN0ZG1WeWRHbGpZV3hjSWlrc2RtOXBaQ0F3UFQwOVpTNVhaV0pyYVhSVWNtRnVjMmwwYVc5dUppWjJiMmxrSURBOVBUMWxMazF2ZWxSeVlXNXphWFJwYjI0bUpuWnZhV1FnTUQwOVBXVXViWE5VY21GdWMybDBhVzl1Zkh3aE1EMDlQV2t1YjNCMGFXOXVjeTUxYzJWRFUxTW1KaWhwTG1OemMxUnlZVzV6YVhScGIyNXpQU0V3S1N4cExtOXdkR2x2Ym5NdVptRmtaU1ltS0Z3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCcExtOXdkR2x2Ym5NdWVrbHVaR1Y0UDJrdWIzQjBhVzl1Y3k1NlNXNWtaWGc4TXlZbUtHa3ViM0IwYVc5dWN5NTZTVzVrWlhnOU15azZhUzV2Y0hScGIyNXpMbnBKYm1SbGVEMXBMbVJsWm1GMWJIUnpMbnBKYm1SbGVDa3NkbTlwWkNBd0lUMDlaUzVQVkhKaGJuTm1iM0p0SmlZb2FTNWhibWx0Vkhsd1pUMWNJazlVY21GdWMyWnZjbTFjSWl4cExuUnlZVzV6Wm05eWJWUjVjR1U5WENJdGJ5MTBjbUZ1YzJadmNtMWNJaXhwTG5SeVlXNXphWFJwYjI1VWVYQmxQVndpVDFSeVlXNXphWFJwYjI1Y0lpeDJiMmxrSURBOVBUMWxMbkJsY25Od1pXTjBhWFpsVUhKdmNHVnlkSGttSm5admFXUWdNRDA5UFdVdWQyVmlhMmwwVUdWeWMzQmxZM1JwZG1VbUppaHBMbUZ1YVcxVWVYQmxQU0V4S1Nrc2RtOXBaQ0F3SVQwOVpTNU5iM3BVY21GdWMyWnZjbTBtSmlocExtRnVhVzFVZVhCbFBWd2lUVzk2VkhKaGJuTm1iM0p0WENJc2FTNTBjbUZ1YzJadmNtMVVlWEJsUFZ3aUxXMXZlaTEwY21GdWMyWnZjbTFjSWl4cExuUnlZVzV6YVhScGIyNVVlWEJsUFZ3aVRXOTZWSEpoYm5OcGRHbHZibHdpTEhadmFXUWdNRDA5UFdVdWNHVnljM0JsWTNScGRtVlFjbTl3WlhKMGVTWW1kbTlwWkNBd1BUMDlaUzVOYjNwUVpYSnpjR1ZqZEdsMlpTWW1LR2t1WVc1cGJWUjVjR1U5SVRFcEtTeDJiMmxrSURBaFBUMWxMbmRsWW10cGRGUnlZVzV6Wm05eWJTWW1LR2t1WVc1cGJWUjVjR1U5WENKM1pXSnJhWFJVY21GdWMyWnZjbTFjSWl4cExuUnlZVzV6Wm05eWJWUjVjR1U5WENJdGQyVmlhMmwwTFhSeVlXNXpabTl5YlZ3aUxHa3VkSEpoYm5OcGRHbHZibFI1Y0dVOVhDSjNaV0pyYVhSVWNtRnVjMmwwYVc5dVhDSXNkbTlwWkNBd1BUMDlaUzV3WlhKemNHVmpkR2wyWlZCeWIzQmxjblI1SmlaMmIybGtJREE5UFQxbExuZGxZbXRwZEZCbGNuTndaV04wYVhabEppWW9hUzVoYm1sdFZIbHdaVDBoTVNrcExIWnZhV1FnTUNFOVBXVXViWE5VY21GdWMyWnZjbTBtSmlocExtRnVhVzFVZVhCbFBWd2liWE5VY21GdWMyWnZjbTFjSWl4cExuUnlZVzV6Wm05eWJWUjVjR1U5WENJdGJYTXRkSEpoYm5ObWIzSnRYQ0lzYVM1MGNtRnVjMmwwYVc5dVZIbHdaVDFjSW0xelZISmhibk5wZEdsdmJsd2lMSFp2YVdRZ01EMDlQV1V1YlhOVWNtRnVjMlp2Y20wbUppaHBMbUZ1YVcxVWVYQmxQU0V4S1Nrc2RtOXBaQ0F3SVQwOVpTNTBjbUZ1YzJadmNtMG1KaUV4SVQwOWFTNWhibWx0Vkhsd1pTWW1LR2t1WVc1cGJWUjVjR1U5WENKMGNtRnVjMlp2Y20xY0lpeHBMblJ5WVc1elptOXliVlI1Y0dVOVhDSjBjbUZ1YzJadmNtMWNJaXhwTG5SeVlXNXphWFJwYjI1VWVYQmxQVndpZEhKaGJuTnBkR2x2Ymx3aUtTeHBMblJ5WVc1elptOXliWE5GYm1GaWJHVmtQV2t1YjNCMGFXOXVjeTUxYzJWVWNtRnVjMlp2Y20wbUptNTFiR3doUFQxcExtRnVhVzFVZVhCbEppWWhNU0U5UFdrdVlXNXBiVlI1Y0dWOUxHVXVjSEp2ZEc5MGVYQmxMbk5sZEZOc2FXUmxRMnhoYzNObGN6MW1kVzVqZEdsdmJpaHBLWHQyWVhJZ1pTeDBMRzhzY3l4dVBYUm9hWE03YVdZb2REMXVMaVJ6Ykdsa1pYSXVabWx1WkNoY0lpNXpiR2xqYXkxemJHbGtaVndpS1M1eVpXMXZkbVZEYkdGemN5aGNJbk5zYVdOckxXRmpkR2wyWlNCemJHbGpheTFqWlc1MFpYSWdjMnhwWTJzdFkzVnljbVZ1ZEZ3aUtTNWhkSFJ5S0Z3aVlYSnBZUzFvYVdSa1pXNWNJaXhjSW5SeWRXVmNJaWtzYmk0a2MyeHBaR1Z6TG1WeEtHa3BMbUZrWkVOc1lYTnpLRndpYzJ4cFkyc3RZM1Z5Y21WdWRGd2lLU3doTUQwOVBXNHViM0IwYVc5dWN5NWpaVzUwWlhKTmIyUmxLWHQyWVhJZ2NqMXVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzSlRJOVBUQS9NVG93TzJVOVRXRjBhQzVtYkc5dmNpaHVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzTHpJcExDRXdQVDA5Ymk1dmNIUnBiMjV6TG1sdVptbHVhWFJsSmlZb2FUNDlaU1ltYVR3OWJpNXpiR2xrWlVOdmRXNTBMVEV0WlQ5dUxpUnpiR2xrWlhNdWMyeHBZMlVvYVMxbEszSXNhU3RsS3pFcExtRmtaRU5zWVhOektGd2ljMnhwWTJzdFlXTjBhWFpsWENJcExtRjBkSElvWENKaGNtbGhMV2hwWkdSbGJsd2lMRndpWm1Gc2MyVmNJaWs2S0c4OWJpNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyaHZkeXRwTEhRdWMyeHBZMlVvYnkxbEt6RXJjaXh2SzJVck1pa3VZV1JrUTJ4aGMzTW9YQ0p6YkdsamF5MWhZM1JwZG1WY0lpa3VZWFIwY2loY0ltRnlhV0V0YUdsa1pHVnVYQ0lzWENKbVlXeHpaVndpS1Nrc01EMDlQV2svZEM1bGNTaDBMbXhsYm1kMGFDMHhMVzR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjcExtRmtaRU5zWVhOektGd2ljMnhwWTJzdFkyVnVkR1Z5WENJcE9tazlQVDF1TG5Oc2FXUmxRMjkxYm5RdE1TWW1kQzVsY1NodUxtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNLUzVoWkdSRGJHRnpjeWhjSW5Oc2FXTnJMV05sYm5SbGNsd2lLU2tzYmk0a2MyeHBaR1Z6TG1WeEtHa3BMbUZrWkVOc1lYTnpLRndpYzJ4cFkyc3RZMlZ1ZEdWeVhDSXBmV1ZzYzJVZ2FUNDlNQ1ltYVR3OWJpNXpiR2xrWlVOdmRXNTBMVzR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjL2JpNGtjMnhwWkdWekxuTnNhV05sS0drc2FTdHVMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzS1M1aFpHUkRiR0Z6Y3loY0luTnNhV05yTFdGamRHbDJaVndpS1M1aGRIUnlLRndpWVhKcFlTMW9hV1JrWlc1Y0lpeGNJbVpoYkhObFhDSXBPblF1YkdWdVozUm9QRDF1TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M1AzUXVZV1JrUTJ4aGMzTW9YQ0p6YkdsamF5MWhZM1JwZG1WY0lpa3VZWFIwY2loY0ltRnlhV0V0YUdsa1pHVnVYQ0lzWENKbVlXeHpaVndpS1Rvb2N6MXVMbk5zYVdSbFEyOTFiblFsYmk1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR5eHZQU0V3UFQwOWJpNXZjSFJwYjI1ekxtbHVabWx1YVhSbFAyNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2NyYVRwcExHNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2M5UFc0dWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiQ1ltYmk1emJHbGtaVU52ZFc1MExXazhiaTV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZHo5MExuTnNhV05sS0c4dEtHNHViM0IwYVc5dWN5NXpiR2xrWlhOVWIxTm9iM2N0Y3lrc2J5dHpLUzVoWkdSRGJHRnpjeWhjSW5Oc2FXTnJMV0ZqZEdsMlpWd2lLUzVoZEhSeUtGd2lZWEpwWVMxb2FXUmtaVzVjSWl4Y0ltWmhiSE5sWENJcE9uUXVjMnhwWTJVb2J5eHZLMjR1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjcExtRmtaRU5zWVhOektGd2ljMnhwWTJzdFlXTjBhWFpsWENJcExtRjBkSElvWENKaGNtbGhMV2hwWkdSbGJsd2lMRndpWm1Gc2MyVmNJaWtwTzF3aWIyNWtaVzFoYm1SY0lpRTlQVzR1YjNCMGFXOXVjeTVzWVhwNVRHOWhaQ1ltWENKaGJuUnBZMmx3WVhSbFpGd2lJVDA5Ymk1dmNIUnBiMjV6TG14aGVubE1iMkZrZkh4dUxteGhlbmxNYjJGa0tDbDlMR1V1Y0hKdmRHOTBlWEJsTG5ObGRIVndTVzVtYVc1cGRHVTlablZ1WTNScGIyNG9LWHQyWVhJZ1pTeDBMRzhzY3oxMGFHbHpPMmxtS0NFd1BUMDljeTV2Y0hScGIyNXpMbVpoWkdVbUppaHpMbTl3ZEdsdmJuTXVZMlZ1ZEdWeVRXOWtaVDBoTVNrc0lUQTlQVDF6TG05d2RHbHZibk11YVc1bWFXNXBkR1VtSmlFeFBUMDljeTV2Y0hScGIyNXpMbVpoWkdVbUppaDBQVzUxYkd3c2N5NXpiR2xrWlVOdmRXNTBQbk11YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjcEtYdG1iM0lvYnowaE1EMDlQWE11YjNCMGFXOXVjeTVqWlc1MFpYSk5iMlJsUDNNdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOb2IzY3JNVHB6TG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0xHVTljeTV6Ykdsa1pVTnZkVzUwTzJVK2N5NXpiR2xrWlVOdmRXNTBMVzg3WlMwOU1TbDBQV1V0TVN4cEtITXVKSE5zYVdSbGMxdDBYU2t1WTJ4dmJtVW9JVEFwTG1GMGRISW9YQ0pwWkZ3aUxGd2lYQ0lwTG1GMGRISW9YQ0prWVhSaExYTnNhV05yTFdsdVpHVjRYQ0lzZEMxekxuTnNhV1JsUTI5MWJuUXBMbkJ5WlhCbGJtUlVieWh6TGlSemJHbGtaVlJ5WVdOcktTNWhaR1JEYkdGemN5aGNJbk5zYVdOckxXTnNiMjVsWkZ3aUtUdG1iM0lvWlQwd08yVThieXR6TG5Oc2FXUmxRMjkxYm5RN1pTczlNU2wwUFdVc2FTaHpMaVJ6Ykdsa1pYTmJkRjBwTG1Oc2IyNWxLQ0V3S1M1aGRIUnlLRndpYVdSY0lpeGNJbHdpS1M1aGRIUnlLRndpWkdGMFlTMXpiR2xqYXkxcGJtUmxlRndpTEhRcmN5NXpiR2xrWlVOdmRXNTBLUzVoY0hCbGJtUlVieWh6TGlSemJHbGtaVlJ5WVdOcktTNWhaR1JEYkdGemN5aGNJbk5zYVdOckxXTnNiMjVsWkZ3aUtUdHpMaVJ6Ykdsa1pWUnlZV05yTG1acGJtUW9YQ0l1YzJ4cFkyc3RZMnh2Ym1Wa1hDSXBMbVpwYm1Rb1hDSmJhV1JkWENJcExtVmhZMmdvWm5WdVkzUnBiMjRvS1h0cEtIUm9hWE1wTG1GMGRISW9YQ0pwWkZ3aUxGd2lYQ0lwZlNsOWZTeGxMbkJ5YjNSdmRIbHdaUzVwYm5SbGNuSjFjSFE5Wm5WdVkzUnBiMjRvYVNsN2RtRnlJR1U5ZEdocGN6dHBmSHhsTG1GMWRHOVFiR0Y1S0Nrc1pTNXBiblJsY25KMWNIUmxaRDFwZlN4bExuQnliM1J2ZEhsd1pTNXpaV3hsWTNSSVlXNWtiR1Z5UFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFhSb2FYTXNiejFwS0dVdWRHRnlaMlYwS1M1cGN5aGNJaTV6YkdsamF5MXpiR2xrWlZ3aUtUOXBLR1V1ZEdGeVoyVjBLVHBwS0dVdWRHRnlaMlYwS1M1d1lYSmxiblJ6S0Z3aUxuTnNhV05yTFhOc2FXUmxYQ0lwTEhNOWNHRnljMlZKYm5Rb2J5NWhkSFJ5S0Z3aVpHRjBZUzF6YkdsamF5MXBibVJsZUZ3aUtTazdjM3g4S0hNOU1Da3NkQzV6Ykdsa1pVTnZkVzUwUEQxMExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VGFHOTNQM1F1YzJ4cFpHVklZVzVrYkdWeUtITXNJVEVzSVRBcE9uUXVjMnhwWkdWSVlXNWtiR1Z5S0hNcGZTeGxMbkJ5YjNSdmRIbHdaUzV6Ykdsa1pVaGhibVJzWlhJOVpuVnVZM1JwYjI0b2FTeGxMSFFwZTNaaGNpQnZMSE1zYml4eUxHd3NaRDF1ZFd4c0xHRTlkR2hwY3p0cFppaGxQV1Y4ZkNFeExDRW9JVEE5UFQxaExtRnVhVzFoZEdsdVp5WW1JVEE5UFQxaExtOXdkR2x2Ym5NdWQyRnBkRVp2Y2tGdWFXMWhkR1Y4ZkNFd1BUMDlZUzV2Y0hScGIyNXpMbVpoWkdVbUptRXVZM1Z5Y21WdWRGTnNhV1JsUFQwOWFTa3BhV1lvSVRFOVBUMWxKaVpoTG1GelRtRjJSbTl5S0drcExHODlhU3hrUFdFdVoyVjBUR1ZtZENodktTeHlQV0V1WjJWMFRHVm1kQ2hoTG1OMWNuSmxiblJUYkdsa1pTa3NZUzVqZFhKeVpXNTBUR1ZtZEQxdWRXeHNQVDA5WVM1emQybHdaVXhsWm5RL2NqcGhMbk4zYVhCbFRHVm1kQ3doTVQwOVBXRXViM0IwYVc5dWN5NXBibVpwYm1sMFpTWW1JVEU5UFQxaExtOXdkR2x2Ym5NdVkyVnVkR1Z5VFc5a1pTWW1LR2s4TUh4OGFUNWhMbWRsZEVSdmRFTnZkVzUwS0NrcVlTNXZjSFJwYjI1ekxuTnNhV1JsYzFSdlUyTnliMnhzS1NraE1UMDlQV0V1YjNCMGFXOXVjeTVtWVdSbEppWW9iejFoTG1OMWNuSmxiblJUYkdsa1pTd2hNQ0U5UFhRL1lTNWhibWx0WVhSbFUyeHBaR1VvY2l4bWRXNWpkR2x2YmlncGUyRXVjRzl6ZEZOc2FXUmxLRzhwZlNrNllTNXdiM04wVTJ4cFpHVW9ieWtwTzJWc2MyVWdhV1lvSVRFOVBUMWhMbTl3ZEdsdmJuTXVhVzVtYVc1cGRHVW1KaUV3UFQwOVlTNXZjSFJwYjI1ekxtTmxiblJsY2sxdlpHVW1KaWhwUERCOGZHaytZUzV6Ykdsa1pVTnZkVzUwTFdFdWIzQjBhVzl1Y3k1emJHbGtaWE5VYjFOamNtOXNiQ2twSVRFOVBUMWhMbTl3ZEdsdmJuTXVabUZrWlNZbUtHODlZUzVqZFhKeVpXNTBVMnhwWkdVc0lUQWhQVDEwUDJFdVlXNXBiV0YwWlZOc2FXUmxLSElzWm5WdVkzUnBiMjRvS1h0aExuQnZjM1JUYkdsa1pTaHZLWDBwT21FdWNHOXpkRk5zYVdSbEtHOHBLVHRsYkhObGUybG1LR0V1YjNCMGFXOXVjeTVoZFhSdmNHeGhlU1ltWTJ4bFlYSkpiblJsY25aaGJDaGhMbUYxZEc5UWJHRjVWR2x0WlhJcExITTliend3UDJFdWMyeHBaR1ZEYjNWdWRDVmhMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRZM0p2Ykd3aFBUQS9ZUzV6Ykdsa1pVTnZkVzUwTFdFdWMyeHBaR1ZEYjNWdWRDVmhMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRZM0p2Ykd3NllTNXpiR2xrWlVOdmRXNTBLMjg2Yno0OVlTNXpiR2xrWlVOdmRXNTBQMkV1YzJ4cFpHVkRiM1Z1ZENWaExtOXdkR2x2Ym5NdWMyeHBaR1Z6Vkc5VFkzSnZiR3doUFRBL01EcHZMV0V1YzJ4cFpHVkRiM1Z1ZERwdkxHRXVZVzVwYldGMGFXNW5QU0V3TEdFdUpITnNhV1JsY2k1MGNtbG5aMlZ5S0Z3aVltVm1iM0psUTJoaGJtZGxYQ0lzVzJFc1lTNWpkWEp5Wlc1MFUyeHBaR1VzYzEwcExHNDlZUzVqZFhKeVpXNTBVMnhwWkdVc1lTNWpkWEp5Wlc1MFUyeHBaR1U5Y3l4aExuTmxkRk5zYVdSbFEyeGhjM05sY3loaExtTjFjbkpsYm5SVGJHbGtaU2tzWVM1dmNIUnBiMjV6TG1GelRtRjJSbTl5SmlZb2JEMG9iRDFoTG1kbGRFNWhkbFJoY21kbGRDZ3BLUzV6YkdsamF5aGNJbWRsZEZOc2FXTnJYQ0lwS1M1emJHbGtaVU52ZFc1MFBEMXNMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzSmlac0xuTmxkRk5zYVdSbFEyeGhjM05sY3loaExtTjFjbkpsYm5SVGJHbGtaU2tzWVM1MWNHUmhkR1ZFYjNSektDa3NZUzUxY0dSaGRHVkJjbkp2ZDNNb0tTd2hNRDA5UFdFdWIzQjBhVzl1Y3k1bVlXUmxLWEpsZEhWeWJpRXdJVDA5ZEQ4b1lTNW1ZV1JsVTJ4cFpHVlBkWFFvYmlrc1lTNW1ZV1JsVTJ4cFpHVW9jeXhtZFc1amRHbHZiaWdwZTJFdWNHOXpkRk5zYVdSbEtITXBmU2twT21FdWNHOXpkRk5zYVdSbEtITXBMSFp2YVdRZ1lTNWhibWx0WVhSbFNHVnBaMmgwS0NrN0lUQWhQVDEwUDJFdVlXNXBiV0YwWlZOc2FXUmxLR1FzWm5WdVkzUnBiMjRvS1h0aExuQnZjM1JUYkdsa1pTaHpLWDBwT21FdWNHOXpkRk5zYVdSbEtITXBmWDBzWlM1d2NtOTBiM1I1Y0dVdWMzUmhjblJNYjJGa1BXWjFibU4wYVc5dUtDbDdkbUZ5SUdrOWRHaHBjenNoTUQwOVBXa3ViM0IwYVc5dWN5NWhjbkp2ZDNNbUpta3VjMnhwWkdWRGIzVnVkRDVwTG05d2RHbHZibk11YzJ4cFpHVnpWRzlUYUc5M0ppWW9hUzRrY0hKbGRrRnljbTkzTG1ocFpHVW9LU3hwTGlSdVpYaDBRWEp5YjNjdWFHbGtaU2dwS1N3aE1EMDlQV2t1YjNCMGFXOXVjeTVrYjNSekppWnBMbk5zYVdSbFEyOTFiblErYVM1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR5WW1hUzRrWkc5MGN5NW9hV1JsS0Nrc2FTNGtjMnhwWkdWeUxtRmtaRU5zWVhOektGd2ljMnhwWTJzdGJHOWhaR2x1WjF3aUtYMHNaUzV3Y205MGIzUjVjR1V1YzNkcGNHVkVhWEpsWTNScGIyNDlablZ1WTNScGIyNG9LWHQyWVhJZ2FTeGxMSFFzYnl4elBYUm9hWE03Y21WMGRYSnVJR2s5Y3k1MGIzVmphRTlpYW1WamRDNXpkR0Z5ZEZndGN5NTBiM1ZqYUU5aWFtVmpkQzVqZFhKWUxHVTljeTUwYjNWamFFOWlhbVZqZEM1emRHRnlkRmt0Y3k1MGIzVmphRTlpYW1WamRDNWpkWEpaTEhROVRXRjBhQzVoZEdGdU1paGxMR2twTENodlBVMWhkR2d1Y205MWJtUW9NVGd3S25RdlRXRjBhQzVRU1NrcFBEQW1KaWh2UFRNMk1DMU5ZWFJvTG1GaWN5aHZLU2tzYnp3OU5EVW1KbTgrUFRBL0lURTlQVDF6TG05d2RHbHZibk11Y25Sc1Axd2liR1ZtZEZ3aU9sd2ljbWxuYUhSY0lqcHZQRDB6TmpBbUptOCtQVE14TlQ4aE1UMDlQWE11YjNCMGFXOXVjeTV5ZEd3L1hDSnNaV1owWENJNlhDSnlhV2RvZEZ3aU9tOCtQVEV6TlNZbWJ6dzlNakkxUHlFeFBUMDljeTV2Y0hScGIyNXpMbkowYkQ5Y0luSnBaMmgwWENJNlhDSnNaV1owWENJNklUQTlQVDF6TG05d2RHbHZibk11ZG1WeWRHbGpZV3hUZDJsd2FXNW5QMjgrUFRNMUppWnZQRDB4TXpVL1hDSmtiM2R1WENJNlhDSjFjRndpT2x3aWRtVnlkR2xqWVd4Y0luMHNaUzV3Y205MGIzUjVjR1V1YzNkcGNHVkZibVE5Wm5WdVkzUnBiMjRvYVNsN2RtRnlJR1VzZEN4dlBYUm9hWE03YVdZb2J5NWtjbUZuWjJsdVp6MGhNU3h2TG5OM2FYQnBibWM5SVRFc2J5NXpZM0p2Ykd4cGJtY3BjbVYwZFhKdUlHOHVjMk55YjJ4c2FXNW5QU0V4TENFeE8ybG1LRzh1YVc1MFpYSnlkWEIwWldROUlURXNieTV6YUc5MWJHUkRiR2xqYXowaEtHOHVkRzkxWTJoUFltcGxZM1F1YzNkcGNHVk1aVzVuZEdnK01UQXBMSFp2YVdRZ01EMDlQVzh1ZEc5MVkyaFBZbXBsWTNRdVkzVnlXQ2x5WlhSMWNtNGhNVHRwWmlnaE1EMDlQVzh1ZEc5MVkyaFBZbXBsWTNRdVpXUm5aVWhwZENZbWJ5NGtjMnhwWkdWeUxuUnlhV2RuWlhJb1hDSmxaR2RsWENJc1cyOHNieTV6ZDJsd1pVUnBjbVZqZEdsdmJpZ3BYU2tzYnk1MGIzVmphRTlpYW1WamRDNXpkMmx3WlV4bGJtZDBhRDQ5Ynk1MGIzVmphRTlpYW1WamRDNXRhVzVUZDJsd1pTbDdjM2RwZEdOb0tIUTlieTV6ZDJsd1pVUnBjbVZqZEdsdmJpZ3BLWHRqWVhObFhDSnNaV1owWENJNlkyRnpaVndpWkc5M2Jsd2lPbVU5Ynk1dmNIUnBiMjV6TG5OM2FYQmxWRzlUYkdsa1pUOXZMbU5vWldOclRtRjJhV2RoWW14bEtHOHVZM1Z5Y21WdWRGTnNhV1JsSzI4dVoyVjBVMnhwWkdWRGIzVnVkQ2dwS1RwdkxtTjFjbkpsYm5SVGJHbGtaU3R2TG1kbGRGTnNhV1JsUTI5MWJuUW9LU3h2TG1OMWNuSmxiblJFYVhKbFkzUnBiMjQ5TUR0aWNtVmhhenRqWVhObFhDSnlhV2RvZEZ3aU9tTmhjMlZjSW5Wd1hDSTZaVDF2TG05d2RHbHZibk11YzNkcGNHVlViMU5zYVdSbFAyOHVZMmhsWTJ0T1lYWnBaMkZpYkdVb2J5NWpkWEp5Wlc1MFUyeHBaR1V0Ynk1blpYUlRiR2xrWlVOdmRXNTBLQ2twT204dVkzVnljbVZ1ZEZOc2FXUmxMVzh1WjJWMFUyeHBaR1ZEYjNWdWRDZ3BMRzh1WTNWeWNtVnVkRVJwY21WamRHbHZiajB4ZlZ3aWRtVnlkR2xqWVd4Y0lpRTlkQ1ltS0c4dWMyeHBaR1ZJWVc1a2JHVnlLR1VwTEc4dWRHOTFZMmhQWW1wbFkzUTllMzBzYnk0a2MyeHBaR1Z5TG5SeWFXZG5aWElvWENKemQybHdaVndpTEZ0dkxIUmRLU2w5Wld4elpTQnZMblJ2ZFdOb1QySnFaV04wTG5OMFlYSjBXQ0U5UFc4dWRHOTFZMmhQWW1wbFkzUXVZM1Z5V0NZbUtHOHVjMnhwWkdWSVlXNWtiR1Z5S0c4dVkzVnljbVZ1ZEZOc2FXUmxLU3h2TG5SdmRXTm9UMkpxWldOMFBYdDlLWDBzWlM1d2NtOTBiM1I1Y0dVdWMzZHBjR1ZJWVc1a2JHVnlQV1oxYm1OMGFXOXVLR2twZTNaaGNpQmxQWFJvYVhNN2FXWW9JU2doTVQwOVBXVXViM0IwYVc5dWN5NXpkMmx3Wlh4OFhDSnZiblJ2ZFdOb1pXNWtYQ0pwYmlCa2IyTjFiV1Z1ZENZbUlURTlQVDFsTG05d2RHbHZibk11YzNkcGNHVjhmQ0V4UFQwOVpTNXZjSFJwYjI1ekxtUnlZV2RuWVdKc1pTWW1MVEVoUFQxcExuUjVjR1V1YVc1a1pYaFBaaWhjSW0xdmRYTmxYQ0lwS1NsemQybDBZMmdvWlM1MGIzVmphRTlpYW1WamRDNW1hVzVuWlhKRGIzVnVkRDFwTG05eWFXZHBibUZzUlhabGJuUW1Kblp2YVdRZ01DRTlQV2t1YjNKcFoybHVZV3hGZG1WdWRDNTBiM1ZqYUdWelAya3ViM0pwWjJsdVlXeEZkbVZ1ZEM1MGIzVmphR1Z6TG14bGJtZDBhRG94TEdVdWRHOTFZMmhQWW1wbFkzUXViV2x1VTNkcGNHVTlaUzVzYVhOMFYybGtkR2d2WlM1dmNIUnBiMjV6TG5SdmRXTm9WR2h5WlhOb2IyeGtMQ0V3UFQwOVpTNXZjSFJwYjI1ekxuWmxjblJwWTJGc1UzZHBjR2x1WnlZbUtHVXVkRzkxWTJoUFltcGxZM1F1YldsdVUzZHBjR1U5WlM1c2FYTjBTR1ZwWjJoMEwyVXViM0IwYVc5dWN5NTBiM1ZqYUZSb2NtVnphRzlzWkNrc2FTNWtZWFJoTG1GamRHbHZiaWw3WTJGelpWd2ljM1JoY25SY0lqcGxMbk4zYVhCbFUzUmhjblFvYVNrN1luSmxZV3M3WTJGelpWd2liVzkyWlZ3aU9tVXVjM2RwY0dWTmIzWmxLR2twTzJKeVpXRnJPMk5oYzJWY0ltVnVaRndpT21VdWMzZHBjR1ZGYm1Rb2FTbDlmU3hsTG5CeWIzUnZkSGx3WlM1emQybHdaVTF2ZG1VOVpuVnVZM1JwYjI0b2FTbDdkbUZ5SUdVc2RDeHZMSE1zYml4eUxHdzlkR2hwY3p0eVpYUjFjbTRnYmoxMmIybGtJREFoUFQxcExtOXlhV2RwYm1Gc1JYWmxiblEvYVM1dmNtbG5hVzVoYkVWMlpXNTBMblJ2ZFdOb1pYTTZiblZzYkN3aEtDRnNMbVJ5WVdkbmFXNW5mSHhzTG5OamNtOXNiR2x1WjN4OGJpWW1NU0U5UFc0dWJHVnVaM1JvS1NZbUtHVTliQzVuWlhSTVpXWjBLR3d1WTNWeWNtVnVkRk5zYVdSbEtTeHNMblJ2ZFdOb1QySnFaV04wTG1OMWNsZzlkbTlwWkNBd0lUMDliajl1V3pCZExuQmhaMlZZT21rdVkyeHBaVzUwV0N4c0xuUnZkV05vVDJKcVpXTjBMbU4xY2xrOWRtOXBaQ0F3SVQwOWJqOXVXekJkTG5CaFoyVlpPbWt1WTJ4cFpXNTBXU3hzTG5SdmRXTm9UMkpxWldOMExuTjNhWEJsVEdWdVozUm9QVTFoZEdndWNtOTFibVFvVFdGMGFDNXpjWEowS0UxaGRHZ3VjRzkzS0d3dWRHOTFZMmhQWW1wbFkzUXVZM1Z5V0Mxc0xuUnZkV05vVDJKcVpXTjBMbk4wWVhKMFdDd3lLU2twTEhJOVRXRjBhQzV5YjNWdVpDaE5ZWFJvTG5OeGNuUW9UV0YwYUM1d2IzY29iQzUwYjNWamFFOWlhbVZqZEM1amRYSlpMV3d1ZEc5MVkyaFBZbXBsWTNRdWMzUmhjblJaTERJcEtTa3NJV3d1YjNCMGFXOXVjeTUyWlhKMGFXTmhiRk4zYVhCcGJtY21KaUZzTG5OM2FYQnBibWNtSm5JK05EOG9iQzV6WTNKdmJHeHBibWM5SVRBc0lURXBPaWdoTUQwOVBXd3ViM0IwYVc5dWN5NTJaWEowYVdOaGJGTjNhWEJwYm1jbUppaHNMblJ2ZFdOb1QySnFaV04wTG5OM2FYQmxUR1Z1WjNSb1BYSXBMSFE5YkM1emQybHdaVVJwY21WamRHbHZiaWdwTEhadmFXUWdNQ0U5UFdrdWIzSnBaMmx1WVd4RmRtVnVkQ1ltYkM1MGIzVmphRTlpYW1WamRDNXpkMmx3WlV4bGJtZDBhRDQwSmlZb2JDNXpkMmx3YVc1blBTRXdMR2t1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LU2tzY3owb0lURTlQVDFzTG05d2RHbHZibk11Y25Sc1B6RTZMVEVwS2loc0xuUnZkV05vVDJKcVpXTjBMbU4xY2xnK2JDNTBiM1ZqYUU5aWFtVmpkQzV6ZEdGeWRGZy9NVG90TVNrc0lUQTlQVDFzTG05d2RHbHZibk11ZG1WeWRHbGpZV3hUZDJsd2FXNW5KaVlvY3oxc0xuUnZkV05vVDJKcVpXTjBMbU4xY2xrK2JDNTBiM1ZqYUU5aWFtVmpkQzV6ZEdGeWRGay9NVG90TVNrc2J6MXNMblJ2ZFdOb1QySnFaV04wTG5OM2FYQmxUR1Z1WjNSb0xHd3VkRzkxWTJoUFltcGxZM1F1WldSblpVaHBkRDBoTVN3aE1UMDlQV3d1YjNCMGFXOXVjeTVwYm1acGJtbDBaU1ltS0RBOVBUMXNMbU4xY25KbGJuUlRiR2xrWlNZbVhDSnlhV2RvZEZ3aVBUMDlkSHg4YkM1amRYSnlaVzUwVTJ4cFpHVStQV3d1WjJWMFJHOTBRMjkxYm5Rb0tTWW1YQ0pzWldaMFhDSTlQVDEwS1NZbUtHODliQzUwYjNWamFFOWlhbVZqZEM1emQybHdaVXhsYm1kMGFDcHNMbTl3ZEdsdmJuTXVaV1JuWlVaeWFXTjBhVzl1TEd3dWRHOTFZMmhQWW1wbFkzUXVaV1JuWlVocGREMGhNQ2tzSVRFOVBUMXNMbTl3ZEdsdmJuTXVkbVZ5ZEdsallXdy9iQzV6ZDJsd1pVeGxablE5WlN0dktuTTZiQzV6ZDJsd1pVeGxablE5WlN0dktpaHNMaVJzYVhOMExtaGxhV2RvZENncEwyd3ViR2x6ZEZkcFpIUm9LU3B6TENFd1BUMDliQzV2Y0hScGIyNXpMblpsY25ScFkyRnNVM2RwY0dsdVp5WW1LR3d1YzNkcGNHVk1aV1owUFdVcmJ5cHpLU3doTUNFOVBXd3ViM0IwYVc5dWN5NW1ZV1JsSmlZaE1TRTlQV3d1YjNCMGFXOXVjeTUwYjNWamFFMXZkbVVtSmlnaE1EMDlQV3d1WVc1cGJXRjBhVzVuUHloc0xuTjNhWEJsVEdWbWREMXVkV3hzTENFeEtUcDJiMmxrSUd3dWMyVjBRMU5US0d3dWMzZHBjR1ZNWldaMEtTa3BLWDBzWlM1d2NtOTBiM1I1Y0dVdWMzZHBjR1ZUZEdGeWREMW1kVzVqZEdsdmJpaHBLWHQyWVhJZ1pTeDBQWFJvYVhNN2FXWW9kQzVwYm5SbGNuSjFjSFJsWkQwaE1Dd3hJVDA5ZEM1MGIzVmphRTlpYW1WamRDNW1hVzVuWlhKRGIzVnVkSHg4ZEM1emJHbGtaVU52ZFc1MFBEMTBMbTl3ZEdsdmJuTXVjMnhwWkdWelZHOVRhRzkzS1hKbGRIVnliaUIwTG5SdmRXTm9UMkpxWldOMFBYdDlMQ0V4TzNadmFXUWdNQ0U5UFdrdWIzSnBaMmx1WVd4RmRtVnVkQ1ltZG05cFpDQXdJVDA5YVM1dmNtbG5hVzVoYkVWMlpXNTBMblJ2ZFdOb1pYTW1KaWhsUFdrdWIzSnBaMmx1WVd4RmRtVnVkQzUwYjNWamFHVnpXekJkS1N4MExuUnZkV05vVDJKcVpXTjBMbk4wWVhKMFdEMTBMblJ2ZFdOb1QySnFaV04wTG1OMWNsZzlkbTlwWkNBd0lUMDlaVDlsTG5CaFoyVllPbWt1WTJ4cFpXNTBXQ3gwTG5SdmRXTm9UMkpxWldOMExuTjBZWEowV1QxMExuUnZkV05vVDJKcVpXTjBMbU4xY2xrOWRtOXBaQ0F3SVQwOVpUOWxMbkJoWjJWWk9ta3VZMnhwWlc1MFdTeDBMbVJ5WVdkbmFXNW5QU0V3ZlN4bExuQnliM1J2ZEhsd1pTNTFibVpwYkhSbGNsTnNhV1JsY3oxbExuQnliM1J2ZEhsd1pTNXpiR2xqYTFWdVptbHNkR1Z5UFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN6dHVkV3hzSVQwOWFTNGtjMnhwWkdWelEyRmphR1VtSmlocExuVnViRzloWkNncExHa3VKSE5zYVdSbFZISmhZMnN1WTJocGJHUnlaVzRvZEdocGN5NXZjSFJwYjI1ekxuTnNhV1JsS1M1a1pYUmhZMmdvS1N4cExpUnpiR2xrWlhORFlXTm9aUzVoY0hCbGJtUlVieWhwTGlSemJHbGtaVlJ5WVdOcktTeHBMbkpsYVc1cGRDZ3BLWDBzWlM1d2NtOTBiM1I1Y0dVdWRXNXNiMkZrUFdaMWJtTjBhVzl1S0NsN2RtRnlJR1U5ZEdocGN6dHBLRndpTG5Oc2FXTnJMV05zYjI1bFpGd2lMR1V1SkhOc2FXUmxjaWt1Y21WdGIzWmxLQ2tzWlM0a1pHOTBjeVltWlM0a1pHOTBjeTV5WlcxdmRtVW9LU3hsTGlSd2NtVjJRWEp5YjNjbUptVXVhSFJ0YkVWNGNISXVkR1Z6ZENobExtOXdkR2x2Ym5NdWNISmxka0Z5Y205M0tTWW1aUzRrY0hKbGRrRnljbTkzTG5KbGJXOTJaU2dwTEdVdUpHNWxlSFJCY25KdmR5WW1aUzVvZEcxc1JYaHdjaTUwWlhOMEtHVXViM0IwYVc5dWN5NXVaWGgwUVhKeWIzY3BKaVpsTGlSdVpYaDBRWEp5YjNjdWNtVnRiM1psS0Nrc1pTNGtjMnhwWkdWekxuSmxiVzkyWlVOc1lYTnpLRndpYzJ4cFkyc3RjMnhwWkdVZ2MyeHBZMnN0WVdOMGFYWmxJSE5zYVdOckxYWnBjMmxpYkdVZ2MyeHBZMnN0WTNWeWNtVnVkRndpS1M1aGRIUnlLRndpWVhKcFlTMW9hV1JrWlc1Y0lpeGNJblJ5ZFdWY0lpa3VZM056S0Z3aWQybGtkR2hjSWl4Y0lsd2lLWDBzWlM1d2NtOTBiM1I1Y0dVdWRXNXpiR2xqYXoxbWRXNWpkR2x2YmlocEtYdDJZWElnWlQxMGFHbHpPMlV1SkhOc2FXUmxjaTUwY21sbloyVnlLRndpZFc1emJHbGphMXdpTEZ0bExHbGRLU3hsTG1SbGMzUnliM2tvS1gwc1pTNXdjbTkwYjNSNWNHVXVkWEJrWVhSbFFYSnliM2R6UFdaMWJtTjBhVzl1S0NsN2RtRnlJR2s5ZEdocGN6dE5ZWFJvTG1ac2IyOXlLR2t1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5vYjNjdk1pa3NJVEE5UFQxcExtOXdkR2x2Ym5NdVlYSnliM2R6SmlacExuTnNhV1JsUTI5MWJuUSthUzV2Y0hScGIyNXpMbk5zYVdSbGMxUnZVMmh2ZHlZbUlXa3ViM0IwYVc5dWN5NXBibVpwYm1sMFpTWW1LR2t1SkhCeVpYWkJjbkp2ZHk1eVpXMXZkbVZEYkdGemN5aGNJbk5zYVdOckxXUnBjMkZpYkdWa1hDSXBMbUYwZEhJb1hDSmhjbWxoTFdScGMyRmliR1ZrWENJc1hDSm1ZV3h6WlZ3aUtTeHBMaVJ1WlhoMFFYSnliM2N1Y21WdGIzWmxRMnhoYzNNb1hDSnpiR2xqYXkxa2FYTmhZbXhsWkZ3aUtTNWhkSFJ5S0Z3aVlYSnBZUzFrYVhOaFlteGxaRndpTEZ3aVptRnNjMlZjSWlrc01EMDlQV2t1WTNWeWNtVnVkRk5zYVdSbFB5aHBMaVJ3Y21WMlFYSnliM2N1WVdSa1EyeGhjM01vWENKemJHbGpheTFrYVhOaFlteGxaRndpS1M1aGRIUnlLRndpWVhKcFlTMWthWE5oWW14bFpGd2lMRndpZEhKMVpWd2lLU3hwTGlSdVpYaDBRWEp5YjNjdWNtVnRiM1psUTJ4aGMzTW9YQ0p6YkdsamF5MWthWE5oWW14bFpGd2lLUzVoZEhSeUtGd2lZWEpwWVMxa2FYTmhZbXhsWkZ3aUxGd2labUZzYzJWY0lpa3BPbWt1WTNWeWNtVnVkRk5zYVdSbFBqMXBMbk5zYVdSbFEyOTFiblF0YVM1dmNIUnBiMjV6TG5Oc2FXUmxjMVJ2VTJodmR5WW1JVEU5UFQxcExtOXdkR2x2Ym5NdVkyVnVkR1Z5VFc5a1pUOG9hUzRrYm1WNGRFRnljbTkzTG1Ga1pFTnNZWE56S0Z3aWMyeHBZMnN0WkdsellXSnNaV1JjSWlrdVlYUjBjaWhjSW1GeWFXRXRaR2x6WVdKc1pXUmNJaXhjSW5SeWRXVmNJaWtzYVM0a2NISmxka0Z5Y205M0xuSmxiVzkyWlVOc1lYTnpLRndpYzJ4cFkyc3RaR2x6WVdKc1pXUmNJaWt1WVhSMGNpaGNJbUZ5YVdFdFpHbHpZV0pzWldSY0lpeGNJbVpoYkhObFhDSXBLVHBwTG1OMWNuSmxiblJUYkdsa1pUNDlhUzV6Ykdsa1pVTnZkVzUwTFRFbUppRXdQVDA5YVM1dmNIUnBiMjV6TG1ObGJuUmxjazF2WkdVbUppaHBMaVJ1WlhoMFFYSnliM2N1WVdSa1EyeGhjM01vWENKemJHbGpheTFrYVhOaFlteGxaRndpS1M1aGRIUnlLRndpWVhKcFlTMWthWE5oWW14bFpGd2lMRndpZEhKMVpWd2lLU3hwTGlSd2NtVjJRWEp5YjNjdWNtVnRiM1psUTJ4aGMzTW9YQ0p6YkdsamF5MWthWE5oWW14bFpGd2lLUzVoZEhSeUtGd2lZWEpwWVMxa2FYTmhZbXhsWkZ3aUxGd2labUZzYzJWY0lpa3BLWDBzWlM1d2NtOTBiM1I1Y0dVdWRYQmtZWFJsUkc5MGN6MW1kVzVqZEdsdmJpZ3BlM1poY2lCcFBYUm9hWE03Ym5Wc2JDRTlQV2t1SkdSdmRITW1KaWhwTGlSa2IzUnpMbVpwYm1Rb1hDSnNhVndpS1M1eVpXMXZkbVZEYkdGemN5aGNJbk5zYVdOckxXRmpkR2wyWlZ3aUtTNWxibVFvS1N4cExpUmtiM1J6TG1acGJtUW9YQ0pzYVZ3aUtTNWxjU2hOWVhSb0xtWnNiMjl5S0drdVkzVnljbVZ1ZEZOc2FXUmxMMmt1YjNCMGFXOXVjeTV6Ykdsa1pYTlViMU5qY205c2JDa3BMbUZrWkVOc1lYTnpLRndpYzJ4cFkyc3RZV04wYVhabFhDSXBLWDBzWlM1d2NtOTBiM1I1Y0dVdWRtbHphV0pwYkdsMGVUMW1kVzVqZEdsdmJpZ3BlM1poY2lCcFBYUm9hWE03YVM1dmNIUnBiMjV6TG1GMWRHOXdiR0Y1SmlZb1pHOWpkVzFsYm5SYmFTNW9hV1JrWlc1ZFAya3VhVzUwWlhKeWRYQjBaV1E5SVRBNmFTNXBiblJsY25KMWNIUmxaRDBoTVNsOUxHa3VabTR1YzJ4cFkyczlablZ1WTNScGIyNG9LWHQyWVhJZ2FTeDBMRzg5ZEdocGN5eHpQV0Z5WjNWdFpXNTBjMXN3WFN4dVBVRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d3hLU3h5UFc4dWJHVnVaM1JvTzJadmNpaHBQVEE3YVR4eU8ya3JLeWxwWmloY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2MzeDhkbTlwWkNBd1BUMDljejl2VzJsZExuTnNhV05yUFc1bGR5QmxLRzliYVYwc2N5azZkRDF2VzJsZExuTnNhV05yVzNOZExtRndjR3g1S0c5YmFWMHVjMnhwWTJzc2Jpa3NkbTlwWkNBd0lUMDlkQ2x5WlhSMWNtNGdkRHR5WlhSMWNtNGdiMzE5S1R0Y2JpSmRmUT09In0=
